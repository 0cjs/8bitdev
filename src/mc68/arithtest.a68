;   arithtest: tests of and playing about with arithmetic routines

;   Standard locations for inputs and results. All operations are in the
;   form X = A ⋅ B, with Y as an additional result where needed. These are
;   prefixed by `_` to avoid conflicts with register names.
;
_A          equ $20
_B          equ $22
_X          equ $24
_Y          equ $26

;   Divide unsigned 16-bit word via shift-and-subtract
;   _X = _A / _B, remainder _Y      ♠_X,_Y, ♣_A,A,B ♡_B,X
;
;   The basic algorithm works just like decimal long division by hand. We
;   collect digits (bits) from the left (most signifcant end) until we
;   have accumlated enough digits that we can subtract the divisor
;   from them. At this point the rightmost digit (bit) we've collected is
;   treated as the temporary "ones" column, we do our subtraction leaving a
;   remainder, and then add the result of the subtraction to the current
;   digit column (bit position) in the quotient that we're working on. We
;   carry on this way until all columns (bits positions) have been done.
;
;   There are two main differences from by-hand decimal when we do this in
;   binary on a computer.
;   1. Rather than moving our pencil along the digit columns from left to
;      right, we leave our attention point fixed (on the dividend's MSbit
;      and the quotient's and remainders LSbit) and instead, with each loop
;      of the algorithm, shift the columns/bits out of the dividend and
;      into the remainder and quotent.
;   2. Since every shift in binary only doubles the remainder, it is never
;      possible to subtract more than one times the divisor from the
;      remainder, meaning that we never need to add more than one bit to
;      the quotient. (In base 10 a one-digit shift multiplies by ten, so
;      you might have as much as 9 × the divisor in the remainder, and
;      thus have to subtract all that and add up to 9 to the quotent.)
;
divUW_ss    ;  Q = D / V,  R = D mod V

.Dh         equ _A          ; dividend  high byte
.Dl         equ _A+1        ;           low
.Vh         equ _B          ; divisor   high byte
.Vl         equ _B+1        ;           low
.Qh         equ _X          ; quotient  high byte
.Ql         equ _X+1        ;           low
.Rh         equ _Y          ; remainder high byte
.Rl         equ _Y+1        ;           low

            lda A,#0        ; clear outputs
            sta .Qh
            sta .Ql
            sta .Rh
            sta .Rl
            lda B,#16       ; bits in a word

.loop       asl .Dl         ; MSB out of dividend...
            rol .Dh
            rol .Rl         ;   ...and into remainder
            rol .Rh
            lda A,.Rh       ; remainder MSB - divisor MSB
            cmp A,.Vh
            bcs .noquotent  ; R < V: cannot subtract divisor from remainder
            bgt .hasquotent ; R > V: must subtract divisor from remainder
            lda A,.Rl       ; MSBs were equal, so compare LSBs
            cmp A,.Vl
            bcs .noquotent  ; R < V: cannot subtract divisor from remainder

.hasquotent ; move quotient portion from remainder to quotent
            lda A,.Rl       ; R = R - V, making R less than V again
            sub A,.Vl
            sta A,.Rl
            lda A,.Rh       ;   (MSB)
            sbc A,.Vh
            sta A,.Rh
            sec             ; V now removed from remainder; add it into Q by
            rol .Ql         ;   settting in Q the current bit we're working
            rol .Qh         ;   on. (This will be shifted up to its proper
            bra .next       ;   place as we carry on.)

.noquotent  clc             ; R was less than V, so nothing to add to Q.
            rol .Ql
            rol .Qh
.next       dec B
            bne .loop

            rts
