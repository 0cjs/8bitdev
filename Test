#!/usr/bin/env bash
set -eu -o pipefail

die() {
    local exitcode="$1"; shift
    [[ -z $1 ]] || echo 1>&2 "$@"
    exit $exitcode
}

####################################################################
#   Build functions

build_toolsets() {
    [[ -f $all_tools ]] && $b8tool buildtoolset asxxxx
    $b8tool buildtoolset asl
    $b8tool buildtoolset diskimg
    $b8tool buildtoolset dos33fs
    $b8tool buildtoolset linapple
    $b8tool buildtoolset bm2
}

#   ASxxxx builds
build_asxxxx() {
    #   Due to issues with 32-bit binaries, run only when $all_tools set.
    [[ -f $all_tools ]] || return 0

    local sources=$(echo src/asxxxx/*.a*)
    [[ -f $fast_hack ]] && {
        #   Because they do no dependency checks, the builds below rebuild
        #   everything whether needed or not. To speed things in fast_hack
        #   mode we do a basic depenendency check "by hand" (which is
        #   probably not all that reliable) and let the full rebuild go
        #   ahead only if we notice something needs to be rebuilt.
        local need_rebuild= src obj
        for src in $sources; do
            obj=.build/obj/src/asxxxx/$(basename ${src%.*}).bin
            [[ $src -nt $obj ]] && need_rebuild=1
        done
        [[ -z $need_rebuild ]] && return
    }

    #   Though we don't need to explicitly specify `simple` as an input
    #   file for the link (aslink would get it from the output file) we
    #   do so anyway to test that b8tool handles it correctly.
    $b8tool asx     src/asxxxx/simple.a65
    $b8tool asxlink src/asxxxx/simple simple
    $b8tool asx     src/asxxxx/reloctest.a65
    $b8tool asxlink src/asxxxx/reloctest -- -b '_code=0x400'
    $b8tool asx     src/asxxxx/zptest.a65
    $b8tool asxlink src/asxxxx/zptest -- -b '_code=0x0300'
}

####################################################################
#   Main

export B8_PROJDIR=$(cd "$(dirname "$0")" && pwd -P)
export BUILDDIR="$B8_PROJDIR/.build"
all_tools="$B8_PROJDIR/.all-tools"

#   Creating this file is useful to slightly speed the edit/build/test
#   cycle when working on "regular" ASL code; the toolsets and asxxx builds
#   are the majority of the wall clock time when running only a few tests.
#   This file is never ignored or committed so `git status` will make it
#   clear you're not building everything that might be changed.
#   XXX This can go when we move more stuff into a single b8tool invocation.
fast_hack="$B8_PROJDIR/.fast-hack"

b8bin="$B8_PROJDIR/b8tool/bin"
b8tool="$b8bin/b8tool"
b8_plib="$B8_PROJDIR/b8tool/pylib"      # used locally; not part of b8tool

#   Leading command line args (these must be at the start):
#   • -C: clean rebuild of everything, including toolchains
#   • -c: clean rebuild of only this repo's source (test/toolchain output)
#   • -A: build and use all tools
#   All args after these are passed on to pytest.
while [[ ${#@} -gt 0 ]]; do case "$1" in
    -C)     shift; rm -rf "$BUILDDIR" $fast_hack;;
    -c)     shift; rm -rf "$BUILDDIR"/{obj,ptobj,pytest,virtualenv};;
    -A)     shift; touch "$all_tools";;
    *)      break;;
esac; done

. $B8_PROJDIR/b8tool/pactivate -B "$B8_PROJDIR" -q

[[ -f $fast_hack ]] || build_toolsets
[[ $PATH =~ ^$B8_PROJDIR/bin:|:$B8_PROJDIR/bin:|:$B8_PROJDIR/bin$ ]] \
    || export PATH="$B8_PROJDIR/bin:$PATH"

#   Builds of asxxxx sources are a completely separate thing right now
#   so that we can more easily skip the (re-)builds if $fast_hack is set.
build_asxxxx

$b8tool aslauto exe/ src/ --exclude=src/asxxxx/
manual_build=(
    #   Top-level programs whose build is not triggered by automated tests.
    src/asl/nomacro.a65         # Test/demo for ASL macro expansion
    exe/a1/charset.a65
    src/a2/misc.a65
    exe/cbm/ted-keymatrix.a65
    src/fm7.a69
    exe/jr200/hello.a68 exe/jr200/old-pmon.a68 exe/jr200/samples.a68
    exe/mb6885/hello.a68 exe/mb6885/old-pmon.a68 exe/mb6885/writenum.a68
    exe/tmc68/hello.a68 exe/tmc68/old-pmon.a68
)
$b8tool asl "${manual_build[@]}"

#   This builds an Apple II disk image from an AS source file. Probably
#   this should be in smaller steps so we can extend the idea to building
#   output for other microcomputers where we may want, e.g., a raw file
#   for an emulator, a tape image with that file, and a disk image with
#   that file that autoboots, all from the same build.
$b8tool a2dsk exe/a2/charset.a65

#   Various other builds of things from .p files.
#   Not yet figured out how this should be integrated into b8tool.

objdir="$BUILDDIR/obj"
"$b8bin/cmtconv" -p jr200 -i obj \
    -f HELLO "$objdir/exe/jr200/hello.p" "$objdir/exe/jr200/hello.wav"
"$b8bin/cmtconv" -p mb6885 -i obj \
    -f HELLO.B "$objdir/exe/mb6885/hello.p" "$objdir/exe/mb6885/hello.wav"

#   Unit Tests
$b8tool pytest -- "$@"

#   Functional tests are run only if we ran all unit tests. (This is not
#   the best way to avoid running them when unwanted, but it's a convenient
#   hack for the moment.)
[[ ${#@} = 0 ]] && {
    #   We run them in quiet mode here, but if they fail you want
    #   to do this manually without the -q.
    ./b8tool/pylib/cmtconv/Test -q \
        || die $? "FAILED: cmtconv/Test (exitcode=$?)"
} || true
