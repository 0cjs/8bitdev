;-*-MIDAS-*-

	.TITLE	APPLE TERMINAL PROGRAM

STATUS = $C0AE			;ACIA status word location
DATA = $C0AF			;ACIA data port
BELL = $FF3A			;monitor bell subroutine
KBD = $C000			;keyboard character input port
KBDSTR = $C010			;keyboard strobe
BASIC = $E003			;BASIC start address
LOCSE = $DF			;lowercase AND'ing word
SPOSLO = $0001			;low byte of cursorpos
SPOSHI = $0002			;high "		"
VERPOS = $2200			;cursor vertical pos
HORPOS = $2201			;  "   horizontal "
. = $2000

INIT:	LDA #$04		;at beginning of screen
	STA SPOSHI
	LDA #$00
	STA SPOSLO
	STA HORPOS
	STA VERPOS
	STA $C051		;text mode
	LDA #$03		;initialize ACIA
	STA STATUS
	LDA #$56		;1200 baud
	STA STATUS
	JSR $FC58		;clear screen

INPUT:	LDA STATUS		;get ACIA status word
	LSR A
	BCC RKBD		;if no char read keyboard
	LDA DATA		;if win get char
	AND #$7F
	CMP #$60		;lowercase?
	BCC OUT			;no, out clean
	AND #LOCSE		;uppercase it
OUT:	JSR COUT		;put it to screen
	JMP INPUT		;back for more

RKBD:	LDA KBD
	BPL INPUT		;strobe off -> get more input
	AND #$7F
	LDY #$00
	STY KBDSTR
	CMP #$11		;is it a ^Q?
	BEQ ESC			;yes, next char is sacred
	CMP #$08		;^H?
	BNE SOUT		;no, output it
	LDA #$7F		;yes, rubout
SOUT:	STA DATA		;send it to machine
	JMP INPUT		;and back for more

ESC:	JSR BELL		;let user know we're listening

LOOP:	LDA KBD
	BPL LOOP		;no char -> look again

	AND #$7F
	LDY #$00
	STY KBDSTR
	CMP #$11		;^Q?
	BEQ SOUT		;send it out
	CMP #$08		;^H?
	BEQ SOUT		;send it out
	CMP #$02		;^B?
	BEQ GBASIC		;put user in BASIC
	CMP #$04		;^D?
	BEQ DONE		;return to caller
	JSR BELL		;anything else, complain
	JMP INPUT		;back to main loop

GBASIC:	JMP BASIC		;go to BASIC

DONE:	RTS


.SBTTL DISPLAY SUBROUTINE

;cout is the user accessible output routine. call it with the
;character in the ac, and it will output the character and reposition
;the cursor. it bashes just about the entire machine state, but you
;shouldn't be calling a subroutine without saving ps, ac, x and y
;anyway. At any time, SPOSLO and SPOSHI describe the location of the
;cursor. HORPOS, at any time, describes the location of the cursor on
;the current line. VERPOS gives the current physical line.

TST:	LDA #$5A		;capital x

COUT:	ORA #$80		;high bit on so no reverse video
	CMP #$8D
	BEQ CRET		;carriage return
	CMP #$8A
	BEQ LF			;line feed
	CMP #$87		;^G?
	BEQ YELL
	LDY #$00		;no offset
	STA (SPOSLO),Y		;put char on screen
	INC HORPOS
	LDA HORPOS
	CMP #$28		;no more space?
	BNE SIMPLE		;no, simple
	INC VERPOS
	LDA VERPOS		;yes, next line
	CMP #$18		;no more lines?
	BNE NXTLIN		;no, just get next
	LDA #$00		;yes, next is 0
	STA VERPOS		;store new physical line
NXTLIN:	JSR REALVT		;find memory location
	LDA #$00
	STA HORPOS		;store new horizontal position
	JMP CURSOR
SIMPLE:	STA HORPOS		;simply store new hor. pos.
	INC SPOSLO		;and increment last memory loc.
CURSOR:	LDA (SPOSLO),Y		;turn off high bit for flash,
	AND #$7F		;and turn on 40's bit for
	ORA #$40		;non-alphabetics to flash.
	STA (SPOSLO),Y		;put cursor
	RTS
RMCURS:	LDA (SPOSLO),Y		;get current contents
	CMP #$60		;if alphabetic,
	BCC LVFRTY		;leave forty's bit on
	AND #$BF		;clear it
LVFRTY:	ORA #$80		;turn on high bit
	STA (SPOSLO),Y		;put char
	RTS	
CRET:	JSR RMCURS		;remove cursor
	LDA SPOSLO		;subtract current hor. pos.
	SEC			;from low byte of mem. loc.
	SBC HORPOS
	STA SPOSLO
	LDA #$00
	STA HORPOS		;make current hor. pos. 0
	JMP CURSOR		;don't bash place you're on
	RTS
LF:	JSR RMCURS		;remove cursor
	INC VERPOS		;next line
	LDA VERPOS
	CMP #$18		;no more lines?
	BNE DOIT
	LDA #$00		;none, so next is zero
	STA VERPOS
DOIT:	JSR REALVT		;get the location
	LDA SPOSLO
	CLC
	ADC HORPOS		;add the hor. pos.
	STA SPOSLO
	JSR CTEOL
	JMP CURSOR
YELL:	JSR BELL
	RTS

;clear from the current cursor pos to the end of the current line,
;inclusive.

CTEOL:	LDA #$28
	SEC
	SBC HORPOS
	TAX			;num spaces to fill in x
	LDA #$A0		;filler in AC
	LDY #$00		;offset from cursor pos in y
CLOOP:	STA (SPOSLO),Y		;put a space in next location
	INY
	DEX
	BNE CLOOP
	LDY #$00		;y is sacredly zero for my code.
	RTS

;given the physical line number in the accumulator, return the memory
;location of the first character on this line. Low order byte is
;SPOSLO, high order byte is SPOSHI.

REALVT:	CMP #$08
	BCS NEX1
	JSR LOOKUP
	RTS
NEX1:	CMP #$10
	BCS NEX2
	SEC
	SBC #$08
	JSR LOOKUP
	CLC
	LDA SPOSLO
	ADC #$28
	STA SPOSLO
	RTS
NEX2:	SEC
	SBC #$10
	JSR LOOKUP
	CLC
	LDA SPOSLO
	ADC #$50
	STA SPOSLO
	RTS

LOOKUP:	PHA
	LSR A
	BCS ODD
	LDA #$00
	STA SPOSLO
	JMP GETHI
ODD:	LDA #$80
	STA SPOSLO
GETHI:	PLA
	CMP #$02
	BCS NXT1
	LDA #$04
	STA SPOSHI
	RTS
NXT1:	CMP #$04
	BCS NXT2
	LDA #$05
	STA SPOSHI
	RTS
NXT2:	CMP #$06
	BCS NXT3
	LDA #$06
	STA SPOSHI
	RTS
NXT3:	LDA #$07
	STA SPOSHI
	RTS

	.END
