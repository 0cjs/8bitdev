from    testmc.symtab   import SymTab
import  pytest

def test_empty_symtab():
    s = SymTab()
    assert 0 == len(s)

def test_SymTab():
    sym1 = SymTab.Symbol('one', 1, None)
    sym2 = SymTab.Symbol('two', 'Two', None)
    s = SymTab([sym1, sym2])

    #   .sym() interface
    assert     sym1 == s.sym('one')
    assert     sym2 == s.sym('two')

    #   Attribute interface
    assert        1 == s.one
    assert    'Two' == s.two

    #   Collection interface
    assert        1 == s['one']
    assert   'Two'  == s['two']
    assert        2 == len(s)
    for name, value in s:
        assert name in ('one', 'two')
        assert value in (1, 'Two')

def test_fromargs():
    s = SymTab.fromargs(a=3, bc=7)
    assert 3 == s.a
    assert 7 == s.bc
    assert 2 == len(s)

def test_valued():
    s = SymTab.fromargs(a=1, b=2, c=2)
    assert set()                            == s.valued(0)
    assert set([ s.sym('a') ])              == s.valued(1)
    assert set([ s.sym('b'), s.sym('c') ])  == s.valued(2)

####################################################################
#   Merge

st = SymTab.fromargs

def test_merge_no_conflict():
    s = st(a=1, b=2)
    s.merge(st(c=3))
    assert (3, 1, 2, 3) == (len(s), s.a, s.b, s.c)

def test_merge_with_conflict():
    s = st(a=1, b=2)
    with pytest.raises(ValueError) as ex:
        s.merge(st(b=3))
    assert ex.match(r"^duplicate symbol: .*name='b', value=3")

def test_merge_ignorenew():
    s = st(a=1, b=2)
    s.merge(st(c=3), style='ignorenew')
    assert (2, 1, 2) == (len(s), s.a, s.b)

def test_merge_prefcur():
    s = st(a=1, b=2)
    s.merge(st(b=3), style='prefcur')
    assert (2, 1, 2) == (len(s), s.a, s.b)

def test_merge_prefnew():
    s = st(a=1, b=2)
    s.merge(st(b=3), style='prefnew')
    assert (2, 1, 3) == (len(s), s.a, s.b)

def test_merge_retval():
    s0 = st(a=1, b=2)
    s1 = st(c=3)
    assert s1 is s0.merge(s1, style='ignorenew')
