from    testmc.mc6800  import *

object_file = 'src/mc68/cpxtest.p'

def test_cpxtest(m, S):
    otlen = int((S.argstable_end - S.argstable) / 4)
    assert b'\x00'*otlen == m.bytes(S.outtable, otlen), 'outtable before'
    m.call(S.cpxtest)
    assert S.outtable + otlen == m.word(S.outptr)

    # Flag register bits: 11hiNZVc
    #    Flag bit values: N=8  Z=4  V=2

    #   See testmc.mc6800.opimpl test cpxparams
    testmc_expected = b''.join([
        b'\xC4' * 6,
        b'\xC0\xC0\xC8',
        b'\xC0\xCA\xCA\xC8',
        b'\xC0\xC8\xC8\xC2',
        ])

    #   XXX The output of a run on a real JR-200. This is unexpected and
    #   appears to be wrong; neither Z ($4) nor V ($2) are ever set, and
    #   N ($8) seems to bear no relation to what it should. Further testing
    #   by hand (see routine after this one in the source file) seems to
    #   show expected and correct behaviour when doing similar things, so
    #   I'm not clear what's wrong here.
    jr200_actual = b''.join([
        b'\xC8\xC8\xC8\xC8', b'\xC0\xC0\xC8\xC8',
        b'\xC8\xC0\xC0\xC0', b'\xC8\xC0\xC8\xC8',
        b'\xC8',
        ])

    assert testmc_expected == m.bytes(S.outtable, otlen), 'after'


def test_cpxtest_debug(m, S, R):
    ''' This "test" executes to a breakpoint, printing out a trace of
        information at that point.

        It serves as a demonstration of how the test framework can
        provide debugger functionality. It would be good to add a
        parameter to `Machine.call()` that would allow you to pass
        in an address and stuff to print at that address so that
        tracing like this doesn't have to be done manually.
    '''
    print('inptr x    arg  pcr outptr')
    data   = '{:04X}  {:04X} {:04X} {:02X}  {:04X}'

    m.setregs(R(pc=S.cpxtest))
    breakpoint = S['cpxtest.breakpoint']
    while True:
        m.stepto(stopat=[breakpoint], stopon=[I.RTS])
        if m.regs.pc != breakpoint:
            break   # not breakpoint; we're done
        print(data.format(
            m.word(S.inptr),
            m.regs.x,
            m.word(S.arg),
            m.regs.a,
            m.word(S.outptr),
            ))

   #assert 0, 'done'    # print stdout, where we logged our trace
