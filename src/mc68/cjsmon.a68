;   XXX something that should become a machine-language monitor one day

    ifdef UNIT_TESTING
;   XXX These definitions should really be coming from the .pt file.
rdlinebuf       equ $180
rdlinebuf_end   equ $200
    endif

; ----------------------------------------------------------------------
;   External Requirements

    ifndef rdlinebuf                ; input buffer first byte
        error 'rdlinebuf must be defined'
    endif
    ifndef rdlinebuf_end            ; input buffer last byte + 1
        error 'rdlinebuf_end must be defined'
    endif

; ----------------------------------------------------------------------
;   Standard functions, macros and definitions
;   (Much of this should probably be moved to `stddef`.)

LSB         function addr,(addr & $FF)
MSB         function addr,((addr & $FF00) >> 8)

;   ASCII character definitions
BEL         equ $07                 ; bell ('\a')
BS          equ $08                 ; backspace ('\b')
LF          equ $0A                 ; line feed ('\n')
CR          equ $0D                 ; carriage return ('\r')
SPACE       equ ' '
DEL         equ $7F

;   Monitor definitions
PROMPT      equ '>'

; ----------------------------------------------------------------------
;   Storage for variables that must be in RAM.
;   Monitor variables are prefixed with `M`.

;   Current parse point in command input buffer.
;   This may be updated by commands that parse data after the command letter,
;   but it must not be moved past the terminating `0`.
cmdqptr     ds  2               ; current parsing loc in command input buffer

;   Other parser storage locations.
tmp1        equ $E1     ; temp storage
tmp2        equ $E2 ;$E3  temp storage
Mpending    equ $E4 ;$E5  last value input before a command
qhex_out    equ $E6 ;$E7  last qhex result ($0000 if qhex failed)
stat        equ $E9     ; status values:
                        ;   b7:   0=no pending value, 1=pending value available
                        ;   b6-0: unused
tmp1a       equ $EA     ; temp location during refactoring
cmdtbl      equ $F0 ;$F1  pointer to command table (see below)
Mexamcur    equ $F2 ;$F2  examine command current start addr
Mexamwidth  equ $F4     ; examine width: bytes per line to print
Mexamlines  equ $F5     ; examine lines: number of lines to print
Mdepcur     equ $F6 ;$F7  deposit command current start addr

; ----------------------------------------------------------------------
;   Command loop

;   Do minimum initialization to avoid truly broken behaviour and
;   then drop into command loop.
init        ldx #cmdtbl_std     ; default command table
            stx cmdtbl
            lda A,#$10          ; default examine width: 16 bytes
            sta A,Mexamwidth
            lda A,#8            ; default examine size: 8 lines
            sta A,Mexamlines

cmdloop     jsr prnl            ; Not clear that we should always be starting
                                ;   with a newline, rather than having commands
                                ;   terminate their output with one.
.skipnl     lda A,#PROMPT
            jsr prchar
            jsr prspace
            jsr rdline
            bcs .skipnl         ; if ^C, ignore line
            stx cmdqptr

.parse      ldx cmdqptr
            lda A,0,X           ; reached terminator?
            beq cmdloop         ; yes, read another line of commands

            ;   Standard commands will RTS when done; we set up the stack
            ;   so that after we JMP to them they will come back here where
            ;   we will continue parsing the remainder of the command line.
            ;   (Essentially, continuation-passing style.)
            lda A,#LSB(.parse)
            psh A
            lda A,#MSB(.parse)
            psh A

            ;   Start by attempting to parse a hexword as the pending value.
            jsr qhexword        ; parsed a hexword?
            bpl savepending     ; yes, save as pending and carry on parsing

            ;   Consume a char and parse it as a command.
            ;   (Callees who need to know the char parsed may DEX to get it.)
            lda A,0,X           ; load char we're checking
            inx                 ; move input pointer to next char
            stx cmdqptr         ;   for later

.search     ldx cmdtbl
.next       lda B,0,X           ; load next command char from table
            cmp B,#00           ; end of table?
            beq .unkcmd         ; yes, unknown command
            cba                 ; found command?
            beq .callcmd        ; yes, call it
            inx                 ; skip past command char in table
            inx                 ;   and its address
            inx
            bra .next

.callcmd    ldx 1,X             ; load command address
            jmp ,X              ; call command (TCO)

            ;   No command matched; we have an error
.unkcmd     pul B               ; no subroutine to call, so take .parse
            pul B               ;   address off the stack.
            jsr errbeep         ; beep for error (XXX should show err msg)
            bra cmdloop

savepending stx cmdqptr         ; consume the parsed text
            ldx qhex_out        ; copy parsed value into pending
            stx Mpending
            lda A,stat
            ora A,#$80          ; ensure pending available bit set
            sta A,stat
            rts

;   ♠X,stat ♣A  Copy Mpending to (X), if available.
;
;   If `stat` has bit 7 clear, indicating that the last call to `qhex` read
;   a value, copy that value to the location pointed to by X and clear bit
;   7 of `stat`. Otherwise do nothing.

usepending  tpa                 ; set bit 7 (pending available) in A
            bit A,stat          ; is it set?
            bpl .done           ; no, nothing pending
            lda A,Mpending      ; copy MSB
            sta A,0,X
            lda A,Mpending+1    ; copy LSB
            sta A,1,X
            lda A,stat
            and A,#$7F          ; clear pending available bit to indicate
            sta A,stat          ;   that Mpending has been consumed
.done       rts

; ----------------------------------------------------------------------
;   Command Table

;   The `cmdtbl` variable points to the current command table used by the
;   parser. Each 3-byte entry is one of:
;   • A command character followed by the address of the routine
;     for that command; the routine should finish with RTS.
;   • A $00 character and $0000 address indicating end of table.
;   • XXX need to define entry for continuation address of table.

;   `init` sets `cmdtbl` to point to `cmdtbl_std`. The user may change this
;   to point to his own command table to add new commands or override
;   existing ones; usually the last entry of the user's table would be a
;   continuation pointer to `cmdtbl_std`.

cmdtbl_std
            db ' '
            dw      rtscmd      ; do nothing
            db ':'
            dw      deposit     ; enter data into memory
            db '^'
            dw      nlcmd       ; print newline
            db 'q'
            dw      quitcmd     ; "quit"; exit to monitor's caller
            db 'x'
            dw      examine     ; examine memory
            db $00
            dw      $0000       ; end of table

; ----------------------------------------------------------------------
;   Commands
;
;   When a command routine is called, A will contain the command char and
;   `cmdqptr` will point to the first character after the command. If the
;   command routine does further parsing of arguments, it must increment
;   `cmdqptr` to consume what it has parsed. RTS will continue parsing
;   from `cmdptr`.

quitcmd     pul B               ; remove continuation address so that we
            pul B               ;   return to what called the monitor
rtscmd      rts

;   print a newline; useful for separating output and unit tests
nlcmd       jmp prnl            ; RTS (TCO)

;   deposit byte arguments to memory at Mcur.
;
;   The argument is pairs of ASCII hex digits. Spaces terminate reading of
;   a single-digit byte and are otherwise ignored. The data are terminated
;   by any other character, which will be left to be executed as the next
;   command on the line. The one exception is `:`, which is consumed in
;   order to provide a convenient way of terminating input when the
;   following command is a hex number that would otherwise be interpreted
;   as data to be deposited.
;
deposit     ldx #Mdepcur
            bsr usepending
            ldx Mdepcur
            stx tmp2            ; deposit index
.next       ldx cmdqptr         ; current input pointer
            jsr qhexbyte
            bmi .nothex         ; not hexbyte, skip space or end
            stx cmdqptr         ; save next parse position
            lda A,qhex_out+1    ; byte we just read
            ldx tmp2            ; current deposit index
            sta A,,X
            inx
            stx tmp2            ; next deposit index
            bra .next

.nothex     lda A,,X            ; load next character
            cmp A,#':'          ; terminator to consume?
            beq .term           ; yes, we're done
            cmp A,#' '          ; is it a space?
            bne .rts            ; no, we're done
            inx                 ; skip past space
            stx cmdqptr
            bra .next           ; and continue parsing

.term       inx                 ; consume terminator
            stx cmdqptr
.rts        rts


;   Examine memory.
;
;   Starting at address `Mexamcur', `Mexamlines` of `Mexamwidth` bytes are
;   printed in hexadecimal.
;
;   If a pending value is available, `Mexamcur` is set to that, otherwise
;   it's left unchanged. There is one optional argument after the command,
;   a hex byte setting `Mexamlines`. (XXX Possibly 0 lines should use the
;   current range?)

examine     ldx #Mexamcur
            bsr usepending
            ldx cmdqptr
            jsr qhexbyte        ; new Mexamlines value given?
            bmi .noarg          ; no, use current default
            stx cmdqptr         ; yes, consume argument
            lda A,qhex_out+1    ;   and use arg
            sta A,Mexamlines    ;   to set new default
.noarg      lda A,Mexamlines    ; lines to print
            sta A,tmp1          ; set remaining lines left to print
            ldx Mexamcur        ; load start location to examine

.nextline   ;   print current line address
            stx tmp2
            lda A,tmp2          ; addr hi
            jsr prhex
            lda A,tmp2+1        ; addr lo
            jsr prhex
            lda A,#':'
            jsr prchar
            ;   print data
            lda B,Mexamwidth    ; bytes per line
.nexthex    jsr prspace
            lda A,,X
            jsr prhex
            inx
            dec B
            bne .nexthex
            jsr prnl
            dec tmp1            ; lines left to print
            bne .nextline
            rts

; ----------------------------------------------------------------------
;   rd* - read input

;   ♠X ♣A ♡B Read a line of user input, echoing each character.
;   On return X will point to the chars read, terminated by $00,
;   and the carry will be clear for CR termination, set for ^C termination.
;
;   The following characters are interpreted specially:
;     - BS, DEL: if not at start of input, echo a BS and delete the
;       previously entered character.
;     - CR: echo a newline and return with C=0.
;     - ^C: beep, echo a newline and return with C=1.
;
;   This uses its own buffer, rdlinebuf, which is overwritten with every call.
;   When the buffer is full rdline will beep instead of accepting input chars.
;
rdline      ldx #rdlinebuf
.nextchar   jsr rdchar
            cmp A,#CR           ; done?
            bne .continue
            jsr prnl
            clr ,X              ; clears carry
.ret        ldx #rdlinebuf      ; no effect on carry
            rts

.continue   cmp  A,#$03         ; Ctrl-C
            beq  .cancel
            ;   If we're on the last byte of the buffer, we need to save that
            ;   for the termination char. So just reject input at that point.
            cpx #(rdlinebuf_end - 1)
            bne .accept
            jsr errbeep
            bra .nextchar

.accept     cmp  A,#$00         ; ignore NUL
            beq  .nextchar
            cmp  A,#BS
            beq .backspace
            cmp  A,#DEL
            beq .backspace
            sta A,0,X
            inx
.echo       jsr prchar
            bra .nextchar

.backspace  cpx #rdlinebuf
            beq +               ; don't backspace past beginning of buffer
            dex
+           lda A,#BS
            bra .echo

.cancel     ;   We terminate without storing the Ctrl-C char mainly
            ;   because we don't know if we have space for it. We might
            ;   be on the last byte of the buffer already.
            clr ,X
            jsr errbeep         ; beep to indicate cancel
            jsr prnl
            sec                 ; indicate input cancelled
            bra .ret

; ----------------------------------------------------------------------
;   q* - parsing

qhex_len    equ tmp1
qhex_stat   equ tmp1a
            include "src/mc68/qhex.a68"

; ----------------------------------------------------------------------
;   pr* - printing output

;   ♣A Print value in a as hex to the character output port.
;   Falls through to prnyb.
prhex       psh A
            lsr A
            lsr A
            lsr A
            lsr A
            bsr prnyb
            pul A
            ; fallthrough

;   ♣A Print lower nybble of A to the character output port.
prnyb       and A,#$0F
            add A,#'0'
            cmp A,#'9'+1
            bmi .digit
            add A,#'A'-'9'-1
.digit      jsr prchar
            rts

;   ♣A Print a space.
prspace     lda A,#SPACE
            jsr prchar
            rts

