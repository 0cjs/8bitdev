from    testmc  import *
from    testmc.mc6800  import *
import  pytest

R = Machine.Registers

test_rig = '''
            cpu 6800
            org $1000

pmon_ramlo  equ $0080
pmon_org    equ $1000
            include src/mc68/std.a68
            include src/tmc68/bios.a68
            include src/pmon/pmon.a68

            org $4FFF
ct1
            db  'a'             ; command character
cmd_a       dw  cmd_a_ep        ; command entrypoint
            db  'x',CTP_WORD    ; parameters
            db  'y',CTP_BYTE
            db  CTP_END

            db  CT_CONTINUE
            dw  ct2

            org $5EEE
ct2
            db  'n'             ; command with no parameters
            dw  0
            db CTP_END

            db  'b'
cmd_b       dw  cmd_b_ep
            db  'x',CTP_BYTE
            db  'y',CTP_WORD
            db  CTP_END

            db  CT_END
cmd_err     dw  Cerror

cmd_a_ep    rts
cmd_b_ep    rts
cmd_err_ep  equ Cerror
'''

@pytest.mark.parametrize('cmdchar, sym', [
    (ord('a'),  'cmd_a'),
    (ord('b'),  'cmd_b'),
    (ord('w'),  'cmd_err'),
    (0xFF,      'cmd_err'),
])
def test_ct_(m, S, R, cmdchar, sym):
    m.depword(S.cmdtbl, S.ct1)
    m.call(S.cmdlookup, R(a=cmdchar, x=0xFFFF))
    print('entry:', m.hexdump(m.x - 1, 9))
    assert (cmdchar, S[sym], S[sym + '_ep']) == (m.a, m.x, m.word(m.x))
