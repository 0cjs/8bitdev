;
;   std.i80 - Standard Intel 8080/8085 and Zilog Z80 definitions
;
;   These are some standard definitions (mainly macros) we commonly
;   use with source code assembled with the Macro Assembler AS.
;
;   The CPU must be specified with the `CPU` pseudo-op before this
;   file is included; that allows this file to use MOMCPU/MOMCPUNAME
;   to change its behaviour for different 8080/8085/Z80 variants.
;
;   Our standard constant definition and storage allocation of DS/DB/DW
;   is native on this CPU.
;

;   In general, we use {NOEXPAND} on macros that do not generate code in
;   order to keep the listing clean. However, for macros that do generate
;   code we do not use it so that we can see the code that was generated;
;   without this one sees just a (MACRO) line followed by the address after
;   the macro, which can be a bit confusing.

;--------------------------------------------------------------------------
;   CPU/Assembly Language Setup

    relaxed on              ; allow $NN hex constants
  if MOMCPUNAME != 'Z80'
    z80syntax exclusive     ; life is easier with the same syntax everywhere
  endif

;--------------------------------------------------------------------------
;   Restart addresses
;   We use the Zilog $00,$08,$10,… convention, not Intel 0,1,2,….

RST_00      equ $00     ; 8080: RST 0
RST_08      equ $08     ; 8080: RST 1
RST_10      equ $10     ; 8080: RST 2
RST_18      equ $18     ; 8080: RST 3
RST_20      equ $20     ; 8080: RST 4
RST_28      equ $28     ; 8080: RST 5
RST_30      equ $30     ; 8080: RST 6
RST_38      equ $38     ; 8080: RST 7

RST_TRAP    equ $24     ; 8085: NMI
RST_2C      equ $2C     ; 8085: RST5.5
RST_34      equ $34     ; 8085: RST6.5
RST_3C      equ $3C     ; 8085: RST7.5

;--------------------------------------------------------------------------
;   LB(), MB(): Low and middle bytes of an assembler value
;   These are the same on every architecture (so yes, code duplication).

LB          function addr,(addr & $FF)
MB          function addr,((addr & $FF00) >> 8)

;--------------------------------------------------------------------------
;   Some instructions used with self-modifying code are used so frequently
;   that it's worth having a common definition for them.

I_JP        equ  $C3        ; 8080 JMP instruction
I_RET       equ  $C9        ; 8080 RET instruction
