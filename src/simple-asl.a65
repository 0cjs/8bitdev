;   Simple 6502 routines to test with Macro Assembler AS

            cpu 6502
            include "src/std.a65"

ident       byt "simple-asl.a65"    ; we use this to check that we've loaded
                                    ; the correct binary data and symbol table.

;       Temporary symbol demonstrations
tempsyms    nop     ; tempsyms
.foo        nop     ; tempsyms.foo
$$named     nop     ; named5
.foo        nop     ; named5.foo
-           nop     ; __back0
/           nop     ; __forw0
+           nop     ; __forw1
.foo        nop     ; __forw1.foo
            rts
tempsyms_end

;       Section demonstrations
foo         nop                 ; global    foo
    section sec1                ; level 1   :sec1:
foo         nop                 ;           :sec1:foo
bar         nop                 ;           :sec1:bar
      section sec2              ; level 2   :sec1:sec2:
foo         nop                 ;           :sec1:sec2:foo
            public bar          ;           bar         (not bar[2], bar[sec2])
bar         nop
            public baz:parent   ;           :sec1:baz   (not baz[sec2])
baz         nop
        section sec2            ; level 3   :sec1:sec2:sec2:
foo         nop                 ;           :sec1:sec2:sec2:foo
        endsection sec2
      endsection sec2
quux        nop                 ;           :sec1:quux
    endsection sec1
    section sec2                ; level 1   :sec2
foo         nop                 ;           :sec2:foo
    endsection sec2

;--------------------------------------------------------------------------
;   std.a65 test code

;   DS/DB/DW
defalloctest
dstest0     ds  3
dstest1     ds  1
dbtest      db  $00,"abc",[2]$FF
dwtest      dw  $ABCD

;   ZDS
zdstest0    db  $F0     ; byte at current location
zdstest1    zds 3       ; zero page allocation
zdstest2    zds 2       ; zero page allocation
zdstest3    db  $F3     ; byte at current location +1

;   INCW
incwtest    clv
            bvs .incwtemp   ; show that composed temps can cross macro
.nocarry    incw incwdata   ; show no collision w/macro-internal .nocarry
.incwtemp
            rts
incwdata    zds 2

;--------------------------------------------------------------------------
;   Add X and Y, storing the result in xybuf and returning it in A
addxy       txa
            sty xybuf
            clc
            adc xybuf
            sta xybuf
            rts
xybuf       ds  1

;--------------------------------------------------------------------------
;           Clear an area. fillptr‚ÇÅ=startaddr-1, Y=length.
fill        lda #0
/           sta (fillbase),y
            dey
            bne -
            rts
fillbase    zds 2
