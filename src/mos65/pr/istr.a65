;   pristr: print inline string

;   Index base address to get the addr that JSR pushed on the stack.
;   TSX and then load this indexed with X to load the LSB.
;   (Use irtsaddr+1 for the MSB.)
;   Remember! The pushed address is ONE LESS than the address to which
;   we will return.
;
irtsaddr    EQU $101

;---------------------------------------------------------------------
;   External Configuration: the following must be defined by the client
;
;   prchar: print the character in A.
;
;   pristrP: a zero page word for the address for indirect access to
;   data in calling code. We do not care what this is used for between
;   calls to pristr.

;   Abort assembly with a clear message if an essential definition is missing.
    set ______,
    pushv , prchar, pristrP
    popv  , ______, ______

;---------------------------------------------------------------------
;   â™£AY pristr: print inline string
;
;   Using `prchar`, print the $00-terminated string from memory immediately
;   after the call to this subroutine. (This requires a JSR.) There is no
;   limit on the size of the string.
;
;   This requires one word of zero-page storage, pristrP, for only the
;   duration of each call to this routine. It may destroy additional
;   registers from the `prchar` call.
;
;   This is adapted from the versions by Ross Archer and Mike Barry
;   from http://6502.org/source/io/primm.htm

pristr      pla                 ; LSB of return addr/string start -1
            sta  pristrP
            pla                 ; MSB of return addr/string start -1
            sta  pristrP+1
            ldy  #0
.nextchar   inc  pristrP        ; move up to first/next char
            bne  +
            inc  pristrP+1
+           lda  (pristrP),y    ; load char
            beq  .done          ; done on zero terminator
            jsr  prchar
            clc                 ; (relative jump makes
            bcc  .nextchar      ;   this routine position-independent)
.done       lda  pristrP+1
            pha
            lda  pristrP
            pha
            rts
