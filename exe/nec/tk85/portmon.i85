;   portmon: Monitor current values read from an I/O space address

        cpu 8085
        include  src/i8080/std.i80
TK85    equ  1
        include  src/tk80/biosdef.i80

;   Pointer to a routine that that will read a byte based on an argument
;   in A, and return the value read in A. Typically this will be a routine
;   that reads a the I/O port given in A, but it can be anything you like.
readbyte    equ  $8300
;   The current argument to `readbyte`.
port        equ  $8302

            org  $1000
init        ld   a,$5E          ; XXX change this to $00 after testing
            ld   (port),a
            ld   hl,read_Aplus1
            ld   (readbyte),hl
            nop
            nop
            nop
            nop
            nop

init1       ;   Clear display.
            ld   a,0
            ld   hl,segments
            ld   c,8
-           ld   (hl),a
            inc  hl
            dec  c
            jp   NZ,-
            ;   Show '⊢' indicating value.
            ld   a,$70
            ld   (segments+4),a

read        ld   hl,.dispval    ; return addr
            push hl             ;   for simulated call
            ld   a,(port)
            ld   e,3            ; print port in left side of display
            call prbyte
            ld   a,(port)       ; read port value
            ld   hl,(readbyte)
            jp   (hl)
.dispval    ld   e,7            ; rightmost LED display
            call prbyte
            ;
            jp   read

;   ♠AE ♣ABCDHL   Print A as two digits at the LED position given in E
;   (lower nybble) and the LED position to its left (upper nybble).
prbyte      call prnyb          ; print lower nybble
            rrca                ; shift upper nybble to lower
            rrca
            rrca
            rrca
            ; FALLTHROUGH       ; RET (TCO) and print it

;   ♠AE ♣BCDHL   Print the digit in the lower nybble of A at the LED
;   position given by E (0-7). A is preserved, and E will be decremented on
;   return to have the next call print a more significant digit.
prnyb       push af             ; preserve value
            ld   hl,charsegs    ; glyph table base address
            ld   b,$00          ; index MSB
            and  a,$0F          ; mask lower nybble
            ld   c,a            ; index LSB
            add  hl,bc          ; index into glyph table
            ld   a,(hl)         ; load glyph
            ld   hl,segments    ; leftmost LED position
            ld   d,$00          ; LED position MSB
            add  hl,de          ; move up to requested segment
            ld   (hl),a         ; display glyph
            dec  e              ; previous LED position
            pop  af             ; restore input value
            ret

;   ♠A  Return A+1. Used for testing the main routine.
read_Aplus1 inc  a
            ret
