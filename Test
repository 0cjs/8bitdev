#!/usr/bin/env bash
set -Eeuo pipefail

trap 'ec=$?; echo 1>&2 "INTERNAL ERROR: ec=$ec line=$LINENO cmd=$BASH_COMMAND";
      exit $ec;' ERR

die()  { ec="$1"; shift; echo 1>&2 "ERROR ($ec):" "$@"; exit $ec; }
fail() { ec=$?; echo "FAILED exitcode=$ec ($(elapsed)s)"; exit $ec; }

elapsed_start=$(date +%s)
elapsed() { echo $(( $(date +%s) - $elapsed_start )); }

####################################################################
#   Build functions

build_toolsets() {
    #   Toolchains, utilities, emulators.
    t8dev toolset asl
    [[ -f $all_tools ]] && t8dev toolset asxxxx
    t8dev toolset osimg ctools dos33fs
    t8dev toolset bm2 cscp linapple RunCPM VirtualT
}

#   ASxxxx builds
build_asxxxx() {
    #   Due to issues with 32-bit binaries, run only when $all_tools set.
    [[ -f $all_tools ]] || return 0

    local sources=$(echo src/asxxxx/*.a*)
    [[ -f $fast_hack ]] && {
        #   Because they do no dependency checks, the builds below rebuild
        #   everything whether needed or not. To speed things in fast_hack
        #   mode we do a basic depenendency check "by hand" (which is
        #   probably not all that reliable) and let the full rebuild go
        #   ahead only if we notice something needs to be rebuilt.
        local need_rebuild= src obj
        for src in $sources; do
            obj=.build/obj/src/asxxxx/$(basename ${src%.*}).bin
            [[ $src -nt $obj ]] && need_rebuild=1
        done
        [[ -z $need_rebuild ]] && return
    }

    #   Though we don't need to explicitly specify `simple` as an input
    #   file for the link (aslink would get it from the output file) we
    #   do so anyway to test that t8dev handles it correctly.
    t8dev asx asm  src/asxxxx/simple.a65
    t8dev asx link src/asxxxx/simple simple
    t8dev asx asm  src/asxxxx/reloctest.a65
    t8dev asx link src/asxxxx/reloctest -b '_code=0x400'
    t8dev asx asm  src/asxxxx/zptest.a65
    t8dev asx link src/asxxxx/zptest -b '_code=0x0300'
}

####################################################################
#   t8dev and project setup

export T8_PROJDIR=$(cd "$(dirname "$0")" && pwd -P)
t8dir=t8dev
[[ -r $T8_PROJDIR/$t8dir/t8setup.bash ]] \
    || git submodule update --init "$T8_PROJDIR/$t8dir"

#   Build even the tools we don't use much, slowing things down
#   (and requiring extra pre-install work on some systems).
all_tools="$T8_PROJDIR/.all-tools"

#   Creating this file is useful to slightly speed the edit/build/test
#   cycle when working on "regular" ASL code; the toolsets and asxxx builds
#   are the majority of the wall clock time when running only a few tests.
#   This file is never ignored or committed so `git status` will make it
#   clear you're not building everything that might be changed.
#   XXX This can go when we move more stuff into a single t8dev invocation.
fast_hack="$T8_PROJDIR/.fast-hack"

#   Extra things to clean with -C and -c.
T8_CLEAN_C="$fast_hack"
#T8_CLEAN_c=""

. "$T8_PROJDIR"/$t8dir/t8setup.bash

####################################################################
#   Project-specific setup

t8bin="$T8_PROJDIR/$t8dir/bin"
t8dev="$t8bin/t8dev"

post_emulate=
#   Extra argument processing for this project. These must be after the
#   project-setup.bash arguments, but before anything to be passed on to
#   pytest/test scripts/etc.
#   • -A: build and use all tools
while [[ ${#@} -gt 0 ]]; do case "$1" in
    --)     shift; break;;                  # remainder are pytest args
    -A)     shift; touch "$all_tools";;
    -E)     shift; post_emulate="$1"; shift;;
    *)      break;;                         # guessing remainder are for pytest
esac; done

####################################################################
#   Project-specific setup

[[ -f $fast_hack ]] || build_toolsets

#   Builds of asxxxx sources are a completely separate thing right now
#   so that we can more easily skip the (re-)builds if $fast_hack is set.
build_asxxxx

####################################################################
#   Builds and tests

#   Because we use relative paths in the lists of things to build/exclude
#   below, we must be using the proper CWD to which the paths are relative.
command cd -P "$T8_PROJDIR"

t8dev asl t8dev
t8dev asl auto exe/ src/ --exclude=src/asxxxx/
manual_build=(
    #   Top-level programs whose build is not triggered by automated tests.
    src/asl/nomacro.a65         # Test/demo for ASL macro expansion
    exe/a1/charset.a65
    src/a2/misc.a65
    exe/cbm/ted-keymatrix.a65
    exe/cpm/*.i80
    src/fm7.a69
    exe/jr200/hello.a68 exe/jr200/pmon.a68 exe/jr200/samples.a68
    exe/mb6885/hello.a68 exe/mb6885/pmon.a68
        exe/mb6885/kbscan.a68 exe/mb6885/writenum.a68
    exe/tmc/i8080/hello.i80 exe/tmc/i8080/tmon.i80
    exe/tmc/mc6800/hello.a68 exe/tmc/mc6800/pmon.a68
    exe/nec/pc8001/hellorom.i80
)
t8dev asl asm "${manual_build[@]}"

#   This builds an Apple II disk image from an AS source file. Probably
#   this should be in smaller steps so we can extend the idea to building
#   output for other microcomputers where we may want, e.g., a raw file
#   for an emulator, a tape image with that file, and a disk image with
#   that file that autoboots, all from the same build.
t8dev a2dsk exe/a2/charset.a65

#   Various other builds of things from .p files.
#   Not yet figured out how this should be integrated into t8dev.

exeobj="$BUILDDIR/obj/exe"
for i in "$exeobj"/cpm/*.p; do
    #   This assumes that your assembly output starts at $0100.
    p2bin -q "$i" "$(dirname "$i")/$(basename "$i" .p).com"
done
cmtconv -p jr200 -i obj \
    -f HELLO "$exeobj/jr200/hello.p" "$exeobj/jr200/hello.wav"
cmtconv -p mb6885 -i obj \
    -f HELLO.B "$exeobj/mb6885/hello.p" "$exeobj/mb6885/hello.wav"

p2bin -q "$exeobj/nec/pc8001/hellorom.p" "$exeobj/nec/pc8001/hellorom.bin"

#   Change back to original CWD so we can use relative paths to that as
#   command line parameters to this Test script. (This makes command-line
#   completion easier.)
command cd - >/dev/null

#   Unit Tests
#   • If we are given no options, add `-nlogical` to run things more
#     efficiently with pytest-xdist. (Using logical cores rather than
#     physical cores is actually just marginally slower on old 2-core/
#     4-thread machines, but it's not worth trying to encode this special
#     case when most modern machines are faster using all logical cores.)
#   • With args, the developer should specify an appropriate `-n` option
#     based on the number of tests he's running.
#   • Really, we should be checking for a `-n` argument here, and only
#     supplying our own if it's not supplied.
#
[ $# -eq 0 ] && set -- -nlogical
t8dev pytest --dist worksteal "$@" || fail

####################################################################

#   XXX We no longer run the cmtconv functional tests from here because
#   there are path issues when we use tool/t8dev instead of t8dev.
#   And we really want to be running the r8format ones anyway, and
#   need to figure out how exactly to do that without re-running
#   all the unit tests. (Or maybe we should just be running the
#   submodule tests using their own completely separate top-level
#   ./Test script, in our virtual env or theirs?)
if false; then

#   Functional tests are run only if we ran all unit tests. (This is not
#   the best way to avoid running them when unwanted, but it's a convenient
#   hack for the moment.)
[[ ${#@} = 0 ]] && {
    #   We run them in quiet mode here, but if they fail you want
    #   to do this manually without the -q.
    ./t8dev/pylib/cmtconv/Test -q \
        || die $? "FAILED: cmtconv/Test (exitcode=$?)"
} || true

fi

####################################################################
#   Collect up files that we sometimes release

(   command cd "$T8_PROJDIR"
    reldir=.build/release
    rm    -rf $reldir/tmon/
    mkdir -p  $reldir/tmon/
    cp src/tmon/README.md src/tmon/TODO.md $reldir/tmon/
    cp .build/obj/exe/cpm/tmonlo.com $reldir/tmon/TMONLO.COM
)


####################################################################
#   Post-test emulator run

post_emulate_run() {
    #   This expects that $post_emulate will be set to the path of
    #   a file under .build/ (relative path) to run in an emulator,
    #   or empty to indicate there's nothing to run.
    #   • The API can surely be expanded to allow other ways of saying
    #     what you want to run, but what sort of forms of this are
    #     convenient needs to be worked out. But in particular we need
    #     to work out how to specify an emulator when there are multiple
    #     choices for a particular program, e.g., RunCPM vs. C128 CP/M.
    #   • This function should probably eventually move to t8setup.bash,
    #     to be defined there for use by clients.
    [[ -n $post_emulate ]] || return 0

    #   Currently accept just paths.
    [[ -r $post_emulate ]] || die 2 "Cannot read: $post_emulate"
    sub_path=${post_emulate#*/exe/}
    emu_suite=${sub_path%%/*}
    echo "suite=$emu_suite sub_path=$sub_path"
    case "$emu_suite" in
        tmc)
            emulator=${sub_path#*/}
            emulator=${emulator%%/*}
            tmc "$emulator" "$post_emulate" || fail
            ;;
        cpm)
            #   We should support multiple CP/M emulators here, but for the
            #   moment we are hardcoded to RunCPM. Also, there's currently
            #   no way to specify additional files to be added to the
            #   "disk" containing the .COM file, or specify that the
            #   first entry should not be auto-run.
            t8dev emulator runcpm -a "$post_emulate"
            ;;
        nec)
            #   Currently assumes that the path given is for the extension ROM.
            #   Note that the emulator is running under WINE which makes focus
            #   odd: you need to pass the pointer through the menu bar.
            emulator=${sub_path#*/}
            emulator=${emulator%%/*}
            #   XXX This works only for PC-8001. We'll have to work out how
            #   to use different ROM patchspecs for other machines.
            t8dev emu cscp "$emulator" N80.ROM=@6000:$post_emulate
            ;;
        *)
            die 2 "Unknown emulator suite: $emu_suite"
            ;;
    esac
}

post_emulate_run

####################################################################

echo "OK ($(elapsed)s)"
