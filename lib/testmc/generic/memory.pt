from    testmc.generic.memory  import MemoryAccess
import  pytest

class RAM(MemoryAccess):
    def __init__(self, store):
        self.tmem = store
    is_little_endian = False
    def get_memory_seq(self):
        return self.tmem

@pytest.fixture(params=[
    lambda: bytearray(65536),
    lambda: [0]*65536,              # different type
    lambda: bytearray(16),          # different sizes
    lambda: bytearray(256*1024),
])
def m(request):
    return RAM(request.param())

@pytest.mark.parametrize('n', range(0, 3))   # 3 runs for each fixture.
def test_fixture_returns_fresh_memory_every_time(m, n):
    mem = m.get_memory_seq()
    #   Different types cause pytest to take a _long_ time to generate
    #   the comparison, so always convert the backing store to `bytes`.
    assert bytes(len(mem)) == bytes(mem)
    mem[3] = 0xFF

####################################################################
#   Tests for multiple backing stores and memory sizes (all big-endian).

def test_memory_direct_access(m):
    ''' We ascertain here that direct access to the memory provided by
        the hosting class works.
    '''
    #   Here always call get_memory_seq() every time to ascertain it's
    #   working. This is actually testing our RAM class, but we should
    #   perhaps find a way to do these sorts of checks on the actual
    #   hosting classes.
    assert 0x00 == m.get_memory_seq()[0]
    m.get_memory_seq()[0] = 0xFF
    assert 0xFF == m.get_memory_seq()[0]

    mem = m.get_memory_seq()
    with pytest.raises(IndexError): mem[len(mem)] = 0

def test_examine(m):
    v = m.byte(0x0005)
    assert (0, int) == (v, type(v))

    v = m.bytes(0x0004, 4)
    assert (b'\0\0\0\0', bytes) == (v, type(v))

    m.get_memory_seq()[5] = 0xCA
    assert 0xCA             == m.byte(0x0005)
    assert b'\0\xCA\0\0'    == m.bytes(0x0004, 4)

    m.get_memory_seq()[6] = 0xFE
    assert b'\0\xCA\xFE\0'  == m.bytes(0x0004, 4)
    assert 0xCAFE           == m.word(0x0005)

    assert (0xCA, 0xFE00)   == m.words(0x0004, 2)

    memlen = len(m.get_memory_seq())

    assert 0 == m.byte(memlen-1)
    with pytest.raises(IndexError) as ex:
        m.byte(memlen)
    assert ex.match(r'^memory @\${:04X}: bad location$'.format(memlen))

    with pytest.raises(IndexError) as ex:
        m.bytes(memlen-1, 3)
    assert ex.match(r'^memory @\${:04X}: bad location$'.format(memlen+1))

    with pytest.raises(IndexError): m.word(memlen-1)
    with pytest.raises(IndexError): m.words(memlen-3, 2)

def test_deposit(m):
    addr = 0x800
    if len(m.get_memory_seq()) < 0x810: addr = 0    # for small memories

    assert b'\x01'              == m.deposit(addr, 1)
    assert b'\x02\x03\x04'      == m.deposit(addr+2, 2, 3, 4)
    assert b'\x05\x06\x07\x08'  == m.deposit(addr+6, [5, 6], 7, b'\x08')
    assert b'\x01\x00\x02\x03\x04\x00\x05\x06\x07\x08\x00' == m.bytes(addr, 11)

def test_deposit_value(m):
    m.deposit(0, 0x0)
    m.deposit(0, 0xFF)

    with pytest.raises(ValueError) as ex:
        m.deposit(3, -1)
    assert ex.match(r'^memory @\$0003: invalid byte value \$-1$')

    with pytest.raises(ValueError) as ex:
        m.deposit(0xF00F, 256)
    assert ex.match(r'^memory @\$F00F: invalid byte value \$100$')

def test_deposit_index(m):
    with pytest.raises(IndexError) as ex:
        m.deposit(-1, 0)
    assert ex.match(r'^memory @\$-001: bad location$')

    memlen = len(m.get_memory_seq())
    with pytest.raises(IndexError) as ex:
        m.deposit(memlen-1, (0, 0))
    assert ex.match(r'^memory @\${:04X}: bad location$'.format(memlen))

def test_depword(m):
    b = m.depword(0x0001, [0xFFFF, 0x8384], 0x8586)
    expected = b'\xFF\xFF\x83\x84\x85\x86' 
    assert expected == b
    assert bytes is type(b)
    assert b'\x00' + expected + b'\x00' == m.bytes(0x0000, len(expected)+2)

    assert bytes(8) == m.bytes(0x0008, 8)
    with pytest.raises(ValueError) as ex:
        m.depword(0x0008, 2, [1, -1], 0)
    assert ex.match(r'^memory @\$0008: invalid word value \$-1$')
    assert bytes(8) == m.bytes(0x0008, 8)   # did not change memory

    with pytest.raises(ValueError): m.depword(0x000B, 0, 0x10000)

def test_depword_value(m):
    m.depword(0, 0x0)
    m.depword(0, 0xFFFF)

    with pytest.raises(ValueError) as ex:
        m.depword(0xF, -1)
    assert ex.match(r'^memory @\$000F: invalid word value \$-1$')

    with pytest.raises(ValueError) as ex:
        m.depword(0x1234, 65536)
    assert ex.match(r'^memory @\$1234: invalid word value \$10000$')

def test_depword_index(m):
    memlen = len(m.get_memory_seq())

    m.depword(memlen-2, 0)
    with pytest.raises(IndexError) as ex:
        print('{:04X} {:04X}'.format(memlen, memlen-1))
        m.depword(memlen-1, 0)
    assert ex.match(r'^memory @\${:04X}: bad location$'.format(memlen))

    m.depword(memlen-4, 0, 0)
    with pytest.raises(IndexError) as ex:
        m.depword(memlen-3, 0, 0)
    assert ex.match(r'^memory @\${:04X}: bad location$'.format(memlen))

####################################################################
#   Tests for little-endian access.

class LERAM(MemoryAccess):
    def __init__(self):
        self.lmem = bytearray(64)
    is_little_endian = True
    def get_memory_seq(self):
        return self.lmem

@pytest.fixture
def lem():
    return LERAM()

def test_examine_little_endian(lem):
    lem.get_memory_seq()[3:7] = b'\x12\x34\x56\x78'

    assert b'\0\x12\x34\x56\x78\0'  == lem.bytes(0x0002, 6)
    assert 0x3412                   == lem.word(0x0003)
    assert (0x3412, 0x7856)         == lem.words(0x0003, 2)

def test_deposit_little_endian(lem):
    b = lem.depword(0x0005, [0xFFFF, 0x8384], 0x8586)
    assert b'\xFF\xFF\x84\x83\x86\x85' == b
    assert bytes is type(b)

    with pytest.raises(ValueError) as ex:
        lem.depword(0x0006, 2, [1, -1, 0], 0)
    assert ex.match('^memory @\\$0006: invalid word value \\$-1$')
    with pytest.raises(ValueError): lem.depword(0x0014, 0, 0x10000)

####################################################################
#   Utility and debug routines

def test_hexdump():
    m = RAM(bytearray(0x400))
    m.deposit(0x320, b'\xFF\x01\x23\xAB\xCD\xEF')
    assert b'\x01\x23\xAB\xCD' ==   m.bytes(0x321, 4)
    assert '0321: 01 23 AB CD' == m.hexdump(0x321, 4)
