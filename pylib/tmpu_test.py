from tmpu import TMPU           # public
from tmpu import ParseBin       # internal

def test_testmpu():
    tmpu = TMPU()
    assert [0]*0x10000 == tmpu.mpu.memory

def test_deposit():
    tmpu = TMPU()
    tmpu.deposit(6, [9, 2, 3, 8])
    assert [0]*6 + [9, 2, 3, 8] + [0]*(0x10000 - 6 - 4) == tmpu.mpu.memory

def test_strAt():
    tmpu = TMPU()
    tmpu.deposit(0x100, [0x40, 0x41, 0x42, 0x63, 0x64])
    assert '@ABcd' == tmpu.strAt(0x100, 5)
    #   Test chars with high bit set here,
    #   once we figure out how to handle them.

#   Records in "Tandy CoCo Disk BASIC binary" (.bin) format as
#   generated by the ASxxxx assembler's `aslink` program.
BINDATA = bytes.fromhex(''
    # typ  len addr data
    + '00 0001 0123 ee'
    + '00 0009 0400 8a 8c09 0418 6d09 0460'
    + 'ff 0000 0403'    # final record has entry point
    )

def test_parse_bin():
    p = ParseBin(BINDATA)
    rec0data = [0xee]
    rec1data = [0x8a, 0x8c, 0x09, 0x04, 0x18, 0x6d, 0x09, 0x04, 0x60]
    assert (0x0123, rec0data) == p[0]
    assert (0x0400, rec1data) == p[1]
    #   Entries only for data records, not the entrypoint record
    assert 2 == len(p)
    assert 0x0403 == p.entrypoint

def test_load_bin():
    expected_mem \
        = [0] * 0x123 \
        + [0xEE] \
        + [0] * (0x400 - 0x124) \
        + [0x8a, 0x8c, 0x09, 0x04, 0x18, 0x6d, 0x09, 0x04, 0x60] \
        + [0] * (0x10000 - 0x400 - 9)
    tmpu = TMPU()
    tmpu.load_bin(BINDATA)
    tmpu.assertregs(pc=0x0403)
    assert expected_mem == tmpu.mpu.memory

def test_regs():
    tmpu = TMPU()
    tmpu.assertregs(0, 0, 0, 0, 0xff)

    tmpu.setregs(y=4, a=2)
    tmpu.assertregs(y=4, a=2)
    tmpu.assertregs(0000, 2, 0, 4, 0xff)

    tmpu.setregs(1, 3, 5, 7, 0x80)
    tmpu.assertregs(1, 3, 5, 7, 0x80)

    #   We should never compare P status register bits 5 and 4.
    #   Some of these values for P are probably invalid in this
    #   emulator, but we never run in these states.
    tmpu.assertregs(p=0b00110000); tmpu.assertregs(p=0)
    tmpu.mpu.p = 0
    tmpu.assertregs(p=0b00110000); tmpu.assertregs(p=0)
    tmpu.mpu.p = 0xff
    tmpu.assertregs(p=0b11001111); tmpu.assertregs(p=0xff)
