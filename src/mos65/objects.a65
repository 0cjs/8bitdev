;   Some "objects" as described in objects.md


;   ♣A ♡XY  Dispatch based on type of object at location.
;
;   If `obj` is a pointer or instrinsic constant this does nothing and
;   returns with carry clear. Otherwise it returns with carry set and the
;   value deconstructed as shown below.
;
;   Least significant 2 bits of LSB (first byte) are tag determining type:
;     %00   pointer or intrinsic constant
;     %01   smallint: store value in `smallint`
;     %10   unused: store MSB in `unused`
;     %11   obdata: store format ID in `obfmtid` and length in `oblen`
;
;   The 6502 has no arithmetic shift right (ASR) instruction, so we have to
;   synthesise it with CMP #80 (which loads the high bit of the accumulator
;   into the carry flag) followed by ROR.
;
typedisp
            lda obj         ; format ID byte or LSB of tagged pointer
            cmp #$80        ; ASR setup: bit 7 → carry
            ror             ; ASR; bit 0 → carry
            bcs .tag_x1
.tag_x0     ror             ; original bit 1 → carry
            bcs .tag_10
.tag_00     ;   pointer or intrinsic constant
            rts             ; return with carry clear

.tag_x1     cmp #$80        ; ASR setup again as might be %01 smallint
            ror             ; ASR: original bit 1 → carry
            bcs .tag_11
.tag_01     ;   smallint: at this point the LSB's been ASR'd twice,
            ;   which gives us the smallint MSB. Store the smallint
            ;   converted to native 16-bit format and endianness.
            sta smallint+1
            lda obj+1
            sta smallint
            rts
.tag_10     ;   unused
            lda obj+1
            sta unused
            rts
.tag_11     ;   obdata
            lda obj         ; what we loaded has been destroyed, so reload
            sta obfmtid
            lda obj+1       ; obdata header length byte
            sta oblen
            rts


;   object on which to do type dispatch
obj         ds      2       ; input object reference. not in ZP because
                            ;   we'd often be reading this from the heap
;   typedisp output values
obfmtid     zds     1       ; obdata format ID
oblen       zds     1       ; obdata length
unused      zds     1       ; MSB of unused/invalid
smallint    zds     2       ; smallint value
