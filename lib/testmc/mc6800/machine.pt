from    testmc.mc6800  import Machine, Instructions as I
import  pytest

@pytest.fixture
def m():
    return Machine()

@pytest.fixture
def R(m):
    return m.Registers

####################################################################
#   Registers

def test_mem(m, R):
    assert 65536 == len(m.mem)
    assert 0 == m.mem[0]
    assert 0 == m.mem[65535]

def test_regs(m, R):
    r0 = R(pc=0, a=0, b=0, x=0, sp=0, H=0, I=0, N=0, Z=0, V=0, C=0)
    assert r0 == m.regs

    m.setregs(R(b=0xF0, x=0xF000, sp=0x8000))
    assert (0, 0xF0, 0xF000, 0x8000) == (m.pc, m.b, m.x, m.sp)

    with pytest.raises(ValueError):  m.setregs(R(pc=0x10000))
    with pytest.raises(ValueError):  m.setregs(R(a=0x100))

def test_flags(m, R):
    assert R(H=0, I=0, N=0, Z=0, V=0, C=0) == m.regs

    m.setregs(R(I=1, V=1))
    assert R(H=0, I=1, N=0, Z=0, V=1, C=0) == m.regs

####################################################################
#   Instruction Execution

def test_step_LDAA(m):
    ''' This is testing both `step()` and the implementation of the `LDAA`
        opcode. Possibly this should be split up somehow.
    '''

    start = 0x200
    m.deposit(start, [I.LDAA, 0xEA, I.LDAA, 0x00])

    mem = m.mem.copy();
    m.a = 0x00; m.N = False; m.Z = True; m.V = True;
    m.pc = start; m.step(1)
    #   XXX We should have a `Regs` structure like testmc.6502 for
    #   comparing registers and flags against values and don't-care.
    assert 0xEA == m.a
    assert (True, False, False) == (m.N, m.Z, m.V)
    assert start + 2 == m.pc
    assert mem == m.mem

    m.pc = start; m.step(2)
    assert 0x00 == m.a
    assert (False, True, False) == (m.N, m.Z, m.V)
    assert start + 4 == m.pc
