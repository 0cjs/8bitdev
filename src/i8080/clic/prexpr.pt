from    testmc.i8080  import  Machine
from    src.clic.objref  import *
from    random  import randrange
import  pytest

test_rig = '''
            cpu  8080
            include src/i8080/std.i80
            include testmc/i8080/tmc/biosdef.i80

            org  $400
            include src/i8080/clic/prexpr.i80
            include src/i8080/pr/hex.i80
            include src/i8080/pr/dec.i80
            include src/i8080/pr/str.i80
'''

####################################################################

param   = pytest.mark.parametrize

@param('sym, s', [
    (NIL,               b'nil'),
    (T,                 b'#t'),
    (const(0xFC),       b'c#FC'),
    (ptr(0x43BC),       b'#43BC'),
    (ptr(0x0100),       b'#0100'),
    (ptr(0xFFFC),       b'#FFFC'),
    (sym12('a'),        b'a'),
    (sym12('\x00'),     b'\x00'),
    (sym12(b'\xFF'),    b'\xFF'),
    (sym12('ab'),       b'ab'),
    (smallint(0),       b'0'),
    (smallint(1),       b'1'),
    (smallint(23),      b'23'),
    (smallint(456),     b'456'),
    (smallint(7890),    b'7890'),
    (smallint(8191),    b'8191'),
    (smallint(-1),      b'-1'),
    (smallint(-23),     b'-23'),
    (smallint(-456),    b'-456'),
    (smallint(-7890),   b'-7890'),
    (smallint(-8192),   b'-8192'),
])
def test_prcell_other(m, S, R, loadbios, sym, s):
    addr = randrange(0x4000, 0xFFFF)    # even unaligned addrs, because why not.
    print(f'sym ${sym:04X} @ ${addr:04X}')
    m.depword(addr, sym)
    _, out = loadbios()
    m.call(S.prcell, R(hl=addr))
    assert R(hl=addr) == m.regs      # preserve HL
    assert s == out.written()
