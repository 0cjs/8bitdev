from    testmc.m6502  import Machine, Instructions as I
from    testmc.memimage  import  MemImage
from    testmc  import LB, MB
import  pytest

@pytest.fixture
def m():
    return Machine()

R = Machine.Registers

####################################################################

def test_super_init(m):
    assert 0 == len(m.symtab)

def test_Machine_memory_zeroed(m):
    assert [0]*0x10000 == m.mpu.memory

def test_Machine_setregs(m):
    m.setregs(R(y=4, a=2))
    assert  R(y=4, a=2) == m.regs

    m.mpu.p = 0b01010101
    m.setregs(R(pc=0x1234, a=0x56, x=0x78, y=0x9a, sp=0xbc))
    r     = R(pc=0x1234, a=0x56, x=0x78, y=0x9a, sp=0xbc, p=0b01010101)
    assert r == m.regs

def test_Machine_setregs_flags(m):
    initflags = 0b00110000  # Emulator has unused/how stacked flags set to 1.
    assert       initflags  == m.mpu.p     # emulator internal status register
    assert R(p=initflags) == m.regs      # make sure we read the same

    m.setregs(R(N=1, V=0, D=1, I=0, Z=1, C=0))
    assert R(N=1, V=0, D=1, I=0, Z=1, C=0) == m.regs

    m.setregs(R(C=1))
    assert R(N=1, V=0, D=1, I=0, Z=1, C=1) == m.regs

    m.setregs(R(D=0))
    assert R(N=1, V=0, D=0, I=0, Z=1, C=1) == m.regs

    m.setregs(R(p=0b11111111))
    assert R(N=1, V=1, D=1, I=1, Z=1, C=1) == m.regs

    m.setregs(R(p=0))
    assert R(N=0, V=0, D=0, I=0, Z=0, C=0) == m.regs

    with pytest.raises(ValueError) as ex:
        m.setregs(R(C=2))
    assert ex.match(r"^Status bit 'C' value 2 not in set")

def test_Machine_examine_stack(m):
    #   Confirm the emulator's internal format is the bottom 8 bits of the SP.
    assert 0xff == m.mpu.sp

    m.mpu.memory[0x180:0x190] = range(0xE0, 0xF0)

    m.setregs(R(sp=0x87))
    assert   0xE8 == m.spbyte()
    assert 0xE9E8 == m.spword()
    assert   0xEB == m.spbyte(3)
    assert 0xECEB == m.spword(3)

    m.setregs(R(sp=0x7F))
    assert   0xE0 == m.spbyte()
    assert 0xE1E0 == m.spword()

    m.setregs(R(sp=0xFE))
    assert 0 == m.spbyte()
    with pytest.raises(IndexError) as e:
        m.spword()
    assert e.match('stack underflow: addr=01FF size=2')

    with pytest.raises(IndexError): m.spbyte(1)
    with pytest.raises(IndexError): m.spword(1)
    with pytest.raises(IndexError): m.spbyte(0xFFFF)
    with pytest.raises(IndexError): m.spword(0xFFFF)

####################################################################
#   Machine execution

##############################
#   step

def test_Machine_step(m):
    ''' Test a little program we've hand assembled here to show
        that we're using the MPU API correctly.
    '''
    #   See py65/monitor.py for examples of how to set up and use the MPU.
    m.deposit(7, [0x7E])
    m.deposit(0x400, [
        I.LDA,  0xEE,
        I.LDXz, 0x07,
        I.NOP,
    ])
    assert   0x07 == m.byte(0x403)
    assert 0xEEA9 == m.word(0x400)  # LSB, MSB

    assert R(pc=0, a=0, x=0, y=0) == m.regs
    m.setregs(R(pc=0x400))

    m.step(); assert R(pc=0x402, a=0xEE) == m.regs
    m.step(); assert R(pc=0x404, x=0x7E) == m.regs
    m.step(); assert R(pc=0x405, a=0xEE, x=0x7E, y=0x00) == m.regs

def test_Machine_stepto(m):
    m.deposit(0x300, [I.NOP, I.LDA, 2, I.NOP, I.RTS, I.BRK])

    m.setregs(R(pc=0x300))
    m.stepto(stopon=(I.NOP,))       # Always executes at least one instruction
    assert R(pc=0x303) == m.regs
    assert m.mpu.processorCycles == 4

    m.setregs(R(pc=0x300))
    m.stepto(stopon=(I.RTS,))
    assert R(pc=0x304) == m.regs

    m.setregs(R(pc=0x300))
    with pytest.raises(m.Timeout):
        #   0x02 is an illegal opcode that we should never encounter.
        #   We use about 1/10 the default timeout to speed up this test,
        #   but it's still >100 ms.
        m.stepto(stopon=(0x02,), maxsteps=10000)

def test_Machine_stepto_multi(m):
    m.deposit(0x700, [I.NOP, I.INX, I.NOP, I.INY, I.RTS, I.BRK])

    m.setregs(R(pc=0x700))
    m.stepto(stopon=[I.INY])
    assert R(pc=0x703) == m.regs

    m.setregs(R(pc=0x700))
    m.stepto(stopon=(I.INY, I.INX))
    assert R(pc=0x701) == m.regs

def test_machine_stepto_brk(m):
    m.deposit(0x710, [I.NOP, I.INX, I.BRK])
    m.setregs(R(pc=0x710))
    m.stepto(stopon=(I.BRK,))
    assert R(pc=0x712) == m.regs

##############################
#   pushretaddr/getretaddr

def test_getsp_pushretaddr_getretaddr(m):
    ''' Use RTS to confirm we correctly push and read a return address on
        the stack.
    '''
    m.setregs(R(pc=0x1234, sp=0x81))
    assert 0x81 == m._getsp()
    m.pushretaddr(0xABCD)
    assert (0x7F, R(sp=0x7F)) == (m._getsp(), m.regs)
    retaddr = m.getretaddr()

    m.deposit(0x1234, I.RTS)
    m.step()
    assert (0xABCD, R(pc=0xABCD)) == (retaddr, m.regs)

####################
#   call

@pytest.mark.parametrize('opcode, aborts', [
    (0x00, None),               # default abort opcode
    (0x30, 0x30),               # scalar abort argument
    (0xB0, [0x90, 0xB0, 0xD0]), # collection abort arguments
   #(I.RTS, I.RTS),             # XXX cannot currently abort on RTS
])
def test_call_abort(m, opcode, aborts):
    p = 0x401
    with pytest.raises(m.Abort) as ex:
        m.deposit(p, [opcode])
        m.call(p, aborts=aborts, trace=1)
    assert R(pc=p) == m.regs
    assert ex.match('Abort on opcode=\${:02X}: '.format(opcode))

def test_call_rts_registers(m):
    p = 0x402

    m.deposit(p, [I.RTS])
    m.call(p, R(pc=0x0000, a=0x55, C=1))
    assert R(pc=p, a=0x55, C=1) == m.regs, \
        'expected regs set but start overrides PC, RTS not executed'

    m.deposit(p, [I.NOP, I.NOP, I.RTS])
    m.call(p, R(pc=0xFFFF, a=0xAA, C=0))
    assert R(pc=p+2, a=0xAA, C=0) == m.regs, \
        'expected NOPs but not RTS executed'

def test_call_shallow(m):
    p = 0x403
    m.deposit(p, [I.JSR, LB(p+4), MB(p+4), I.RTS, I.LDA, 0x66, I.RTS])
    m.call(p, R(a=0xAA), trace=1)
    assert R(pc=p+3, a=0x66) == m.regs

def test_call_deep(m):
    p   = 0x404
    inx = p + 0x0C     # INX instruction
    iny = p + 0x0D     # INY instruction
    m.deposit(p, [                  # rel   after top-level call:
        I.JSR, LB(inx), MB(inx),    # 00:   x=1 y=1
        I.JSR, LB(p+6), MB(p+6),    # 03:       y=3
        I.JSR, LB(p+9), MB(p+9),    # 06:       y=4
        I.JMP, LB(iny), MB(iny),    # 09:       y=5
        I.INX,                      # 0C:
        I.INY,                      # 0D:
        I.RTS,                      # 0E:
        ])
    for i in (0, 3, 6, 9, 0x0C):    # hacky code dump
        print('{:04X}: {}'.format(p+i, m.bytes(p+i, 3).hex()))
    m.call(p, R(x=0, y=0), trace=1)
    assert R(pc=p+0x0E, x=1, y=5) == m.regs
