;   pr - routines for formatting and printing output

;   Required definitions:
;   • _a:       input variable (_b and _c will be added as necessary)
;   • _x:       output variable (_y and _z will be added as necessary)
;   • prchar    ♡ABX print character in A
;
;   Pretty much everything in this repo assumes that `prchar` preserves
;   A, B and X. If your particular BIOS print character routine does not,
;   it should be wrapped in a `prchar` that does.
;

SPACE       equ ' '
DEL         equ $7F

; ----------------------------------------------------------------------
;   ♠X ♣A ♡B  Print $00-terminated string at X
;
;   Leaves X pointing to the terminating $00 byte.
;
;   This is provided for systems where the BIOS does not already supply
;   an appropriate routine. (Since we don't know what a BIOS may destroy,
;   this actually makes no guarantees about the registers.)
;

    .ifndef prstr0               ; may be provided by BIOS
prstr0      lda A,0,X
            beq .done
            jsr prchar
            inx
            bra prstr0
.done       rts
    .endif ; !defined(prstr0)


; ----------------------------------------------------------------------
;   ♣A ♡BX Print value in A as hex to the character output port.
;   Falls through to prnyb.
prhex       psh A
            lsr A
            lsr A
            lsr A
            lsr A
            bsr prnyb
            pul A
            ; fallthrough

;   ♣A ♡BX Print lower nybble of A to the character output port.
prnyb       and A,#$0F
            add A,#'0'
            cmp A,#'9'+1
            bmi .digit
            add A,#'A'-'9'-1
.digit      jmp prchar          ; RTS (TCO)

;   ♣A ♡BX Print a space.
prspace     lda A,#SPACE
            jsr prchar
            rts

; ----------------------------------------------------------------------
;   ♣A ♡BX Print any (8-bit) value "visibly" as one character.
;
;   The output is always a character from the printable ASCII range. Bit 7
;   is ignored, characters in the control sticks ($00-$1F) are shifted
;   up into the upper-case ASCII sticks, and DEL is printed as `?` (i.e.,
;   shifted down in the reverse direction from the control chars).
;
;   XXX This should be printing control chars in reverse video.
;
;   This is a more informative alternative to printing just a `.` for any
;   non-printing char. It is slightly more subject to confusion in that it
;   can make non-ASCII look more like ASCII, but it's assumed that the
;   viewer will also have hex output easily available to help distinguish
;   the two.
;
prvischar   and A,#$7F          ; clear bit 7
            cmp A,#DEL
            beq .isctl
            cmp A,#' '
            bcc .notctl
.isctl      ;   Flipping bit 6 of a control character moves it up by $40
            ;   into the upper-case sticks, except for DEL where it's
            ;   moved down by 40 into the numeric/symbol stick.
            eor A,#(1<<6)
.notctl     jsr prchar
            rts

; ----------------------------------------------------------------------
;   ♣ABX,_a,_x  Print unsigned 16-bit int at (X) in decimal.
;
;   This uses the relatively simple and fast "multiple subtraction of
;   factors" method: count all the 10,000s you can subtract, print out
;   that digit, then the 1,000s, and so on. This iterates fewer loops
;   than doing actual division and also produces digits in the output
;   order while using minimal storage space.
;

prdec_u16

.n          equ _x          ; temporary storage
.printing   equ _a          ; bits 0..6: initial value of factor count (0)
                            ;     bit 7: 1 if we are printing all digits,
                            ;            0 if we are in non-printed leading 0s

            lda A,0,X       ; copy input MSB...
            sta A,.n
            lda A,1,X       ;   ...and LSB
            sta A,.n+1
            ldx #.ten_tab-2 ; position just before first (largest) factor
            clr A           ; start with high bit clear, meaning that
            sta A,.printing ;   we do not print 0 values

.nextfactor inx             ; next factor
            inx
            lda B,.printing ; count of this factor's quantity and printing flag
            lda A,1,X       ; end of list marker?
            bne .subfactor  ;   nonzero: carry on

            lda A,.n+1      ; remaining amount is final digit
            add A,#'0'
            jsr prchar
            rts

            ;   All possible 10^n (where n>0) factors of $FFFF, terminated
            ;   by low-byte 0. The termination is slightly tricky: it relies
            ;   on the fact that none of the factors have an LSB of 0.
.ten_tab    dw  10000, 1000, 100, 10, 0

.subfactor
            lda .n+1        ; subtract factor from LSB...
            sub A,1,X
            sta .n+1
            lda .n
            sbc A,0,X       ;   ...and MSB
            sta .n
            bcs .finfactor  ; we underflowed; we're done with this factor
            inc B
            bra .subfactor

.finfactor  ;   Add factor back into current value to undo underflow.
            lda A,.n+1      ; LSB and...
            add A,1,X
            sta A,.n+1
            lda A,.n        ;   ...MSB
            adc A,0,X
            sta A,.n

            tba             ; count of this factor and leading 0 suppress flag
            beq .noprint    ; no count and flag=0: skip printing leading 0

            and A,#$7F      ; clear printing leading 0s flag, if present
            add A,#'0'      ; convert to ASCII
            jsr prchar
            lda A,#$80      ; ensure we print all digits from now on
            sta A,.printing
.noprint    bra .nextfactor
