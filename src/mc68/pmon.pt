from    testmc  import *
from    testmc.mc6800  import *
import  pytest, re
from    contextlib  import contextmanager

R = Machine.Registers

test_rig = '''
                cpu 6800
                org $1000

pmon_ramlo      equ $80
rdlinebuf       equ $110
rdlinebuf_end   equ $140    ; 48 chars
pmon_ramhi      equ $180
pmon_org        equ $1000

                include src/mc68/std.a68
                include testmc/mc6800/tmc/bios.a68
                include src/mc68/pmon.a68
'''

@contextmanager
def prperr_abort_check(m, offset):
    ''' Assert that the correct parse error would be generated, if one is
        expected.

        If `offset` is `None`, no parse error is expected and we simply run
        the context's code block.

        If `offset` is not `None`, we assert that the context's code block
        has called ``prperr_abort`` (which we do not actually execute) and
        that ``cmdqptr`` is at the given `offset` from its initial value.
    '''
    if offset is None:
        yield
    else:
        S = m.symtab
        cmdqptr = m.word(S.cmdqptr)         # save initial cmdqptr
        m.deposit(S.prperr_abort, I.RTS)    # stub out prperr_abort routine
        yield
        assert R(pc=S.prperr_abort) == m.regs, 'Should have called prperr_abort'
        assert cmdqptr + offset == m.word(S.cmdqptr), \
            'not expected cmdqptr offset'

####################################################################
#   q* - parsing

@pytest.mark.parametrize('char', [ b'\t', b'\n', b'\r', b' ', ])
def test_qwspace_true(m, S, R, char):
    inbuf = set_rdlinebuf(m, char)
    m.call(S.qwspace, R(a=0xFE, b=0xFD, x=0xFCFB))  # B preserved
    assert (inbuf+1,           R(C=True, a=ord(char), b=0xFD, x=inbuf+1)) \
        == (m.word(S.cmdqptr), m.regs)

@pytest.mark.parametrize('char', [ b'\x01', b'\b', b'@', b'\xFF', ])
def test_qwspace_false(m, S, R, char):
    inbuf = set_rdlinebuf(m, char)
    m.call(S.qwspace, R(a=0xFE, b=0xFD, x=0xFCFB))  # B preserved
    assert (inbuf,             R(C=False, a=ord(char), b=0xFD, x=inbuf)) \
        == (m.word(S.cmdqptr), m.regs)

def test_qwspace_end(m, S, R):
    ' End-of-input char $00 is whitespace but must not be consumed. '
    inbuf = set_rdlinebuf(m, b'\x00')
    m.call(S.qwspace)
    assert (inbuf,             R(C=True, a=0x00, x=inbuf)) \
        == (m.word(S.cmdqptr), m.regs)

####################################################################
#   rd* - read input

def test_rdchar(m, R, S, loadbios):
    ' Mostly confirms that our test framework works. '
    chars = b'!\x00\x7F'
    inchars, _ = loadbios(input=chars)
    for char in chars:
        m.call(S.rdchar, R(a=0xEA))
        assert R(a=char) == m.regs

    #   Document how an attempt to read past available input fails.
    with pytest.raises(EOFError) as ex:
        m.call(S.rdchar)
    assert ex.match('No more input available')

@pytest.mark.parametrize('buf, input', (
    (b'',                   b'\r'),
    (b'a',                  b'a\r'),
    (b'jklm',               b'j_\bk_\x7Fl__\b\bm\r'),
    (b'',                   b'\b\x7F\b\r'),
    (b'ij',                 b'\b\x7Fgh\b\b\b\bij\r'),
    (b'\x01\n\x1F\x7E',     b'\x01\x00\n\x00\x1F\x00\x7E\r'),
))
def test_rdline(m, R, S, loadbios, input, buf):
    TERM = b'END'
    istream, ostream = loadbios(input=input + TERM)
    m.deposit(S.rdlinebuf, b'\xA5'*40)
    m.call(S.rdline)

    assert R(x=S.rdlinebuf, C=0) == m.regs
    assert buf + b'\x00' == m.bytes(m.regs.x, len(buf)+1)

    assert TERM == istream.read(len(TERM))  # no unconsumed input

    def echo_of(readchars):
        out = []
        for i in readchars:
            if   i == 0:    pass                # NUL not echoed
            elif i == 0x7F: out.append(0x08)    # DEL echoes backspace
            elif i == 0x0D: out.append(0x0A)    # CR echos newline
            else:           out.append(i)
        return bytes(out)

    assert echo_of(input) == ostream.getvalue()

def test_rdline_ctrlC(m, R, S, loadbios):
    istream, ostream = loadbios(input=b'pqr\bqp\x03END')
    m.call(S.rdline)
    assert [ R(x=S.rdlinebuf, C=1), b'pqqp\x00'             ] \
        == [ m.regs,                m.bytes(m.regs.x, 5)    ]
    assert b'END' == istream.read(3)
    assert b'pqr\bqp\a\n' == ostream.getvalue()   # BEL char sent

def test_rdline_rubout_at_beginning(m, R, S, loadbios):
    istream, ostream = loadbios(input=b'\b\b\babc\b\r')

    #   Whatever happens to be just before the buffer may not be
    #   the best sentinel bytes, but we can't overwrite it because
    #   we don't know if something important might be there.
    prebuf = m.bytes(S.rdlinebuf - 4, 4)
    m.deposit(S.rdlinebuf, b'\xA5'*40)

    m.call(S.rdline)
    assert R(x=S.rdlinebuf, C=0) == m.regs
    assert prebuf + b'ab\x00' == m.bytes(m.regs.x - 4, 7)

def test_rdline_overflow(m, R, S, loadbios):
    buflen = S.rdlinebuf_end - S.rdlinebuf
    bufinput = b'_' * (buflen - 3) + b'yz'
    istream, ostream = loadbios(input=bufinput + b'AB\r')

    postbuf = m.bytes(S.rdlinebuf_end, 4)
    m.call(S.rdline)

    expected_buf = bufinput + b'\x00' + postbuf
    actual_buf   = m.bytes(m.regs.x, len(expected_buf))
    assert [ R(x=S.rdlinebuf, C=0), expected_buf,   ] \
        == [ m.regs,                actual_buf,     ]

    #   A BEL for each char rejected when the buffer was full.
    assert bufinput + b'\a\a\n' == ostream.getvalue()

####################################################################
#   Command support routines

def test_usepending_none(m, S, R):
    curval = 0x301; m.depword(curval, 0x2711)
    m.depword(S.Mpending, 0xC355)

    m.deposit(S.stat, 0x7F)         # no pending available
    m.call(S.usepending, R(x=curval))
    assert (0x2711, 0xC355) == (m.word(curval), m.word(S.Mpending))
    assert 0x7F == m.byte(S.stat), 'status should not have been modified'

def test_usepending_available(m, S, R):
    curval = 0x404; m.depword(curval, 0x4E22)
    m.depword(S.Mpending, 0xC355)

    m.deposit(S.stat, 0xD5)         # pending available
    m.call(S.usepending, R(x=curval))
    assert (0xC355, 0xC355) == (m.word(curval), m.word(S.Mpending))
    assert 0x55 == m.byte(S.stat), 'pendingval not marked as consumed'

def test_startline(m, S, loadbios):
    #   The guard has the stat_begline bit set, since that is the state
    #   we always expect after calling `startline`
    guard = 0b10110101 | S.stat_begline
    def clear_begline():
        ' Set guard, but clear stat_begline bit. '
        m.deposit(S.stat, guard & (~S.stat_begline & 0xFF))
    def ast(stat, output, assertmsg):
        ' Assert state of stat byte and output. '
        assert (stat,           output,
          ) == (m.byte(S.stat), ostream.getvalue()), ''' Expected:
            - stat byte is {:02X}
            - cummulative output: {}'''.format(stat, repr(output))

    _, ostream = loadbios()
    m.deposit(S.stat, 0)    # memory cleared to 0x00 assumes not at begline
    m.call(S.startline); ast(S.stat_begline, b'\n', '1: add newline')
    m.call(S.startline); ast(S.stat_begline, b'\n', '2: no additional output')
    clear_begline()
    m.call(S.startline); ast(guard, b'\n\n', '3: add newline')
    m.call(S.startline); ast(guard, b'\n\n', '4: no additional output')

def test_inline(m, S):
    guard = 0b10110101 & (~S.stat_begline & 0xFF)   # stat_begline clear

    m.deposit(S.stat, guard | S.stat_begline)
    m.call(S.inline)
    assert guard == m.byte(S.stat), 'expected begline clear when set'

    m.call(S.inline)
    assert guard == m.byte(S.stat), 'expected begline clear when clear'

def test_prperr_offset(m, S, R):
    ' Test the segment that calculates current offset into rdline buffer. '
    m.depword(S.cmdqptr, S.rdlinebuf+7)
    m.setregs(R(pc=S['prperr.tp0']))
    m.stepto(stopat=[S['prperr.tp1']])
    assert R(a=7) == m.regs

@pytest.mark.parametrize('input, char', [
    #   set_rdlinebuf automatically provides different buffer offsets for these.
    (b'abc',  'a'),  (b'def',  'd'),
    (b'\x00', '00'), (b'\x1F', '1F'),   # nonprinting char ranrge
    (b'\x20', '20'),                    # print space as hex so it's visible
    (b'\x21', '!'),  (b'\x7E', '~'),    # edges of printable range
    (b'\x7F', '7F'),
    (b'\x80', '80'), (b'\xFF', 'FF'),
])
def test_prperr(m, S, R, loadbios, input, char):
    inbuf = set_rdlinebuf(m, input)
    _, ostream = loadbios()

    m.setregs(R(pc=S.prperr))
    m.stepto(stopat=[S.cmdloop])

    offset = inbuf - S.rdlinebuf
    expected = '\n\a?{:02X} {}\n'.format(offset, char)
    assert bytes(expected, encoding='ISO-8859-1') == ostream.getvalue()
    #   Not actually ISO-8859-1 encoding; just used for 8-bit straight-through.

def test_prperr_abort(m, S, loadbios):
    ''' Ensure that prperr_abort is restoring the stack to where it was
        when parsing continued, dropping anything pushed by a command.
    '''
    loadbios();  set_rdlinebuf(m, b'\r')

    m.deposit(0x3000, [
        #   Emulate parse loop's save of stack position.
        I.TSX,
        I.STXm, MB(S.perr_stack), LB(S.perr_stack),

        # simulate command deep in call stack
        I.BSR, 0, I.BSR, 0,
        I.LDAA, 0xEE,
        I.PSHA, I.PSHA, I.PSHA, I.PSHA, I.PSHA, I.PSHA, I.PSHA,

        #   Call abort routine, which should restore stack and goto cmdloop.
        I.JMP, MB(S.prperr_abort), LB(S.prperr_abort),
    ])

    end_sp = m.sp - 2   # Because call() will not execute final RTS
    m.call(0x3000, stopat=[S.cmdloop], trace=0)
    assert R(pc=S.cmdloop, sp=end_sp) == m.regs
    assert end_sp == m.word(S.perr_stack) - 1

def deposit_opttab(m, table):
    ' Table is a sequence of (offset, opt char, opt type, opt value addr) '
    opttab = 0x3100
    for offset, ochar, otype, ovaladdr in table:
        m.deposit(opttab+offset, [ord(ochar), otype])
        m.depword(opttab+offset+2, ovaladdr)
        m.deposit(ovaladdr-1, [0xEE]*4)     # sentinel values
    m.deposit(opttab+offset+4, 0)           # terminator

    for addr in range(opttab, opttab+offset+5, 4):
        print('opttab', m.hexdump(addr, 4))
    return opttab

@pytest.mark.parametrize('input, expected, err_offset', [
    #   No options
    (b'',           '3200: EE EE EE EE EE EE EE EE', None),
    (b' ',          '3200: EE EE EE EE EE EE EE EE', None),
    #   No valid options
    (b'error',      '3200: EE EE EE EE EE EE EE EE', 0),
    #   Byte option value parsing, and multiple option handling
    (b'v12',        '3200: EE 12 EE EE EE EE EE EE', None),
    (b'v12v34',     '3200: EE 34 EE EE EE EE EE EE', None),
    (b'v12v34',     '3200: EE 34 EE EE EE EE EE EE', None),
    (b'v5vv00',     '3200: EE 05 EE EE EE EE EE EE', 3),
    (b'v666',       '3200: EE 66 EE EE EE EE EE EE', 3),
    #   Word option value parsing, and multiple option handling
    (b'w7v8xABCDv0','3200: EE 00 EE 00 07 AB CD EE', None),
])
def test_qcmdopts(m, S, R, loadbios, input, expected, err_offset):
    opttab = deposit_opttab(m, [(0, 'v', S.OPTbyte, 0x3201),
                                (4, 'w', S.OPTword, 0x3203),
                                (8, 'x', S.OPTword, 0x3205),
    ])
    _, ostream = loadbios()
    set_rdlinebuf(m, input)
    with prperr_abort_check(m, err_offset):
        m.call(S.qcmdopts, R(x=opttab))
        print(m.hexdump(0x3200, 8))
    assert expected == m.hexdump(0x3200, 8)

@pytest.mark.xfail(strict=True)
def test_qcmdopts_badtab():
    ''' We should do something sensible when an options table contains
        an invalid type.
    '''
    assert 0

####################################################################
#   Commands (tested outside of command loop)

@pytest.mark.parametrize('command, curloc', [
    ('Cdeposit',    'Mdepcur'),
    ('Cexamine',    'Mexamcur'),
    ('Ccall',       'Mcallcur'),
])
def test_command_pending_use(m, S, R, command, curloc):
    ''' Test only that commands properly store the pending value in their
        current location if a simple pending value is available. All other
        coverage comes from test_usepending_* and the individual command
        tests.

        It does this by running the command up to the first RTS, which will
        normally be the return from `bsr usepending`. For commands whose
        first call isn't to usepending, we'll have to look at other options
        or just have those test their pending setup themselves.
    '''
    cmdaddr = S[command]; claddr = S[curloc]
    print('{}={:04X} {}={:04X}'.format(command, cmdaddr, curloc, claddr))

    def run():
        m.depword(S.Mpending, 0x5678); m.depword(claddr, 0x1234)
        m.setregs(R(pc=cmdaddr)); m.stepto(stopon=[I.RTS])

    m.deposit(S.stat, 0); run()
    assert 0x1234 == m.word(claddr), 'no pending available'

    m.deposit(S.stat, 0x80); run()
    assert 0x5678 == m.word(claddr), 'available pending not used'

@pytest.mark.parametrize('cmdsym, optstr, expected_vals', [
    ('Cexamine', b'lAwB', {
        'Mexamlines': 0xA, 'Mexamwidth': 0xB, }),
    ('Cregisters', b'p1001a20b30x4001c50s6001', {
        'Rpc': 0x1001, 'Ra': 0x20, 'Rb': 0x30, 'Rx': 0x4001,
        'Rcc': 0x50, 'Rsp': 0x6001, }),
])
def test_command_options(m, S, cmdsym, optstr, expected_vals):
    ''' Generic test for commands that use ``qcmdopts``:
        ensure that options exist and set values in the correct locations.

        `optstr` must use a value ≥$100 for options that take word values
        or they will be mistakenly assumed to be byte values.

        We also confirm that an unknown option produces an error and rolls
        back the stack frame correctly, though this is really just for
        comfort: it this adds very little coverage over the ``qcmdopts``
        unit tests that already check this.
    '''
    stops = [   S['qcmdopts.done'], # successful parse complete
                S.prperr,           # error/abort exit
            ]

    #   Successful parse with values in correct locations.
    set_rdlinebuf(m, optstr)
    m.call(S[cmdsym], stopat=stops)
    for valsym, expected in expected_vals.items():
        valaddr = S[valsym]
        if expected >= 0x100:
            actual = m.word(valaddr)
        else:
            actual = m.byte(valaddr)
        assert expected == actual, valsym

    #   Use an option that no command accepts so we get a parse failure.
    set_rdlinebuf(m, b'\xFE')
    #   On abort, restore stack to this test's call point,
    #   emulating the parse loop's save of stack position.
    initsp = m.sp; m.depword(S.perr_stack, initsp + 1)
    m.call(S[cmdsym], stopat=stops)
    assert R(pc=S.prperr, sp=initsp) == m.regs, \
        'Expected error exit and stack restored.'

def set_rdlinebuf(m, input=b''):
    ''' Set up the input buffer with args to be parsed by a command.

        This deposits `input` into ``rdlinebuf`` at a deterministic offset
        0-7 (based on the contents of `input`), appends a $00 terminator,
        and sets the current parse pointer `cmdqptr` to that offset.
    '''
    S = m.symtab
    inbuf = S.rdlinebuf + sum(input) % 8
    print('rdlinebuf:{:04X} input@{:04X} {}'.format(S.rdlinebuf, inbuf, input))
    m.deposit(inbuf, input + b'\x00')
    m.depword(S.cmdqptr, inbuf)
    return inbuf

@pytest.mark.parametrize('val, output', [
    #   Output is expected to have a trailing space.
    (0x5071, "$5071 20593 'Pq' "),  # PAB=1 (pending available bit is set)
    (0x7E20, "$7E20 32288 '~ ' "),  # PAB=0; ends of printable ASCII range
    (0x019F, "$019F 415 'A_' "),    # using prvischar (bit 7 ignored, ctl-chars visible)
])
def test_query(m, S, R, loadbios, val, output):
    #   `status` byte:
    #   bit 7: (1=pending value available) is set to bit 0 of `val`
    #   bit 6: (1=at beginning of line) set to 1, to show it's flipped
    #   remainder: some pseudo-random values as a guard.
    #   XXX this way of testing status output needs to be improved
    stat = ((val & 1) << 7) | S.stat_begline | ((MB(val)^LB(val)) & 0b00111111)

    _, ostream = loadbios()
    m.deposit(S.stat, stat)
    m.depword(S.Mpending, val)

    m.call(S.Cquery)
    assert stat & (~S.stat_begline & 0xFF) == m.byte(S.stat), \
        'stat value should have stat_begline cleared, otherwise unchanged'
    assert output == str(ostream.getvalue(), encoding='ASCII')

@pytest.mark.parametrize( 'target', [ 0x2222, 0x7055, ], ids=tmc_tid)
def test_Ccall(m, S, R, target):
    m.deposit(S.Ra,  0xA0)
    m.deposit(S.Rb,  0xB0)
    m.depword(S.Rx,  0xC000)
    #   The test routine both expects certain condition codes (crashing if
    #   they are not set as expected) and sets some. In particular, we know
    #   that a likely error in the register save routine would set the zero
    #   flag, so we have the test code clear it.
    m.deposit(S.Rcc, 0b00101010)    # --HiNzVc
    expected_cc =    0b11100101     # --HinZvC

    #   The call command should not change the saved SP or PC,
    #   for reasons described in the code.
    expected_sp = 0xDEAD
    m.depword(S.Rsp, expected_sp)
    expected_pc = 0xBEEF
    m.depword(S.Rpc, expected_pc)

    #   XXX test condition codes
    m.deposit(target, [
        I.INCA, I.INX,              # changed registers to save (except B)
        I.CLV, I.SEC,               # some changed flags to save
        I.LDAB, 0,                  # set Z flag and change B
        I.RTS,
        ])
    m.depword(S.Mcallcur, target)

    print('calling:', hex(target), m.hexdump(target, 8))
    m.call(S.Ccall)
    assert (0xA1,         0x00,         0xC001,       bin(expected_cc)) \
        == (m.byte(S.Ra), m.byte(S.Rb), m.word(S.Rx), bin(m.byte(S.Rcc)))
    assert (hex(expected_pc),   hex(expected_sp)) \
        == (hex(m.word(S.Rpc)), hex(m.word(S.Rsp)))

@pytest.mark.parametrize(
    '  addr, parselen, cmdarg,    data', [
    (0x0001,     0,    b'',       b''),
    (0xD123,     2,    b'ff',     b'\xFF'),
    (0x0301,     1,    b'1',      b'\x01'),
    (0x0302,     4,    b'abcd',   b'\xAB\xCD'),
    (0x0303,    20,    b'a bc def 0123  4   5',
                                  b'\x0A\xBC\xDE\x0F\x01\x23\x04\x05'),
    (0x0304,     1,    b'6x',     b'\x06'),
    (0x0305,     5,    b'6 12 x', b'\x06\x12'),
    (0x0306,     5,    b'6 13:x', b'\x06\x13'),
], ids=tmc_tid)
def test_deposit(m, S, R, addr, parselen, cmdarg, data):
    guarded = b'\xEE' + data + b'\xEE'

    m.depword(S.Mdepcur, addr)
    inbuf = set_rdlinebuf(m, cmdarg)
    m.deposit(addr-1, b'\xEE'*len(guarded))

    m.call(S.Cdeposit, R(a=ord(':'), x=S.Cdeposit))
    assert (inbuf,  inbuf + parselen,   guarded) \
        == (inbuf,  m.word(S.cmdqptr),  m.bytes(addr-1, len(guarded)))

def dep_examine_defaults(m, addr=0x000):
    ' Default parameter values for test_examine_* '
    S = m.symtab
    m.depword(S.Mexamcur, addr)
    m.deposit(S.Mexamwidth, 8)
    m.deposit(S.Mexamlines, 2)
    #   Since our tests are not calling the commands from the command
    #   parsing loop, we must save our pre-call stack value manually for it
    #   to be restored correctly on an abort.
    m.depword(S.perr_stack, m.sp)

@pytest.mark.parametrize(
    '  addr, cmdarg, width, lines, expmatch', [
    (0x7FFF, b'',        8,   2, '7FFF: 00 40 41 42 43 44 45 46\n'
                                 '8007: 47 48 49 4A 4B 4C 4D 4E\n'),
    (0x8000, b'l1',      8,   1, '8000: 40 41 42 43 44 45 46 47\n'),
    (0x8001, b'w3',      3,   2, '8001: 41 42 43\n8004: 44 45 46\n'),
    (0x8002, b'l1fw2',   2,  31, '8002: 42 43\n.*803E: 7E 7F\n'),
    (0x8003, b'l3w10',  16,   3, '8003: 43 .* 52\n8013: 53.*\n8023: 63.*72\n'),
], ids=tmc_tid)
def test_examine_output(m, S, R, loadbios, addr, width, cmdarg, lines, expmatch):
    #   XXX Probably this should use direct argument setup and skip
    #   testing arg parsing, leaving that to test_examine_parseargs().
    m.deposit(0x8000, range(0x40, 0x80))    # test data to dump
    dep_examine_defaults(m, addr)
    inbuf = set_rdlinebuf(m, cmdarg)
    _, ostream = loadbios()

    m.call(S.Cexamine)
    print('updated: lines={:02X} width={:02X}'.format(
        m.byte(S.Mexamlines), m.byte(S.Mexamwidth)))
    output = str(ostream.getvalue(), encoding='ASCII')
    print(output)

    assert (inbuf + len(cmdarg), lines, width, lines) \
        == (m.word(S.cmdqptr), m.byte(S.Mexamlines), m.byte(S.Mexamwidth),
            len(output.split('\n')) - 2,    # don't count leading/trailing \n
        ), 'consumed, lines, width, outlines'
    assert re.fullmatch('\n' + expmatch, output, re.DOTALL)

def depregs(m, regs):
    ' Deposit `regs` to the save registers area. '
    S = m.symtab
    m.depword(S.Rsp, regs.sp);  m.depword(S.Rpc, regs.pc)
    m.deposit(S.Ra,  regs.a);   m.deposit(S.Rb,  regs.b)
    m.depword(S.Rx,  regs.x);   m.deposit(S.Rcc, regs.cc)

def examregs(m):
    ' Return a Registers containing the in-memory register copies. '
    S = m.symtab
    return R(sp=m.word(S.Rsp), pc=m.word(S.Rpc), cc=m.byte(S.Rcc),
             a=m.byte(S.Ra),    b=m.byte(S.Rb),   x=m.word(S.Rx),
            )

@pytest.mark.parametrize('regs', [
    R(pc=0x5678, a=0x9A, b=0xBC, x=0xDEF0, cc=0xFF, sp=0x1234),
    R(pc=0x0002, a=0x03, b=0x04, x=0x0005, cc=0x00, sp=0x0001),
])
def test_regscmd_show(m, S, R, loadbios, regs):
    print(regs)
    depregs(m, regs)
    inbuf = set_rdlinebuf(m)
    _, ostream = loadbios()
    m.call(S.Cregisters)
    output = str(ostream.getvalue(), encoding='ASCII')
    print(output)

    #   XXX flags should be in more human-readable format
    #   But it may be difficult to do this with expanding beyond 32 chars:
    #       p5678 a9A bBC xDEF0 cFF s1234
    #       1--------10--------20--------30-|------40

    expected = ' p{:04X} a{:02X} b{:02X} x{:04X} c{:02X} s{:04X}\n' \
        .format(regs.pc, regs.a, regs.b, regs.x, regs.cc, regs.sp)
    assert (inbuf, expected) == (m.word(S.cmdqptr), output)


####################################################################
#   Command loop

@pytest.mark.parametrize('cmdchar, foundaddr', [
    ('z', 0x0F0F),
    ('y', 0x0E0E),
    ('a', 0x0101),
    ('w', None),
    ('@', None),
])
def test_cmdloop_search(m, S, R, cmdchar, foundaddr):
    ' Test the command table search routine embedded in cmdloop. '
    CMDTBL = 0x3FFE
    tabledata = [ ('z', 0x0F0F), ('y', 0x0E0E),
                  ('a', 0x0101), ('\x00', 0x0000),
                ]
    for entry, char_addr in enumerate(tabledata):
        offset = entry * 3; char, addr = char_addr
        m.deposit(CMDTBL+offset,   [ord(char)])
        m.depword(CMDTBL+offset+1, [addr])
    m.depword(S.cmdtbl, CMDTBL)

    docmd   = S['cmdloop.docmd'] + 2  # instruction after loading address
    unkcmd  = S['cmdloop.unkcmd']

    m.setregs(R(pc=S['cmdloop.search'], a=ord(cmdchar)))
    m.stepto(stopat=[docmd, unkcmd], maxsteps=10000)

    if foundaddr is not None:
        #   We've loaded the right command address and are about to call it
        assert R(pc=docmd, x=foundaddr) == m.regs
    else:
        #   We've gone through the entire table and not found the command.
        lastentry = CMDTBL + 3 * (len(tabledata)-1)
        assert R(pc=unkcmd, x=lastentry) == m.regs

def test_cmdloop_quitcmd(m, S, R, loadbios):
    ' Minimal path that gets us through to exit. '
    #   Quit doesn't return to the parser loop; it manually removes the
    #   return address that .parse added. This means our JSRs/RTSs will
    #   match, so in this one case we can use m.call().
    istream, ostream = loadbios(input=b'q\r')
    m.depword(S.cmdtbl, S.cmdtbl_std)
    m.call(S.cmdloop)
    assert b'\n^q\n' ==  ostream.getvalue()
    #   Make sure we exited at the point where we expected.
    assert R(pc=S.Crts) == m.regs

def test_cmdloop_cancel(m, S, R, loadbios):
    ' Confirm that ctrl-C terminates input, ignores line. '
    istream, ostream = loadbios(input=b'^~123~^\x03' b'q\r')
    m.depword(S.cmdtbl, S.cmdtbl_std)
    m.call(S.cmdloop)
    assert b'\n^^~123~^\x07\n' b'^q\n' ==  ostream.getvalue()
    #   Make sure we exited at the point where we expected.
    assert R(pc=S.Crts) == m.regs

def test_cmdloop_parse_error(m, S, R, loadbios):
    ''' This checks not only the error message, but also, by showing that
        `q` works properly after a parse error, that the stack is handled
        correctly when we abort parsing the command line.
    '''
    istream, ostream = loadbios(input=b'\xC0z\xC0\xC0\rq\r')
    m.depword(S.cmdtbl, S.cmdtbl_std)
    m.call(S.cmdloop)
    assert (
        b'\n'               # newline due to clear stat byte
        b'^'                # prompt
        b'\xC0z\xC0\xC0\n'  # first input line echoed
        b'@'                # output of $C0 command
        b'\n'               # newline because $C0 prints @ inline
        b'\a?01 z\n'        # error message
                            # $C0 commands after error are ignored
        b'^'                # prompt
        b'q\n'              # second input line echoed
      ) == ostream.getvalue()

####################################################################
#   Integration tests

def test_cmdloop_pending(m, S, loadbios):
    ' Ensure that pending values are loaded properly. '
    istream, ostream = loadbios(input=b'3039q\r')
    m.call(S.init)
    assert b'\n^3039q\n' ==  ostream.getvalue()
    pendingbit = m.byte(S.stat) & 0x80  # isolate pending bit
    assert (0x80, 0x3039) == (pendingbit, m.word(S.Mpending))

def test_cmdloop_multicmd(m, S, loadbios):
    ' Multiple command processing of the simplest possible commands. '
    istream, ostream = loadbios(input=b'\xC0\xC0 \xC0q\r')
    m.call(S.init)
    assert b'\n^\xC0\xC0 \xC0q\n' b'@@@' ==  ostream.getvalue()

def test_cmdloop_multiline(m, S, loadbios):
    ''' Simple commands split across lines.

        This demonstrates some ill-formed behaviour; entering a line causes
        the input routine to produce a newline, but then the prompt prints
        another newline even though there was no output on the existing
        line. When we print newlines needs to be reworked.
    '''
    istream, ostream = loadbios(input=b' \r\xC0\rq\r')
    m.call(S.init)
    expected = (
        '\n'           # newline due to stat byte being clear
        '^'            # prompt
        ' \n'          # input echo: space EOL NL
        '^'            # prompt
        '\xC0\n'       # input echo: print @ command, EOL NL
        '@'            # print @ command output
        '\n^'          # prompt
        'q\n'          # input echo: quit command, EOL NL
        )
    #   Not actually ISO-8859-1, but just transparent 8-bit pass-through.
    assert bytes(expected, encoding='ISO-8859-1') ==  ostream.getvalue()

def test_cmdloop_deposit_examine(m, S, loadbios):
    ' Simple integration test. '
    istream, ostream = loadbios(input=b'7654x 7655:ab:x :cd:x q\r')
    m.call(S.init)
    print(m.regs); print(m.hexdump(m.regs.sp-8, 8))
    output = ostream.getvalue(); print(output)
    assert b'\n7654: 00 AB 00' in output
    assert b'\n7654: 00 CD 00' in output

####################################################################

@pytest.mark.skip
def test_cmdloop_eachrts(m, S, R, loadbios):
    ''' A (currently non-working) hack to do "selective trace," printing
        the current instruction, stack contents and buffer contents at a
        few points during execution.
    '''
    input = b'a800\r3q\r'
    input = b'^ \xC0\xC0q\r'
    istream, ostream = loadbios(input=input)
    m.deposit(0xA800, b'ABCDEFGH')

    stackbase = m.regs.sp + 1
    def showstack():
        return '{:02X}{:02X} {:02X}{:02X} {:02X}{:02X} {:02X}{:02X}' \
            .format(*m.bytes(stackbase-8, 8))

    m.setregs(R(pc=S.cmdloop))
    level = 0
    print('{}                {}'.format(m.regs, showstack()))
    while True:
        m.stepto(stopon=[I.JSR, I.BSR, I.RTS, I.PSHA],
            stopat=[ S['rtscmd'], S['cmdloop.parse'] - 1 ])
        r = m.regs
        opcode = m.byte(r.pc)
        if   opcode == I.PSHA:
            level += 1
            inst = 'PSH'
            dest = S['cmdloop.parse']
        elif opcode == I.JSR:
            level += 1
            inst = 'JSR'
            dest = m.word(r.pc+1)
        elif opcode == I.BSR:
            level += 1
            inst = 'BSR'
            dest = r.pc + 2 + m.byte(r.pc+1)
        else:
            level -= 1
            inst = 'RTS'
            dest = 0
        print('{} {:3d} {} {:04X}   {}   {}'
            .format(r, level, inst, dest, showstack(), m.bytes(r.x, 6)))

    assert 0
