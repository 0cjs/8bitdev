from    testmc.m6502.registers  import Registers as R
import  pytest

def test_Regs_cons_default():
    r = R()
    for attrname in ('pc', 'a', 'x', 'y', 'N', 'V', 'D', 'I', 'Z', 'C'):
        assert None is getattr(r, attrname)

def test_Regs_cons():
    r = R(pc=0x1234, a=0x56, x=0x78, y=0x9A,
        N=1, V=0, D=1, I=0, Z=True, C=False)
    assert 0x1234 == r.pc
    assert   0x56 == r.a
    assert   0x78 == r.x
    assert   0x9A == r.y
    assert      1 == r.N
    assert      0 == r.V
    assert      1 == r.D
    assert      0 == r.I
    assert      1 == r.Z
    assert      0 == r.C

def test_Regs_immutable():
    r = R()
    with pytest.raises(AttributeError) as e:
        r.I = 1
    assert e.match("can't set attribute")

def test_Regs_cons_badvalue():
    with pytest.raises(ValueError) as e:
        R('hello')
    assert e.match('bad value: hello')
    with pytest.raises(ValueError) as e:
        R(-1)
    assert e.match('bad value: -1')

def test_Regs_conspsr():
    ' Construction with a program status register byte as pushed on stack. '

    with pytest.raises(AttributeError) as e:
        R(psr=0xff, V=0)
    assert e.match("must not give both psr and flag values")

    with pytest.raises(AttributeError) as e:
        R(psr=0x123)
    assert e.match('invalid psr: 0x123')

    r = R(psr=0xff)
    assert (  1,   1, 1,   1,   1,   1) \
        == (r.N, r.V, r.D, r.I, r.Z, r.C)

    r = R(psr=0)
    assert (  0,   0, 0,   0,   0,   0) \
        == (r.N, r.V, r.D, r.I, r.Z, r.C)

def test_Regs_repr_1():
    r = R(1, 2, 0xa0, sp=0xfe, psr=0b10101010)
    rs = '6502 pc=0001 a=02 x=A0 y=-- sp=FE Nv--DiZc'
    assert rs == repr(r)
    assert rs == str(r)

def test_Regs_repr_2():
    r = R(y=7, V=1, Z=0)
    rs = '6502 pc=---- a=-- x=-- y=07 sp=-- -V----z-'
    assert rs == repr(r)
    assert rs == str(r)

def test_Regs_repr_3():
    r = R(N=True, D=True, C=False)
    rs = '6502 pc=---- a=-- x=-- y=-- sp=-- N---D--c'
    assert rs == repr(r)
    assert rs == str(r)

def test_Regs_eq_pc_only():
    assert R(1234) != 1234
    assert      1234  != R(1234)
    assert R(1234) == R(1234)
    assert R(None) == R(1234)
    assert R(1234) == R(None)
    assert R(None) == R(None)
    assert R(1234) != R(1235)

def test_Regs_eq():
    all     = R(0x1234, 0x56, 0x78, 0x9a, 0xbc, psr=0b01010101)
    again   = R(0x1234, 0x56, 0x78, 0x9a, 0xbc, psr=0b01010101)

    assert      all == all
    assert not (all != all)     # Were we seeing __ne__() delgation problems?
    assert      all == again
    assert not (all != again)

    assert all != R(0)
    assert all != R(1)
    assert all == R(0x1234)

    assert all != R(a=0)
    assert all != R(a=1)
    assert all == R(a=0x56)

    assert all != R(C=0)
    assert all == R(C=1)
    assert all == R(y=0x9a, sp=0xbc, N=0, V=1, D=0, I=1, Z=0)

def test_Regs_eq_flags():
    r = R(psr=0xFF)
    assert R(N=1) == r;  assert R(N=0) != r
    assert R(V=1) == r;  assert R(V=0) != r
    assert R(D=1) == r;  assert R(D=0) != r
    assert R(I=1) == r;  assert R(I=0) != r
    assert R(Z=1) == r;  assert R(Z=0) != r
    assert R(C=1) == r;  assert R(C=0) != r

