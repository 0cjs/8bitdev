from    collections   import namedtuple as ntup
import  pytest
from    testmc.memimage   import MemImage

def test_memimage_entrypoint():
    mi = MemImage()
    assert None is mi.entrypoint
    mi.entrypoint = 0x1234          # currently no accessors; set it directly

def test_memimage_memrec():
    mi = MemImage()
    assert  0 == len(mi)
    assert [] == mi

    testdata =  b'\x00\x01\x02\x03\0x04'
    mi.addrec(0x1234, testdata)
    assert (0x1234, testdata) == mi[0]
    assert 1 == len(mi)

    for addr, data in mi:           # make sure we're iterable
        assert 0x1234 == addr
        assert testdata == data
    for rec in mi:                  # and our tuple has accessors
        assert 0x1234 == rec.addr
        assert testdata == rec.data

def test_memimage_memrec_alternate():
    ''' When MemRec is a different type with additional attributes,
        `for` should still return (addr,data) tuples.
    '''
    MR = ntup('MR', 'x, addr, y, data, z')
    testaddr = 0x2345
    testdata = b'\x67\x89\xAB\xCD\xEF'

    mi = MemImage()
    mi.append(MR('x', testaddr, 'y', testdata, 'z'))
    for addr, data in mi:
        assert testaddr == addr
        assert testdata == data

def test_memimage_contig():
    def byterange(s, e):
        return bytes(range(s, e))
    assert b'\x02\x03\x04' == byterange(2, 5)

    mi = MemImage()
    mi.addrec(1008, byterange(8, 12))
    mi.addrec(1000, byterange(0, 4))
    mi.addrec( 100, b'')                # Ensure we ignore empty records...
    mi.addrec(1002, b'')                # ...even when overlapping.
    mi.addrec(2000, b'')

    assert 12 == mi.contiglen()
    assert 12 == mi.contiglen()     # cached value
    assert [0, 1, 2, 3, 255, 255, 255, 255, 8, 9, 10, 11] \
        == list(mi.contigbytes())
    assert [0, 1, 2, 3, 0, 0, 0, 0, 8, 9, 10, 11] \
        == list(mi.contigbytes(fill=0))

@pytest.mark.parametrize('overlap_start, overlap_pos', [
    (0xFF,  r'\$0100'),
    (0x101, r'\$0101'),
    (0x103, r'\$0103'),
])
def test_memimage_overlap(overlap_start, overlap_pos):
    mi = MemImage()
    mi.addrec(0x100, b'0123')
    mi.addrec(overlap_start, b'AB')
    with pytest.raises(MemImage.OverlapError) as ex:
        mi.contigbytes()
    assert ex.match(overlap_pos)
