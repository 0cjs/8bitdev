;   XXX something that should become a machine-language monitor one day

; ----------------------------------------------------------------------
;   Standard functions, macros and definitions
;   (Much of this should probably be moved to `stddef`.)

LSB         function addr,(addr & $FF)
MSB         function addr,((addr & $FF00) >> 8)

;   ASCII character definitions
BEL         equ $07                 ; bell ('\a')
BS          equ $08                 ; backspace ('\b')
LF          equ $0A                 ; line feed ('\n')
CR          equ $0D                 ; carriage return ('\r')
SPACE       equ ' '
DEL         equ $7F

; ----------------------------------------------------------------------
;   Command loop

PROMPT      equ '>'

;   A simple command loop to demo this stuff.
cmdloop
            jsr prnl            ; Not clear that we should always be starting
                                ;   with a newline, rather than having commands
                                ;   terminate their output with one.
.skipnl     lda A,#PROMPT
            jsr prchar
            jsr prspace
            jsr rdline
            bcs .skipnl         ; if ^C, ignore line
            stx cmdqptr

.parse      ldx cmdqptr
            lda A,0,X           ; reached terminator?
            beq cmdloop         ; yes, read another line of commands

            ;   Standard commands will RTS when done; we set up the stack
            ;   so that after we JMP to them they will come back here where
            ;   we will continue parsing the remainder of the command line.
            ;   (Essentially, continuation-passing style.)
            lda A,#LSB(.parse)
            psh A
            lda A,#MSB(.parse)
            psh A

            ;   Start by attempting to parse a hexword, handling it if found.
            jsr qhexword
            bpl hexdump         ; parsed hexword

            ;   Consume a char and parse it as a command.
            ;   (Callees who need to know the char parsed may DEX to get it.)
            lda A,0,X           ; load char we're checking
            inx                 ; move input pointer to next char
            stx cmdqptr         ;   for later

.search     ldx cmdtbl
.next       lda B,0,X           ; load next command char from table
            cmp B,#00           ; end of table?
            beq .unkcmd         ; yes, unknown command
            cba                 ; found command?
            beq .callcmd        ; yes, call it
            inx                 ; skip past command char in table
            inx                 ;   and its address
            inx
            bra .next

.callcmd    ldx 1,X             ; load command address
            jmp ,X              ; call command (TCO)

            ;   No command matched; we have an error
.unkcmd     pul B               ; no subroutine to call, so take .parse
            pul B               ;   address off the stack.
            jsr errbeep         ; beep for error (XXX should show err msg)
            bra cmdloop

;   Current parse point in command input buffer.
;   This may be updated by commands that parse data after the command letter,
;   but it must not be moved past the terminating `0`.
cmdqptr     ds  2               ; current parsing loc in command input buffer

; ----------------------------------------------------------------------
;   Command Tables

;   Location of command table; this can be overridden by the user.
;   Each entry is three bytes, one of:
;   • A command character followed by the address of the routine
;     for that command; the routine should finish with RTS.
;   • A $00 character and $0000 address indicating end of table.
;   • XXX need to define entry for continuation address of table.
cmdtbl      dw default_cmdtbl

;   The default command table. If cmdtbl points to a user-defined table,
;   likely you want a continuation entry at the end of that table pointing
;   to this.
default_cmdtbl
            db ' '
            dw      rtscmd      ; do nothing
            db '^'
            dw      nlcmd       ; print newline
            db 'Q'
            dw      quitcmd     ; "quit"; exit to monitor's caller
            db $00
            dw      $0000       ; end of table

; ----------------------------------------------------------------------
;   Commands
;
;   When a command routine is called, A will contain the command char and
;   `cmdqptr` will point to the first character after the command. If the
;   command routine does further parsing of arguments, it must increment
;   `cmdqptr` to consume what it has parsed. RTS will continue parsing
;   from `cmdptr`.

quitcmd:    pul B               ; remove continuation address so that we
            pul B               ;   return to what called the monitor
rtscmd:     rts

;   print a newline; useful for separating output and unit tests
nlcmd       jmp prnl            ; RTS (TCO)

;   XXX currently designed to be called after qhexword, not as a command
hexdump     stx cmdqptr         ; XXX because not done by main for qhexword
            lda A,hexword       ; addr hi
            jsr prhex
            lda A,hexword+1     ; addr lo
            jsr prhex
            lda A,#':'
            jsr prchar

            ldx hexword
            lda B,#8            ; bytes to print
.loop       jsr prspace
            lda A,,X
            jsr prhex
            inx
            dec B
            bne .loop
            jsr prnl
            rts

; ----------------------------------------------------------------------
;   rd* - read input

;   ♠X ♣A ♡B Read a line of user input, echoing each character.
;   On return X will point to the chars read, terminated by $00,
;   and the carry will be clear for CR termination, set for ^C termination.
;
;   The following characters are interpreted specially:
;     - BS, DEL: if not at start of input, echo a BS and delete the
;       previously entered character.
;     - CR: echo a newline and return with C=0.
;     - ^C: beep, echo a newline and return with C=1.
;
;   This uses its own buffer, rdlinebuf, which is overwritten with every call.
;   When the buffer is full rdline will beep instead of accepting input chars.
;
rdline      ldx #rdlinebuf
.nextchar   jsr rdchar
            cmp A,#CR           ; done?
            bne .continue
            jsr prnl
            clr ,X              ; clears carry
.ret        ldx #rdlinebuf      ; no effect on carry
            rts

.continue   cmp  A,#$03         ; Ctrl-C
            beq  .cancel
            ;   If we're on the last byte of the buffer, we need to save that
            ;   for the termination char. So just reject input at that point.
            cpx #(rdlinebuf_end - 1)
            bne .accept
            jsr errbeep
            bra .nextchar

.accept     cmp  A,#$00         ; ignore NUL
            beq  .nextchar
            cmp  A,#BS
            beq .backspace
            cmp  A,#DEL
            beq .backspace
            sta A,0,X
            inx
.echo       jsr prchar
            bra .nextchar

.backspace  cpx #rdlinebuf
            beq +               ; don't backspace past beginning of buffer
            dex
+           lda A,#BS
            bra .echo

.cancel     ;   We terminate without storing the Ctrl-C char mainly
            ;   because we don't know if we have space for it. We might
            ;   be on the last byte of the buffer already.
            clr ,X
            jsr errbeep         ; beep to indicate cancel
            jsr prnl
            sec                 ; indicate input cancelled
            bra .ret

rdlinebuf   ds 160
rdlinebuf_end

; ----------------------------------------------------------------------
;   q* - parsing

tmp0        equ $E8             ; temp storage
hexword     equ $EE             ; result location

            include "src/mc68/qdigit.a68"

;   ♠X,hexword ♣AB,tmp0 Parse an ASCII hex word at X, N=0 on success.
;
;   0-4 ASCII characters are parsed and X is left pointing at the first
;   unparsed char. The parsed word, if any, is left in `hexword`.
;   The N flag is clear if at least one digit is successfully parsed,
;   set otherwise.
;
;   TODO Consider an alternative implementation (parametrizing the test to
;   test both versions) to see if it may be shorter or faster to store by
;   nybble to do less shifting. First digit goes into hexword nybble 3,
;   second (if present) combines nybble 2 with 3, third (if present) goes
;   straight into hexword nybble 1, and last, if present, combines into
;   hexword nybble 0. Less ROL.
;
qhexword2 rts ; XXX
;
qhexword    lda B,#4            ; max digits to read
qhex        clr A               ; current result: $0000
            sta A,hexword
            sta A,hexword+1
            tpa                 ; current exit status: error (bit 7 set)
            sta A,tmp0
.nextchar   lda A,,X
            bsr qdigit
            bmi .exit           ; bad digit, return
            cmp A,#$0F+1
            bcc .exit           ; digit in base >16

            clr tmp0            ; read at least 1 char; clear error status
            inx                 ; consume this character
            asl A               ; shift value to upper nybble
            asl A
            asl A
            asl A
            psh B
            lda B,#4
.shiftin    asl A               ; upper bit to carry
            rol hexword+1       ; low bit into LSB
            rol hexword         ; high bit into MSB
            dec B
            bne .shiftin
            pul B
            dec B
            bne .nextchar
.exit       lda A,tmp0          ; update error status flag
            rts

; ----------------------------------------------------------------------
;   pr* - printing output

;   ♣A Print value in a as hex to the character output port.
;   Falls through to prnyb.
prhex       psh A
            lsr A
            lsr A
            lsr A
            lsr A
            bsr prnyb
            pul A
            ; fallthrough

;   ♣A Print lower nybble of A to the character output port.
prnyb       and A,#$0F
            add A,#'0'
            cmp A,#'9'+1
            bmi .digit
            add A,#'A'-'9'-1
.digit      jsr prchar
            rts

;   ♣A Print a space.
prspace     lda A,#SPACE
            jsr prchar
            rts

