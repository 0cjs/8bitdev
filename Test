#!/usr/bin/env bash
set -Eeuo pipefail

trap 'ec=$?; echo 1>&2 "INTERNAL ERROR: ec=$ec line=$LINENO cmd=$BASH_COMMAND";
      exit $ec;' ERR

die()  { ec="$1"; shift; echo 1>&2 "ERROR ($ec):" "$@"; exit $ec; }
fail() { ec=$?; echo "FAILED exitcode=$ec ($(elapsed)s)"; exit $ec; }

elapsed_start=$(date +%s)
elapsed() { echo $(( $(date +%s) - $elapsed_start )); }

####################################################################
#   Build functions

build_toolsets() {
    #   Toolchains, utilities, emulators.
    t8dev toolset asl || fail
    [[ -f $all_tools ]] && { t8dev toolset asxxxx || fail; }
    t8dev toolset disx || fail
    t8dev toolset osimg ctools dos33fsprogs || fail
    t8dev toolset cscp RunCPM || fail
    if [[ $(uname) != Darwin ]]; then
        #   These don't build happily on MacOS at the moment,
        #   and aren't required for the automated build/tests.
        t8dev toolset bm2 linapple VirtualT || fail
    fi
}

#   ASxxxx builds
build_asxxxx() {
    #   Due to issues with 32-bit binaries, run only when $all_tools set.
    [[ -f $all_tools ]] || return 0

    local sources=$(echo src/asxxxx/*.a*)
    [[ -f $fast_hack ]] && {
        #   Because they do no dependency checks, the builds below rebuild
        #   everything whether needed or not. To speed things in fast_hack
        #   mode we do a basic depenendency check "by hand" (which is
        #   probably not all that reliable) and let the full rebuild go
        #   ahead only if we notice something needs to be rebuilt.
        local need_rebuild= src obj
        for src in $sources; do
            obj=.build/obj/src/asxxxx/$(basename ${src%.*}).bin
            [[ $src -nt $obj ]] && need_rebuild=1
        done
        [[ -z $need_rebuild ]] && return
    }

    #   Though we don't need to explicitly specify `simple` as an input
    #   file for the link (aslink would get it from the output file) we
    #   do so anyway to test that t8dev handles it correctly.
    t8dev asx asm  src/asxxxx/simple.a65
    t8dev asx link src/asxxxx/simple simple
    t8dev asx asm  src/asxxxx/reloctest.a65
    t8dev asx link src/asxxxx/reloctest -b '_code=0x400'
    t8dev asx asm  src/asxxxx/zptest.a65
    t8dev asx link src/asxxxx/zptest -b '_code=0x0300'
}

####################################################################
#   t8dev and project setup

export T8_PROJDIR=$(cd "$(dirname "$0")" && pwd -P)

#   LOCAL: Build even the tools we don't use much, slowing things down
#   (and requiring extra pre-install work on some systems).
all_tools="$T8_PROJDIR/.all-tools"

#   LOCAL: Avoid building toolsets.
#   • On slower systems this saves ~2s for toolset build checks, which is
#     helpful. (But we still really need dependency checks because another
#     ~3s is rebuilding exe/ code.)
#   • This file is never ignored or committed so `git status` will make it
#     clear you're not building everything that might be changed.
fast_hack="$T8_PROJDIR/.fast-hack"

#   Extra things to clean with -C and -c.
T8_CLEAN_C="$fast_hack"

t8dir=t8dev/        # or whatever your submodule path is
[[ -r $T8_PROJDIR/$t8dir/t8dev/t8setup.bash ]] \
    || git submodule update --init "$T8_PROJDIR/$t8dir"
. "$T8_PROJDIR"/$t8dir/t8dev/t8setup.bash

####################################################################
#   Project-specific setup

t8bin="$T8_PROJDIR/$t8dir/bin"
t8dev="$t8bin/t8dev"

post_emulate=
#   Extra argument processing for this project. These must be after the
#   project-setup.bash arguments, but before anything to be passed on to
#   pytest/test scripts/etc.
#   • -A: build and use all tools
while [[ ${#@} -gt 0 ]]; do case "$1" in
    --)     shift; break;;                  # remainder are pytest args
    -A)     shift; touch "$all_tools";;
    -E)     shift; post_emulate="$1"; shift;;
    *)      break;;                         # guessing remainder are for pytest
esac; done

####################################################################
#   Project-specific setup

[[ -f $fast_hack ]] || build_toolsets

#   Builds of asxxxx sources are a completely separate thing right now
#   so that we can more easily skip the (re-)builds if $fast_hack is set.
build_asxxxx

####################################################################
#   Builds

#   We use paths relative to $T8_PROJDIR in the lists below, so we need
#   to chdir to that. That's fine because we don't use any user command
#   line arguments for this. But after we must change back to the user's
#   CWD so any relative paths in command line args work.
command pushd "$T8_PROJDIR" >/dev/null
t8dev asl t8dev || fail
t8dev asl auto exe/ src/ --exclude=src/asxxxx/ || fail
manual_build=(
    #   Top-level programs whose build is not triggered by automated tests.
    src/asl/nomacro.a65         # Test/demo for ASL macro expansion
    src/a2/misc.a65
    src/fm7/fm7.a69
    #   This feels like it should be better automated.
    exe/*/*.[aiz][0-9][0-9]
    exe/*/*/*.[aiz][0-9][0-9]
)
t8dev asl asm "${manual_build[@]}" || fail
command popd >/dev/null

#####################################################################
#   Binary output generation
#
#   Various other builds of things from .p files.
#   Not yet figured out how this should be integrated into t8dev.

#   This converts .p files for things from exe/ to an appropriate binary
#   output file using the command given. Parameters are:
#   • The extension to give the output file. If the extension is all
#     upper-case letters the output filename will be converted to entirely
#     upper case.
#   • The program and its fixed parameters/options. This must be quoted
#     when passed; it will be used unquoted to let the shell separate the
#     command and its parameters.
#   • The path of the .p file, relative to .build/obj/exe/. This is also
#     used unquoted to permit you to pass in */?/etc. patterns (which you
#     must quote) that will be expanded by this function, with the command
#     applied to every file in the list.
exebin() {
    local ext="$1"; shift
    local prog="$1"; shift

    local caseconv=cat              # default: no filename case conversion
    #   If $ext is all upper case, convert filename to upper case, too.
    [[ $ext == $(echo "$ext" | tr a-z A-Z) ]] && caseconv='tr a-z A-Z'

    (   cd "$BUILDDIR/obj/exe"
        for obj in $@; do           # unqoted so */?/etc. is expanded
           #echo prog=$prog ext=$ext obj=$obj
            local outname=$(echo "$(basename "$obj" .p).$ext" | $caseconv)
            $prog "$obj" "$(dirname "$obj")/$outname"
        done
    )
}

exebin com 'p2bin -q' 'cpm/*.p'
exebin bin 'p2bin -q'  nec/pc8001/exprom1.p
exebin CO  'p2bin -q'  kc85/m100/cotest.p
exebin CO  'p2b kc85'  kc85/m100/hello.p
exebin CO  'p2b kc85'  kc85/m100/tmon.p
exebin bin 'p2bin -q'  nec/tk85/portmon.p
exebin bin 'p2bin -q' 'sbc/sd-sbc200/*.p'
#   Sharp MZ object files contain the tape header already, so directly
#   generate the .mzf file from it. This will change when we write a
#   conversion program that generates the tape headers and output from
#   the .p file.
exebin mzf 'p2bin -q' 'sharp/*.p'
exebin wav 'cmtconv -p jr200  -f HELLO'          jr200/hello.p
exebin wav 'cmtconv -p mb6885 -f HELLO.B'        mb6885/hello.p
exebin bin 'cmtconv -p mb6885 -f HELLO.B -o cas' mb6885/hello.p



#   XXX This doesn't work with exebin() becuase it uses stdout redirection.
p2a2bin $BUILDDIR/obj/exe/vcs/frobecho.p >$BUILDDIR/obj/exe/vcs/frobecho.obj0

#   Hack to make emulator use easier. VirtualT File » Load from HD always
#   starts in the emulator dir, regardless of where you last left it.
exeobj="$BUILDDIR/obj/exe"
mkdir -p $BUILDDIR/emulator/virtualt
cp $exeobj/kc85/m100/*.CO $BUILDDIR/emulator/virtualt/

#   This builds an Apple II disk image from an AS source file. Probably
#   this should be in smaller steps so we can extend the idea to building
#   output for other microcomputers where we may want, e.g., a raw file
#   for an emulator, a tape image with that file, and a disk image with
#   that file that autoboots, all from the same build.
t8dev a2dsk exe/a2/charset.a65      # path relative to .build/

####################################################################
#   Tests

noargs=false
[[ $# -eq 0 ]] && noargs=true

#   Unit Tests
#   • If we are given no options, add `-nlogical` to run things more
#     efficiently with pytest-xdist. (Using logical cores rather than
#     physical cores is actually just marginally slower on old 2-core/
#     4-thread machines, but it's not worth trying to encode this special
#     case when most modern machines are faster using all logical cores.)
#   • With args, the developer should specify an appropriate `-n` option
#     based on the number of tests he's running.
#   • Really, we should be checking for a `-n` argument here, and only
#     supplying our own if it's not supplied.
#
[ $# -eq 0 ] && set -- -nlogical
t8dev pytest --dist worksteal "$@" || fail

#   r8format functional tests are run only if we ran all unit tests. (This
#   is not the best way to avoid running them when unwanted, but it's a
#   convenient hack for the moment. (We really need to move these to pytest
#   tests.) These also produce a few lines of output even in quiet mode,
#   but this is a reminder to fix this.
$noargs && {
    #   We run them in quiet mode here, but if they fail you want
    #   to do this manually without the -q.
    $T8_PROJDIR/t8dev/r8format/Functest -q \
        || die $? "FAILED: r8format/Funcest (exitcode=$?)"
} || true

####################################################################
#   Build Release Files

(   command cd "$T8_PROJDIR"
    reldir=.build/release/unpacked
    buildexe=.build/obj/exe
    rm    -rf $reldir/ .build/release/*.zip

    mkdir -p  $reldir/tmon/{cpm,m100,sd-sbc200}/
    cp src/tmon/*.md                            $reldir/tmon/
    cp .build/obj/exe/cpm/tmonlo.com            $reldir/tmon/cpm/TMONLO.COM
    cp .build/obj/exe/kc85/m100/TMON.CO         $reldir/tmon/m100/
    #   SD-SBC200: Include hello to test ROM/RAM layout; README for links
    #   to hardware info.
    cp  exe/sbc/sd-sbc200/README.md \
        $buildexe/sbc/sd-sbc200/hello.{bin,lst} \
        $buildexe/sbc/sd-sbc200/tmon.{bin,lst}   $reldir/tmon/sd-sbc200/

    mkdir -p  $reldir/pc8001/
    cp exe/nec/pc8001/README.md .build/obj/exe/nec/pc8001/exprom1.bin \
        $reldir/pc8001/

    command cd .build/release/unpacked/
    zip -q -r ../8bitdev-$(date "+%s").zip .
)


####################################################################
#   Post-test emulator run

post_emulate_run() {
    #   This expects that $post_emulate will be set to the path of
    #   a file under .build/ (relative path) to run in an emulator,
    #   or empty to indicate there's nothing to run.
    #   • The API can surely be expanded to allow other ways of saying
    #     what you want to run, but what sort of forms of this are
    #     convenient needs to be worked out. But in particular we need
    #     to work out how to specify an emulator when there are multiple
    #     choices for a particular program, e.g., RunCPM vs. C128 CP/M.
    #   • This function should probably eventually move to t8setup.bash,
    #     to be defined there for use by clients.
    [[ -n $post_emulate ]] || return 0

    #   Currently accept just paths.
    [[ -r $post_emulate ]] || die 2 "Cannot read: $post_emulate"
    sub_path=${post_emulate#*/exe/}
    emu_suite=${sub_path%%/*}
    case "$emu_suite" in
        tmc)
            emulator=${sub_path#*/}
            emulator=${emulator%%/*}
            tmc "$emulator" "$post_emulate" || fail
            ;;
        cpm)
            #   We should support multiple CP/M emulators here, but for the
            #   moment we are hardcoded to RunCPM. Also, there's currently
            #   no way to specify additional files to be added to the
            #   "disk" containing the .COM file, or specify that the
            #   first entry should not be auto-run.
            t8dev emulator runcpm -a "$post_emulate"
            ;;
        nec)
            emulator=${sub_path#*/}     # All 'nec' is done with CSCP
            emulator=${emulator%%/*}    #   emulator suite.
            case "$emulator" in
                pc8001)
                    #   Currently assumes that the path given is for the
                    #   extension ROM. Note that the emulator is running
                    #   under WINE which makes focus odd: you need to pass
                    #   the pointer through the menu bar.
                    patchspec="N80.ROM=@6000:$post_emulate"
                    ;;
                tk85)
                    #   We can load only ROM with command-line arguments,
                    #   and even there just $000-$7FF and $0C00-$7BFF. For
                    #   the moment, just assume that the .bin file is a
                    #   straight p2bin of the .p file, and get the start
                    #   address from the .p. And also assume it's in the
                    #   $0C00-$7BFF range of EXT.ROM.
                    start_addr=$(plist "${post_emulate/.bin/.p}" \
                        | awk '/CODE/ { print $3; exit }')
                    #   Subtract EXT.ROM start and hexify result.
                    start_addr=$(printf "%X" $((0x$start_addr - 0xC00)))
                    patchspec="EXT.ROM=@$start_addr:$post_emulate"
            esac
            t8dev emu cscp "$emulator" "$patchspec"
            ;;
        mb6885)
            (   cd $T8_PROJDIR/.build/obj/exe/mb6885/
                #   ROMs in srec files `b000-e7ff.s` and `f000-ffff.s`.
                #   Tape: bmtape2 .bin format in noname.bin, maybe?
                $T8_PROJDIR/.build/tool/bin/bm2 \
                   -rom_dir=. -display=g
            )
            ;;
        kc85)
            #   No command line options for anything here. We should probably
            #   mod VirtualT to take a command line option to automatically
            #   do the File » Load file from HD menu item on the given file.
            mkdir -p .build/emulator/virtualt/
            cp "$post_emulate" .build/emulator/virtualt/
            t8dev emulator virtualt
            ;;
        *)
            die 2 "Unknown emulator suite: $emu_suite"
            ;;
    esac
}

post_emulate_run

####################################################################

echo "OK ($(elapsed)s)"
