from    testmc.m6502  import *
import  pytest

object_file = 'src/m65/stdtest.p'

pytest.register_assert_rewrite('stdtest')
from stdtest import (
    test_LB_MB                  as test_LB_MB,
    test_ds_db_dw               as test_ds_db_dw_6502,
    )

def test_zds(m, S):
    #   The initial value of __ZDS_loc at the zdstest0 label.
    #   This value $10 assumes that zdstest1 is the first ZDS in this assembly.
    zloc = 0x10

    assert 0xFF        < S.zdstest0
    assert 0xFF       >= S.zdstest1
    assert zloc       == S.zdstest1
    assert 0xFF       >= S.zdstest2
    assert zloc+3     == S.zdstest2
    assert 0xFF        < S.zdstest3
    assert S.zdstest3 == S.zdstest0 + 1     # Original location ctr. preserved

@pytest.mark.parametrize('input, expected', (
    (0x0000, 0x0001),
    (0x1234, 0x1235),
    (0x00FE, 0x00FF),
    (0x00FF, 0x0100),
    (0xFF00, 0xFF01),
    (0xFFFF, 0x0000),
))
def test_incw(m, R, input, expected):
    incw = m.symtab.incwtest
    data = m.symtab.incwdata
    r    = R(a=0x12, x=0x34, y=0x56)

    m.depword(data, input)
    m.call(incw, r)
    assert r == m.regs
    assert expected == m.word(data)

@pytest.mark.parametrize('inp, exp', (
    (0x1F9, 0x1FC), (0x1FA, 0x1FC), (0x1FB, 0x1FC), (0x1FC, 0x1FC),
    (0x1FD, 0x200), (0x1FE, 0x200), (0x1FF, 0x200), (0x200, 0x200),
    (0xFFFF, 0x0000), (0x0000, 0x0000),
))
def test_dwalign(m, R, inp, exp):
    dwaligntest, data = m.symtab.dwaligntest, m.symtab.dwaladdr
    preservedregs = R(x=87, y=65)
    m.depword(data, inp)
    m.call(dwaligntest, preservedregs)
    assert           exp == m.word(data)
    assert preservedregs == m.regs
