; ----------------------------------------------------------------------
;   qhex - hexadecimal number parsing and related routines
; ----------------------------------------------------------------------

; ----------------------------------------------------------------------
;   Parse up to A (1-4) ASCII hex digits at X, Z=1 on success.
;   ♠X,qhex_out  ♣AB,qhex_len
;
;   Input:
;   - X: the start of the text to be parsed.
;   - B: 1-4, the maximum number of digits to parse
;   Temps:
;   - qhex_len
;   Output:
;   - X: the first char that failed to parse
;   - Z flag: set (BEQ) if ≥1 digit successfully parsed; clear (BNE) otherwise
;   - qhex_out: the parsed hex number, or $0000 on failure to parse any digits
;
;   No locations benefit significantly from being in the zero page.
;
;   2-3 bytes of code and some complexity can be saved by using a memory
;   location to store the max digit count, but it's better not to require
;   the caller to co-ordinate the memory usage, especially in systems with
;   minimal RAM.

qhexword    lda B,#4            ; parse up to 4 digits
            bra qhex

qhexbyte    lda B,#2
            ;   fallthrough

qhex        clr qhex_out        ; current result: $0000
            clr qhex_out+1
            asl B               ; remaining max digit count in B[7‥3]
            asl B
            asl B
            ;   A non-zero value in B[2‥0] indicates no digits were read.
            ;   (The shift loop below reduces this to 0.) Additionally,
            ;   we must here not set any bits not in the shift count below,
            ;   or they will be added to the shift count.
            ora B,#4

.nextchar   lda A,,X
            bsr qdigit
            bmi .exit           ; bad digit, return
            cmp A,#$0F+1
            bcc .exit           ; digit in base >16
            inx                 ; consume this character
            asl A               ; shift value to upper nybble
            asl A
            asl A
            asl A
            ora B,#4            ; set rotate count in B[2‥0]
.shiftin    asl A               ; upper bit to carry
            rol qhex_out+1      ; low bit into LSB
            rol qhex_out        ; high bit into MSB
            dec B
            bit B,#%111         ; test remaining count in bits 2‥0
            bne .shiftin        ; not yet 0, shift remaining bits
            ;   B[2‥0] is now %000, showing that we've read a digit.
            sub B,#(1<<3)       ; decremnt max digit count
            bne .nextchar       ; if not 0, try to parse another digit

.exit       bit B,#%111         ; set Z flag: B[2‥0] will be 0 if we consumed
            rts                 ;   at least one char

; ----------------------------------------------------------------------
;   ♠A ♡BX Convert ASCII character to binary number in bases up to 41.
;   Returns N flag clear and binary digit in A, or N set on error.
;
;   This translates A-Z[\]^_ and a-z{|}~DEL as 10, 11...40. The caller
;   must check the returned value if the intended base was less than 41.

qdigit      cmp A,#'9'+1
            bcc .letter         ; >9, convert letter
            sub A,#'0'          ; convert digit, N set if <0
            rts
.letter
            and A,#%11011111    ; clear bit 5 to convert to upper-case
            bmi .exit           ; high bit set, error
            sub A,#'A'-$0A
            cmp A,#$0A          ; set N if < $0A
.exit       rts

;   ♠A ♡BX Convert ASCII hex digit in A to binary. Returns:
;   • Good digit: N flag clear and binary digit in A
;   • Bad  digit: N flag set and A destroyed
qhexdigit   bsr qdigit
            bmi .rts            ; covers non-digit/non-alpha errors
            ;   We know we're in the range 0-40 ($00-$28), thus subtracting
            ;   $80 would always give a negative result. Subtracting
            ;   another $10 would roll over and make the result positive
            ;   again if the original value had been $00-$0F. So we can use
            ;   CMP to clear the N flag for $00-$0F, and set it for $10-$7F.
            cmp A,#$80+$10      ; did it convert a hex digit?
.rts        rts
