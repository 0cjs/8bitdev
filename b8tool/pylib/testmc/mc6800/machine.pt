from    testmc.mc6800  import *
from    testmc  import LB, MB
import  pytest

@pytest.fixture
def m():
    return Machine()

R = Machine.Registers

####################################################################

def test_super_init(m):
    assert 0 == len(m.symtab)

####################################################################
#   Registers

def test_mem(m):
    assert 65536 == len(m.mem)
    assert 0 == m.mem[0]
    assert 0 == m.mem[65535]

def test_regs(m):
    r0 = R(pc=0, a=0, b=0, x=0, sp=0xBFFF, H=0, I=0, N=0, Z=0, V=0, C=0)
    assert r0 == m.regs

    m.setregs(R(b=0xF0, x=0xF000, sp=0x8000))
    assert (0, 0xF0, 0xF000, 0x8000) == (m.pc, m.b, m.x, m.sp)

    with pytest.raises(ValueError):  m.setregs(R(pc=0x10000))
    with pytest.raises(ValueError):  m.setregs(R(a=0x100))

def test_flags(m):
    assert R(H=0, I=0, N=0, Z=0, V=0, C=0) == m.regs

    m.setregs(R(I=1, V=1))
    assert R(H=0, I=1, N=0, Z=0, V=1, C=0) == m.regs

def test_cc(m):
    r = R(H=0, I=1, N=0, Z=1, V=0, C=1);
    assert 0b11010101 == r.cc

    r = R(cc=0b00101010)
    assert R(H=1, I=0, N=1, Z=0, V=1, C=0) == r
    assert 0b00101010 == r.cc   # we are allowed to make top two bits invalid

    r = r.clone()
    assert 0b11101010 == r.cc   # new properly sets top two bits from flags

####################################################################
#   Instruction Execution

#######################################
#   step

@pytest.mark.parametrize('opcode', [ 0x19, 0x3E, ])   # DAA, WAI
def test_step_notimplemented(m, opcode):
    ''' This can be removed, along with the exception itself, when all
        opcodes are implemented.
    '''
    m.deposit(0x100, [I.NOP, opcode])
    m.setregs(R(pc=0x100))
    with pytest.raises(Machine.NotImplementedError) as ex:
        m.step(2)
    assert ex.match(r'^opcode=\${:02X} pc=\$0101$'.format(opcode))

@pytest.mark.parametrize('opcode', [
    0x00, 0x02, 0x05, 0xFD,     # representative sample
])
def test_step_invalid(m, opcode):
    m.deposit(0x103, [I.NOP, opcode])
    m.setregs(R(pc=0x103))
    with pytest.raises(Machine.InvalidOpcode) as ex:
        m.step(2)
    assert ex.match(r'^op=\${:02X},.*pc=0104 '.format(opcode))

def test_step_invalid_FFFF(m):
    ' Ensure PC is correct when bad opcode executed at $FFFF. '
    m.deposit(0xFFFF, [0x05])
    m.setregs(R(pc=0xFFFF))
    with pytest.raises(Machine.InvalidOpcode) as ex:
        m.step(1)
    assert ex.match(r'^op=\$05,.*pc=FFFF ')

def test_step(m):
    ''' Smoke test; the detailed work of instruction execution is covered
        by the mc6800.opcodes tests, which also use step().
    '''
    start = 0x200
    m.deposit(start, [I.NOP] * 4)
    m.setregs(R(pc=start))

    m.step();   assert R(pc=start+1) == m.regs
    m.step(2);  assert R(pc=start+3) == m.regs
    m.step();   assert R(pc=start+4) == m.regs

#######################################
#   getsp/pushretaddr/getretaddr

def test_getsp_pushretaddr_getretaddr(m):
    ''' Use RTS to confirm we correctly push and read a return address on
        the stack.
    '''
    m.setregs(R(pc=0x1234, sp=0x5678))
    assert 0x5678 == m._getsp()
    m.pushretaddr(0xABCD)
    assert (0x5676, R(sp=0x5676)) == (m._getsp(), m.regs)
    retaddr = m.getretaddr()

    m.deposit(0x1234, I.RTS)
    m.step()
    assert (0xABCD, R(pc=0xABCD))  == (retaddr, m.regs)

#######################################
#   call()

@pytest.mark.parametrize('opcode, stopon', [
    (0x00, None),               # default abort opcode
    (0x08, 0x08),               # scalar stopon argument
    (0x29, [0x28, 0x29, 0x30]), # collection stopon arguments
    (I.RTS, I.RTS),
])
def test_call_abort(m, opcode, stopon):
    p = 0x201
    with pytest.raises(m.Abort) as ex:
        m.deposit(p, [opcode])
        m.call(p, stopon=stopon, trace=1)
    assert R(pc=p) == m.regs
    assert ex.match(r'Abort on opcode=\${:02X}: '.format(opcode))

def test_call_rts_registers(m):
    p = 0x202
    defaultsp = m.regs.sp

    m.deposit(p, [I.RTS])
    m.call(p, R(pc=0x0000, a=0x55, C=1))
    assert R(pc=p, sp=defaultsp, a=0x55, C=1) == m.regs, '''
        Expected:
        - addr argument _p_ overrides PC in register settings
        - stack restored to original address on successful exit, but
        - RTS not executed
        '''

    testsp = 0x8123
    m.deposit(p, [I.NOP, I.NOP, I.RTS])
    m.call(p, R(pc=0xFFFF, sp=testsp, a=0xAA, C=0))
    assert R(pc=p+2, sp=testsp, a=0xAA, C=0) == m.regs, \
        'expected testsp used, NOPs but not RTS executed'

def test_call_shallow(m):
    p = 0x203

    m.deposit(p, [I.BSR, 0x01, I.RTS, I.LDAA, 0x55, I.RTS])
    m.call(p, R(a=0xAA), trace=1)
    assert R(pc=p+2, a=0x55) == m.regs

    m.deposit(p, [I.JSR, MB(p+4), LB(p+4), I.RTS, I.LDAA, 0x66, I.RTS])
    m.call(p, R(a=0xAA), trace=1)
    assert R(pc=p+3, a=0x66) == m.regs

def test_call_deep(m):
    p = 0x204
    m.deposit(p, [                  # after top-level call:
        I.JSR, MB(p+9), LB(p+9),    #   a=1 b=1
        I.BSR, 0x00,    # 03:               b=3
        I.BSR, 0x00,    # 05:               b=4
        I.BRA, 0x01,    # 07:
        I.INCA,         # 09:
        I.INCB,         # 0A:               b=5
        I.RTS           # 0B:
        ])
    m.call(p, R(a=0, b=0), trace=1)
    assert R(pc=p+0x0B, a=1, b=5) == m.regs

def test_call_pull(m):
    p   = 0x205
    m.deposit(p, [
        I.BSR, 0,                   # 0205: push next addr as return addr
        I.INCA,                     # 0207:
        I.PULB,                     # 0208: remove return addr 408 MSB
        I.PULB,                     # 0209: remove return addr 408 LSB
        I.RTS,                      # 020A: return to call()
        ])
    m.call(p, R(a=0xAE), trace=1)
    print(m.hexdump(m.regs.sp-3, 8))
    assert R(pc=p+5, a=0xAF) == m.regs, 'INCA should have executed only once'

def test_call_push(m):
    p   = 0x206
    cont = 0x20d            # Address of continuation below
    m.deposit(p, [
        I.LDAA, LB(cont),   # 0206: put continuation addr on stack
        I.PSHA,             # 0208:
        I.LDAA, MB(cont),   # 0209:
        I.PSHA,             # 020b:
        I.RTS,              # 020C: jump to continuation below
        I.LDAA, 0xA5,       # 020d: continuation
        I.RTS,              # 020E: return to call()
        ])
    m.call(p, trace=1)
    assert R(pc=cont+2, a=0xA5) == m.regs

def test_call_changedstack(m):
    ''' Copy the RTS address set by `call()` to another address in the
        stack and confirm execution stops when we RTS to that address with
        the stack at that new address, throwing an exception indicating the
        inconsistency.
    '''
    p = 0x207
    isp = 0x3007                # initial stack pointer
    m.deposit(p, [
        I.TSX,                  # 0207: X points to word on top of stack
        I.LDAAx, 1, I.PSHA,     # 0208: return addr LSB
        I.LDAAx, 0, I.PSHA,     # 020B: return addr MSB
        I.RTS,                  # 020E: return to call() w/new stack ptr
        ])
    with pytest.raises(m.UnexpectedCallStack) as ex:
        m.call(p, R(sp=isp), trace=1)
    print(ex); print(m.hexdump(isp-5, 7))
    assert bytes([0x00, 0xFF, 0xFd, 0xFF, 0xFd, 0x00]) == m.bytes(isp-4, 6), '''
        Stack should contain two copies of the address for RTS with
        guard bytes $00 (never-written data) on either side. '''
    assert R(pc=0x20E, sp=isp-4) == m.regs, '''
        Should have stopped on RTS with unpopped stack pointing to
        the pushed copy of the address for RTS. '''
    assert ex.match('initsp=3005 sp=3003 retaddr=FFFD spretaddr=FFFD')

def test_call_changedretaddr(m):
    ''' Change the RTS address set by `call()` and confirm execution stops
        when we RTS with the stack stack at that point, throwing an
        exception indicating the inconsistency.
    '''
    p = 0x208
    isp = 0x3008        # initial stack pointer
    m.deposit(p, [
        I.TSX,          # 0208: X points to word on top of stack
        I.CLRx, 0,      # 0209: return addr MSB
        I.CLRx, 1,      # 020B: return addr LSB
        I.RTS,          # 020D: return to call() w/wrong ret addr
        ])
    with pytest.raises(m.UnexpectedCallStack) as ex:
        m.call(p, R(sp=isp), retaddr=0x01F2, trace=1)
    print(m.hexdump(isp-4, 6))
    assert bytes([0,0]) == m.bytes(isp-3, 2), 'changed RTS addr at top of stack'
    assert R(pc=0x20D, sp=isp-2) == m.regs
    assert ex.match('initsp=3006 sp=3006 retaddr=01F2 spretaddr=0000'), '''
        Should be:
        - initsp: isp - 2 for return addr placed by call()
        - sp: same as initsp
        - retaddr: as specified in call() arguments
        - spretaddr: as modified by code under test
    '''

#######################################
#   call() generic tests
#   These need be run on only one CPU implementation
#   as they do not depend on machine-specific code.

def test_call_stopat(m):
    p = 0x280
    isp = m.sp
    m.deposit(p, [ I.NOP, I.NOP, I.NOP, I.NOP, I.RTS ])
    m.call(p, stopat=[0x300, p+2, 0x200])
   #print(m.hexdump(isp-3, 4), m.regs)
    assert R(pc=p+2, sp=isp-2) == m.regs, '''
        Should be:
        - stopped at correct address
        - stack left as it was when it stopped
    '''

@pytest.mark.parametrize('maxsteps, a', [
    (0, 0), (1, 0), (3, 0),
    (4, 1), (6, 1), (8, 1),
    (9, 2), (28, 5),
])
def test_call_maxsteps(m, maxsteps, a):
    p = 0x284
    ral = m.sp - 2      # LSB of stacked return address used by RTS below
    m.deposit(p, [
        I.BSR, 0,                   # 0284: push 0222 on stack
        I.DECm, MB(ral), LB(ral),   # 0286: decrement RTS addr on stack to 0221
        I.DECm, MB(ral), LB(ral),   # 0289: decrement RTS addr on stack to 0220
        I.INCA,                     # 028C:
        I.RTS,                      # 028d: infinite loop
        ])
    with pytest.raises(m.Timeout) as ex:
        m.call(p, R(a=0), maxsteps=maxsteps, trace=1)
    print(m.hexdump(ral-3, 8))
    assert R(a=a) == m.regs
    assert ex.match('Timeout after {} opcodes: .* opcode=.*'.format(maxsteps))

####################################################################
#   Tracing and similar information

@pytest.mark.parametrize('ops, disasm', (
    ([0x00],                    'FCB $00'),     # invalid instruction
    ([0xFD],                    'FCB $FD'),     # invalid instruction
    ([I.LDAA,   0xFD],          'LDAA #$FD'),
    ([I.LDAAm,  0x00, 0x0A],    'LDAA $000A'),
    ([I.LDAAz,  0x03],          'LDAA $03'),
    ([I.LDABx,  0xCD],          'LDAB $CD,X'),
    ([I.BRA,    0xF8],          'BRA $009A'),   # depends on start addr below
    ([I.JMP,    0x00, 0x0A],    'JMP $000A'),
    ([I.PSHB,   ],              'PSHB'),
    ([I.NOP,    ],              'NOP'),
))
def test_disasm(m, ops, disasm):
    start = ops[0] + 0x80   # pseudo-random start address
    m.deposit(start, ops)
    m.setregs(R(pc=start))
    assert disasm == m.disasm()

@pytest.mark.xfail(strict=True, reason='Unimplemented feature')
def test_disasm_symtab():
    ''' We should be able to have the disassembly function look up addresses
       in `self.symtab` and, if present there, print the symbolic name
       rather than the raw address.
    '''
    assert 0
