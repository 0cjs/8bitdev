;
;   std.a68 - Standard 6800 definitions
;
;   These are some standard definitions (mainly macros) we commonly
;   use with source code assembled with the Macro Assembler AS.
;
;   The CPU must be specified with the `CPU` pseudo-op before this
;   file is included; that allows this file to use MOMCPU/MOMCPUNAME
;   to change its behaviour for different 6800 variants.
;

;   In general, we use {NOEXPAND} on macros that do not generate code in
;   order to keep the listing clean. However, for macros that do generate
;   code we do not use it so that we can see the code that was generated;
;   without this one sees just a (MACRO) line followed by the address after
;   the macro, which can be a bit confusing.

;--------------------------------------------------------------------------
;   Machine vectors

mvec_IRQ    equ $FFF8
mvec_SWI    equ $FFFA
mvec_NMI    equ $FFFC
mvec_RESET  equ $FFFE

;--------------------------------------------------------------------------
;   LB(), MB(): Low and middle bytes of an assembler value
;   These are the same on every architecture (so yes, code duplication).

LB          function addr,(addr & $FF)
MB          function addr,((addr & $FF00) >> 8)

;--------------------------------------------------------------------------
;   Constant definition and storage allocation.
;   • We use the Intel DS/DB/DW syntax everywhere to allow us to use the
;     same data files with different processor families.
;   • Unfortunately, this currently uses the native duplication syntax,
;     i.e. a prefixed bracketed count `[8]$FF` on 6502.

ds          macro {NOEXPAND}
            rmb ALLARGS
            endm
db          macro
            byt ALLARGS
            endm
dw          macro
            fdb ALLARGS
            endm
