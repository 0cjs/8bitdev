;   Simple 6502 routines to test with Macro Assembler AS

            cpu 6502
            include "src/std.a65"

ident       byt "simple-asl.a65"    ; we use this to check that we've loaded
                                    ; the correct binary data and symbol table.

;       Temporary symbol demonstrations
tempsyms    nop     ; tempsyms
.foo        nop     ; tempsyms.foo
$$named     nop     ; named8
.foo        nop     ; named8.foo
-           nop     ; __back0
/           nop     ; __forw0
+           nop     ; __forw1
.foo2       nop     ; named8.foo (as of bld152 __back#/__forw# definitions
                    ;   no longer start a new scope for dotted vars)
            rts
tempsyms_end

;       Section demonstrations
foo         nop                 ; global    foo
    section sec1                ; level 1   :sec1:
foo         nop                 ;           :sec1:foo
bar         nop                 ;           :sec1:bar
      section sec2              ; level 2   :sec1:sec2:
foo         nop                 ;           :sec1:sec2:foo
            public bar          ;           bar         (not bar[2], bar[sec2])
bar         nop
            public baz:parent   ;           :sec1:baz   (not baz[sec2])
baz         nop
        section sec2            ; level 3   :sec1:sec2:sec2:
foo         nop                 ;           :sec1:sec2:sec2:foo
        endsection sec2
      endsection sec2
quux        nop                 ;           :sec1:quux
    endsection sec1
    section sec2                ; level 1   :sec2
foo         nop                 ;           :sec2:foo
    endsection sec2

;--------------------------------------------------------------------------
;   BRK opcode generation and workarounds

;   The standard BRK mnemonic assembles to $00 $EA (i.e., a NOP is added
;   following the BRK). This is intentional behaviour, though there's just
;   been some discussion about it on the list, as of 2020-01-10.

;   It can be worked around by redefining BRK as a macro:

brk         macro   arg=-1,{NOEXPIF}
            byt $00     ; BRK opcode
        if arg >= 0
            byt arg     ; optional "argument" after BRK opcode
        endif
            endm

testbrk     brk
            byt $FF     ; sentinel

testbrkarg  brk $38
            byt $FE     ; sentinel

;--------------------------------------------------------------------------
;   std.a65 test code

;   DS/DB/DW
defalloctest
dstest0     ds  3
dstest1     ds  1
dbtest      db  $00,"abc",[2]$FF
dwtest      dw  $ABCD

;   ZDS
zdstest0    db  $F0     ; byte at current location
zdstest1    zds 3       ; zero page allocation
zdstest2    zds 2       ; zero page allocation
zdstest3    db  $F3     ; byte at current location +1

;   INCW
incwtest    clv
            bvs .incwtemp   ; show that composed temps can cross macro
.nocarry    incw incwdata   ; show no collision w/macro-internal .nocarry
.incwtemp
            rts
incwdata    zds 2

;--------------------------------------------------------------------------
;   Add X and Y, storing the result in xybuf and returning it in A
addxy       txa
            sty xybuf
            clc
            adc xybuf
            sta xybuf
            rts
xybuf       ds  1

;--------------------------------------------------------------------------
;           Clear an area. fillptr₁=startaddr-1, Y=length.
fill        lda #0
/           sta (fillbase),y
            dey
            bne -
            rts
fillbase    zds 2

;--------------------------------------------------------------------------
;           Demonstrate use of "negative offset" indexing

LSB         function addr,(addr & $FF)
MSB         function addr,((addr & $FF00) >> 8)

;   negoff - calculate base address for use of index reg with negative offset
;
;   This must be given the END address of the array. You can then load the
;   index register with -(len(data)) and iterate forward across the data
;   with INX/INY; when it reaches 0 you are done.
;
negoff      function end,(end-$100)

negoffcalc  ;   store calculated address for test/debug
            lda #LSB(negoff(no_data_end))
            sta no_dbgaddr
            lda #MSB(negoff(no_data_end))
            sta no_dbgaddr+1
            rts

negoffdemo
            ldx #-6         ; length of no_data must be 6
.loop       inc negoff(no_data_end),x
            inx
            bne .loop
            rts

no_dbgaddr  ds  2           ; read by unit test
            db  $E0         ; guard byte
no_data     db  "0a5g8s"
no_data_end
            db  $E1         ; guard byte
