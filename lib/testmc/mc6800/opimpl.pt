''' Unit tests for utility routines in the opimpl module.

    The opcodes themselves are tested in the `opcodes` module tests
    because they need to cover the opcode/instruction mappings as
    well as the implementations.
'''

import  pytest
from    testmc.mc6800  import Machine
from    testmc.mc6800.opimpl  import (
    isnegative, iszero, incword, popword,
    )


def test_isnegative():
    assert not isnegative(0)
    assert not isnegative(0x7F)
    assert     isnegative(0x80)
    assert     isnegative(0xFF)

def test_iszero():
    assert     iszero(0)
    assert not iszero(1)
    assert not iszero(0xFF)

@pytest.mark.parametrize(
    'initial, addend, expected', (
    (      0,      0,        0),
    (      0,      1,        1),
    (      0,      2,        2),
    ( 0xFFFE,      1,   0xFFFF),
    ( 0xFFFE,      2,   0x0000),
    ( 0xFFFE,      3,   0x0001),
    (      1,     -1,        0),
    (      1,     -2,   0xFFFF),
    (      1,     -3,   0xFFFE),
    ( 0x8000, 0xFFFF,   0x7FFF),
    ( 0x8000,-0xFFFF,   0x8001),
))
def test_incword(initial, addend, expected):
    assert expected == incword(initial, addend)

@pytest.mark.parametrize(
    'initsp,    word,  newsp', (
    (     0,  0x4142,      2),
    (     1,  0x4243,      3),
    (0xFFFD,  0xCECF, 0xFFFF),
    (0xFFFE,  0xCF40,      0),
    (0xFFFF,  0x4041,      1),
))
def test_popword(initsp, word, newsp):
    m = Machine()
    m.deposit(0x0000, b'\x40\x41\x42\x43')
    m.deposit(0xFFFC, b'\xCC\xCD\xCE\xCF')

    m.sp = initsp
    assert word == popword(m)
    assert newsp == m.sp
