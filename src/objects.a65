;   Some "objects" as described in objects.md


;   typedisp - dispatch based on type of object at location
;
;   If `obj` is a pointer, does nothing and returns with carry clear.
;
;   Otherwise the tags indicate the referenced object is not a pointer, in
;   which case the value is deconstructed into `obfmtid`/`oblen`, `char`, or
;   `smallint` and carry is set on return.
;
;   Least significant bits of LSB (first byte) determine type:
;     %00   pointer
;     %10   obdata
;     %01   number: byte/char
;     %11   number: smallint
;
;   The 6502 has no arithmetic shift right (ASR) instruction, so we have to
;   synthesise it with CMP #80 (which loads the high bit of the accumulator
;   into the carry flag) followed by ROR.
;
typedisp
            lda obj         ; format ID byte or LSB of tagged pointer
            cmp #$80        ; ASR, which helps later if it's a smallint
            ror             ; bit 0 → carry
            bcs .number     ; %x1: smallint or byte/char
            lsr             ; original bit 1 → carry
            bcs .obdata     ; %10: object data
            ;   tag=%00
            rts             ; %00: pointer; we're done
.obdata     ;   tag=%10
            lda obj         ; what we loaded has been destroyed, so reload
            sta obfmtid
            lda obj+1       ; obdata header length byte
            sta oblen
            rts
.number     ;   tag=%x1
            cmp #$80        ; ASR
            ror             ; original bit 1 → carry
            bcc .bytechar   ; %01: a byte/char
            ;   tag=%11
.smallint   ;   At this point the reference's LSB has been ASR'd twice,
            ;   which gives us the MSB of a smallint. Store the smallint
            ;   converted to native 16-bit format and endianness.
            sta smallint+1
            lda obj+1
            sta smallint
            rts
.bytechar   ;   tag=%10
            lda obj+1       ; load byte/char value
            sta char
            rts


;   object on which to do type dispatch
obj         ds      2       ; input object reference. not in ZP because
                            ;   we'd often be reading this from the heap
;   typedisp outputs
obfmtid     zds     1       ; obdata format ID
oblen       zds     1       ; obdata length
char        zds     1       ; char type
smallint    zds     2       ; smallint type
