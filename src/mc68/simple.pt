from    testmc.mc6800  import  Machine

object_files = 'src/mc68/simple.p'

def test_machine_type(m, R):
    ' Confirm the framework loaded the correct machine '
    print('Expected Machine =', Machine)
    assert Machine is type(m)

    #   Ensure we can set and read 6800 registers.
    m.setregs(R(b=13, x=0xABCD, H=True))
    assert R(a=0, b=13, x=0xABCD, H=1, I=0, N=0, Z=0, V=0, C=0)

def test_loaded_object_file(m, S, R):
    ' Confirm that the correct object file was loaded. '
    ident_str = b'mc68/simple.a68'
    assert ident_str == m.bytes(S.ident, len(ident_str))
    assert 0x180 == S.ident

    #   Asert loader set `pc` to entry point specified by END directive.
    assert R(pc=S.set_a_ff) == m.regs

def test_step(m, S, R):
    assert R(a=0) == m.regs
    m.setregs(R(pc=S.set_a_ff))
    m.step(1)
    assert R(a=0xFF) == m.regs

def test_call(m, S, R):
    assert R(a=0) == m.regs
    m.call(S.set_a_ff)
    assert R(a=0xFF) == m.regs

def test_spdemo(m, S, R):
    ' The behaviour checked here has been confirmed on a Panasonic JR-200. '
    def l(localsym):
        return S['spdemo.' + localsym]
    testsp = l('testsp')

    m.deposit(testsp-4, range(0xAC, 0xB2))
    m.call(S.spdemo)
    print(m.hexdump(testsp-4, 6))
    print(m.hexdump(l('save'), 6))

    assert (testsp,                l('retaddr')             ) \
        == (m.word(l('altstack')), m.word(l('stackval'))    )
