;   CRC-16-CCITT (x¹⁶+x¹²+x⁵+1) as used by Xmodem, etc.
;   This is essentially the same as the many Z80 implementations on the web.

;   ♠BCDEHL ♣AB   Checksum BC bytes starting at DE, returning checksum in HL.
;   On return, DE is updated to the next byte it would process and BC = 0.
;   The ckupd_* entry point updates an existing checksum in HL
;   with further data, instead of starting a new one.

cksum_crc_16_ccitt
            ld   hl,$FFFF       ; initialisation vector
            ; fallthrough

ckupd_crc_16_ccitt              ; assumes current checksum in HL
            ld   a,(de)         ; byte to checksum
            inc  de
            xor  a,h
            ld   h,a
            push bc
            ld   b,8            ; loop through 8 bits
.bit        add  hl,hl          ; shift current state left by 1
            jp   NC,.nextbit    ; if no high bit comes out the top...
            ld   a,h
            xor  a,MB(.polynomial) ; flip bit 12
            ld   h,a
            ld   a,l
            xor  a,LB(.polynomial) ; flip bits 5, 0
            ld   l,a
.nextbit    dec  b
            jp   NZ,.bit
            pop  bc             ; restore remaining length
            dec  bc
            ld   a,b
            or   a,c                    ; bc == 0 ?
            ret  Z                      ;   yes: we're done
            jp   ckupd_crc_16_ccitt     ;   no: continue

;   The polynomial, which does not include bit 16 = 1 for x¹⁶, is:
;
;       0001 0000 0010 0001
;          │        │     └ bit 0: x⁰ = 1
;          │        └ bit 5: x⁵
;          └ bit 12: x¹²
;
.polynomial equ  $1021
