from    testmc  import tmc_tid, LSB, MSB
from    testmc.mc6800  import  Machine, Instructions as I
import  pytest

object_file = 'src/simple-a68.p'

def test_machine_type(M, R):
    ' Confirm the framework loaded the correct machine '
    print('Expected Machine =', Machine)
    assert Machine is type(M)

    #   Ensure we can set and read 6800 registers.
    M.setregs(R(b=13, x=0xABCD, H=True))
    assert R(a=0, b=13, x=0xABCD, H=1, I=0, N=0, Z=0, V=0, C=0)

def test_loaded_object_file(M, S, R):
    ' Confirm that the correct object file was loaded. '
    ident_str = b'simple-a68.a68'
    assert ident_str == M.bytes(S.ident, len(ident_str))
    assert 0x180 == S.ident

    #   Asert loader set `pc` to entry point specified by END directive.
    assert R(pc=S.set_a_ff) == M.regs

def test_step(M, S, R):
    assert R(a=0) == M.regs
    M.setregs(R(pc=S.set_a_ff))
    M.step(1)
    assert R(a=0xFF) == M.regs

def test_call(M, S, R):
    assert R(a=0) == M.regs
    M.call(S.set_a_ff)
    assert R(a=0xFF) == M.regs

####################################################################

@pytest.mark.parametrize('val, char', (
    (0x00, '0'), (0x01, '1'), (0x0E, 'E'), (0x0F, 'F'),
    (0x10, '0'), (0xFF, 'F'),
), ids=tmc_tid)
def test_prnyb(M, S, R, val, char):
    M.deposit(S.charoutport, not val)
    M.call(S.prnyb, R(a=val))
    assert ord(char) == M.byte(S.charoutport)

@pytest.mark.parametrize('val, chars', (
    (0x00, b'00'), (0x0F, b'0F'), (0xA0, b'A0'), (0xFF, b'FF'),
), ids=tmc_tid)
def test_prhex(M, S, R, val, chars):
    _, outchars = M.setiostreams(S.charoutport)
    M.call(S.prhex, R(a=val))
    assert chars == outchars.getvalue()

####################################################################

def test_rdchar(M, R, S):
    ' Mostly confirms that our test framework works. '
    chars = b'!\x00\x7F'
    inchars, _ = M.setiostreams(S.charinport, chars)
    for char in chars:
        M.call(S.rdchar, R(a=0xEA))
        assert R(a=char) == M.regs

    #   Document how an attempt to read past available input fails.
    with pytest.raises(EOFError) as ex:
        M.call(S.rdchar)
    assert ex.match('No more input available')

@pytest.mark.parametrize('buf, input', (
    (b'',                   b'\r'),
    (b'a',                  b'a\r'),
    (b'jklm',               b'j_\bk_\xFFl__\b\bm\r'),
    (b'',                   b'\b\xFF\b\r'),
    (b'ij',                 b'\b\xFFgh\b\b\b\bij\r'),
    (b'\x01\n\x1F\x7E',     b'\x01\x00\n\x00\x1F\x00\x7E\r'),
))
def test_rdline(M, R, S, input, buf):
    TERM = b'END'
    istream, ostream = M.setiostreams(S.charinport, input + TERM)
    M.deposit(S.rdlinebuf, b'\xA5'*40)
    M.call(S.rdline)

    assert R(x=S.rdlinebuf, C=0) == M.regs
    assert buf + b'\x00' == M.bytes(M.regs.x, len(buf)+1)

    assert TERM == istream.read(len(TERM))  # no unconsumed input

    def echo_of(readchars):
        out = []
        for i in readchars:
            if   i == 0:    pass                # NUL not echoed
            elif i == 0xFF: out.append(0x08)    # DEL echoes backspace
            else:           out.append(i)
        out.append(0x0A)                        # CR echos CR-LF newline
        return bytes(out)

    assert echo_of(input) == ostream.getvalue()

def test_rdline_ctrlC(M, R, S):
    istream, ostream = M.setiostreams(S.charinport, b'pqr\bqp\x03END')
    M.call(S.rdline)
    assert [ R(x=S.rdlinebuf, C=1), b'pqqp\x00'             ] \
        == [ M.regs,                M.bytes(M.regs.x, 5)    ]
    assert b'END' == istream.read(3)
    assert b'pqr\bqp\a\r\n' == ostream.getvalue()   # BEL char sent

def test_rdline_rubout_at_beginning(M, R, S):
    istream, ostream = M.setiostreams(S.charinport, b'\b\b\babc\b\r')

    #   Whatever happens to be just before the buffer may not be
    #   the best sentinel bytes, but we can't overwrite it because
    #   we don't know if something important might be there.
    prebuf = M.bytes(S.rdlinebuf - 4, 4)
    M.deposit(S.rdlinebuf, b'\xA5'*40)

    M.call(S.rdline)
    assert R(x=S.rdlinebuf, C=0) == M.regs
    assert prebuf + b'ab\x00' == M.bytes(M.regs.x - 4, 7)

def test_rdline_overflow(M, R, S):
    buflen = S.rdlinebuf_end - S.rdlinebuf
    bufinput = b'_' * (buflen - 3) + b'yz'
    istream, ostream = M.setiostreams(S.charinport, bufinput + b'AB\r')

    postbuf = M.bytes(S.rdlinebuf_end, 4)
    M.call(S.rdline)

    expected_buf = bufinput + b'\x00' + postbuf
    actual_buf   = M.bytes(M.regs.x, len(expected_buf))
    assert [ R(x=S.rdlinebuf, C=0), expected_buf,   ] \
        == [ M.regs,                actual_buf,     ]

    #   A BEL for each char rejected when the buffer was full.
    assert bufinput + b'\a\a\r\n' == ostream.getvalue()

####################################################################

pytest.register_assert_rewrite('bigint')
from bigint import (
    test_convascdigit_good as test_convascdigit_good_6800,
    test_convascdigit_good_exhaustive as test_convascdigit_good_exhaustive_6800,
    test_convascdigit_error as test_convascdigit_error_6800,
    test_convascdigit_error_exhaustive as test_convascdigit_error_exhaustive_6800,
    )

@pytest.mark.parametrize('testno, N, result, consumed, input', (
    ( 0,  1, 0xDEAD,  0, b''),
    ( 1,  1, 0xDEAD,  0, b'G'),
    ( 2,  1, 0xDEAD,  0, b'g'),
    ( 3,  0, 0x000F,  1, b'F'),
    ( 4,  0, 0x00A0,  2, b'A0'),
    ( 5,  0, 0x0B19,  3, b'B19'),
    ( 6,  0, 0x1234,  4, b'1234'),
    ( 7,  0, 0x0123,  4, b'01234'),
    ( 8,  0, 0xabcd,  4, b'aBcdE'),
), ids=tmc_tid)
def test_qhexword(M, S, R, testno, N, result, consumed, input):
    #   We re-use another routine's space.
    #   Change the address from test to test.
    buf = S.rdlinebuf + testno
    M.deposit(buf, input + b'\x00')
    print('buf=${:04X} {}'.format(buf, M.bytes(buf, len(input))), end='')
    M.depword(S.hexword, 0x9999)    # definitely not our output value

    M.call(S.qhexword, R(x=buf))
    hexword = M.word(S.hexword)
    print('\t\tX={:04X} N={} hexword=${:04X}'.format(M.x, M.N, hexword))

    assert R(x=buf+consumed) == M.regs
    assert R(N=N) == M.regs
    if N == 0: assert result == hexword

####################################################################

def test_cmdloop_quitcmd(M, S, R):
    ' Minimal path that gets us through to exit. '
    istream, ostream = M.setiostreams(S.charinport, b'Q\r')
    #   Because this plays tricks with the stack and RTS, we can't use
    #   call(). But we do have a single exit point, so we can stop there.
    M.setregs(R(pc=S.cmdloop))
    M.stepto(stopat=[S['cmdloop.rts']], stopon=[0x00], maxsteps=10000, trace=0)
    assert b'\r\n? Q\r\n' ==  ostream.getvalue()

def test_cmdloop_multicmd(M, S, R):
    ' Multiple command processing of the simplest possible commands. '
    istream, ostream = M.setiostreams(S.charinport, b'~~ ~Q\r')
    M.setregs(R(pc=S.cmdloop))
    M.stepto(stopat=[S['cmdloop.rts']], stopon=[0x00], maxsteps=10000)
    #   XXX This is ugly. Because the space processing jumps to cmdloop.rts,
    #   but uses it for return to .parse, we need to run again to finish
    #   the command line parsing.
    M.stepto(stopat=[S['cmdloop.rts']], stopon=[0x00], maxsteps=10000)
    assert b'\r\n? ~~ ~Q\r\n\x07\x07\x07' ==  ostream.getvalue()

def test_cmdloop_dump(M, S, R):
    istream, ostream = M.setiostreams(S.charinport, b'a800\r 3Q\r')
    M.deposit(0xA800, b'ABCDEFGH')

    M.setregs(R(pc=S.cmdloop))
    M.stepto(stopat=[S['cmdloop.rts']], stopon=[0x00])
    M.stepto(stopat=[S['cmdloop.rts']], stopon=[0x00])  # skip space

    print(M.regs, M.bytes(M.regs.sp-8, 8))
    output = ostream.getvalue()
    print(output)

    assert b'\r\nA800: 41 42 43 44 45 46 47 48\r\n' in output
    assert b'\r\n0003: ' in output

@pytest.mark.skip
def test_cmdloop_eachrts(M, S, R):
    ''' A (currently non-working) hack to do "selective trace," printing
        the current instruction, stack contents and buffer contents at a
        few points during execution.
    '''
    input = b'a800\r3Q\r'
    input = b'~ ~~Q\r'
    istream, ostream = M.setiostreams(S.charinport, input)
    M.deposit(0xA800, b'ABCDEFGH')

    stackbase = M.regs.sp + 1
    def showstack():
        return '{:02X}{:02X} {:02X}{:02X} {:02X}{:02X} {:02X}{:02X}' \
            .format(*M.bytes(stackbase-8, 8))

    M.setregs(R(pc=S.cmdloop))
    level = 0
    print('{}                {}'.format(M.regs, showstack()))
    while True:
        M.stepto(stopon=[I.JSR, I.BSR, I.RTS, I.PSHA],
            stopat=[ S['cmdloop.rts'], S['cmdloop.parse'] - 1 ])
        r = M.regs
        opcode = M.byte(r.pc)
        if   opcode == I.PSHA:
            level += 1
            inst = 'PSH'
            dest = S['cmdloop.parse']
        elif opcode == I.JSR:
            level += 1
            inst = 'JSR'
            dest = M.word(r.pc+1)
        elif opcode == I.BSR:
            level += 1
            inst = 'BSR'
            dest = r.pc + 2 + M.byte(r.pc+1)
        else:
            level -= 1
            inst = 'RTS'
            dest = 0
        print('{} {:3d} {} {:04X}   {}   {}'
            .format(r, level, inst, dest, showstack(), M.bytes(r.x, 6)))

    assert 0
