;   Some "objects" as described in objects.md


;   typedisp - dispatch based on type of object at location
;
;   If `obj` is a pointer or fixed constant, does nothing and returns with
;   carry clear, otherwise it returns with carry set and the value
;   deconstructed as shown below.
;
;   Least significant bits of LSB (first byte) determine type:
;     %00   pointer or fixed constant
;     %10   smallint: store value in `smallint`
;     %01   unused: store MSB in "unused"
;     %11   obdata: store format ID in `obfmtid` and length in `oblen`
;
;   The 6502 has no arithmetic shift right (ASR) instruction, so we have to
;   synthesise it with CMP #80 (which loads the high bit of the accumulator
;   into the carry flag) followed by ROR.
;
typedisp
            lda obj         ; format ID byte or LSB of tagged pointer
            cmp #$80        ; ASR setup: bit 7 → carry
            ror             ; ASR; bit 0 → carry
            bcs .tag_x1     ; if tag %x1
            cmp #$80        ; ASR setup: bit 7 → carry
            ror             ; ASR: original bit 1 → carry
            bcs .smallint   ; if tag %10
            rts             ; tag %00: carry clear
.tag_x1     ;   tags %01, %11
            lsr             ; original bit 1 → carry
            bcc .unused     ; if %01
.obdata     ;   tag %11: obdata
            lda obj         ; what we loaded has been destroyed, so reload
            sta obfmtid
            lda obj+1       ; obdata header length byte
            sta oblen
            rts
.unused     ;   tag %01
            lda obj+1       ; load byte/char value
            sta unused
            rts
.smallint   ;   At this point the reference's LSB has been ASR'd twice,
            ;   which gives us the MSB of a smallint. Store the smallint
            ;   converted to native 16-bit format and endianness.
            sta smallint+1
            lda obj+1
            sta smallint
            rts


;   object on which to do type dispatch
obj         ds      2       ; input object reference. not in ZP because
                            ;   we'd often be reading this from the heap
;   typedisp output values
obfmtid     zds     1       ; obdata format ID
oblen       zds     1       ; obdata length
unused      zds     1       ; MSB of unused/invalid
smallint    zds     2       ; smallint value
