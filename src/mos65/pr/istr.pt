from    testmc.mos65  import Machine
R = Machine.Registers

test_rig = '''
            cpu 6502
            org $1F00
            include  src/mos65/std.a65
            include  testmc/mos65/tmc/biosdef.a65   ; defs for unit test BIOS
pristrP     equ $33
            include  src/mos65/pr/istr.a65          ; code under test

            brk         ; guard, and makes memory examination easier
            brk
debugval    ds  4       ; a test can hexdump this for programmer feedback
            brk
            brk

            org $1FF8   ; make data cross a page boundary to test increment
test_pristr jsr pristr
           ;rts         ; prints backtick; returns when pristr broken
            db  "Hello,",$10,"world!",$00
            lda #$AE    ; signal that we continued execution
            rts
'''

def test_loadbios_prchar(m, S, R, loadbios):
    ' Confirm working and demonstrate use of our 6502 unit test BIOS. '
    _, outchars = loadbios()
    m.call(S.prchar, R(a=ord('_')))
    m.call(S.prchar, R(a=ord('\r')))
    assert b'_\r' == outchars.getvalue()

def test_pristr(m, S, R, loadbios):
    _, output = loadbios()
    m.call(S.test_pristr)
    print('pristrP', m.hexdump(S.pristrP, 2)) # ptr to chars to print
    print('stack  ', m.hexdump(0x1F0, 16))          # stack
    print('debug  ', m.hexdump(S.debugval-2, 8))    # debug value area
    assert (0xAE, b'Hello,\x10world!') == (m.regs.a, output.getvalue())
