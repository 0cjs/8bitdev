;
;   std.a68 - Standard 6800 definitions
;
;   These are some standard definitions (mainly macros) we commonly
;   use with source code assembled with the Macro Assembler AS.
;
;   The CPU must be specified with the `CPU` pseudo-op before this
;   file is included; that allows this file to use MOMCPU/MOMCPUNAME
;   to change its behaviour for different 6800 variants.
;
;   The native constant definition and storage allocation syntax is DS,
;   DC/BYT/FCB, and ADDR/FDB, but since build 178 the Intel DS/DB/DW syntax
;   is allowed and we use that. Native repetition syntax is prefixed count
;   in brackets (`[8]$FF`), but as of build 280 Intel `8 dup $FF` is
;   supported for DB/DW.

;   In general, we use {NOEXPAND} on macros that do not generate code in
;   order to keep the listing clean. However, for macros that do generate
;   code we do not use it so that we can see the code that was generated;
;   without this one sees just a (MACRO) line followed by the address after
;   the macro, which can be a bit confusing.

;--------------------------------------------------------------------------
;   Machine vectors

mvec_IRQ    equ $FFF8
mvec_SWI    equ $FFFA
mvec_NMI    equ $FFFC
mvec_RESET  equ $FFFE

;--------------------------------------------------------------------------
;   LB(), MB(): Low and middle bytes of an assembler value
;   These are the same on every architecture (so yes, code duplication).

LB          function addr,(addr & $FF)
MB          function addr,((addr & $FF00) >> 8)

; ----------------------------------------------------------------------
;   XXX This is necessary only because the, unlike the native `fdb`,
;   the assembler's `dw` always seems to store words in little-endian
;   order, rather than native machine order (as of build 280).

dw          macro
            fdb ALLARGS
            endm
