from    testmc.i8080  import  Machine, Instructions as I
from    testmc  import tmc_tid
import  pytest
param = pytest.mark.parametrize

test_rig = '''
            cpu 8080
            include  src/i8080/std.i80

            set  _,subHLDE      ; reference to ensure routine is assembled
            set  _,cpBCHL
            set  _,cpBCDE
            include  src/i8080/arith.i80
'''

#   Shorthand for flags set and clear.
Z  = 1
nz = 0
C  = 1
nc = 0

@param('hl, de, result', [
    (0x0000, 0x0000, 0x0000),
    (0x1234, 0x1233, 0x0001),
    (0x0001, 0x0002, 0xFFFF),       # uses carry
], ids=tmc_tid)
def test_subHLDE(m, S, R, hl, de, result):
    assert 0xFFFF != S.subHLDE      # ensure it's been assembled
    m.call(S.subHLDE, R(hl=hl, de=de))
    Z = (result == 0)
    C = hl >= de            # Would be nice to affect carry, but we don't
                            # need it right now and might increase size.
    assert R(hl=result, de=de, Z=Z) == m.regs

####################################################################

cp_tests = (
    #   dest = src
    (0x0000, 0x0000,  Z, nc),   (0xFFFF, 0xFFFF,  Z, nc),
    #   dest > src
    (0x0001, 0x0000, nz, nc),   (0x00FF, 0x0000, nz, nc),
    (0x0100, 0x0000, nz, nc),   (0xFFFF, 0x0000, nz, nc),
    (0x8001, 0x7FFF, nz, nc),   (0xFFFF, 0xFFFE, nz, nc),
    #   dest < src
    (0x0000, 0x0001, nz,  C),   (0x0000, 0xFFFF, nz,  C),
    (0x7FFF, 0x8000, nz,  C),   (0xFFFE, 0xFFFF, nz,  C),
)

@param('bc, hl, zf, cf', cp_tests, ids=tmc_tid)
def test_cpBCHL(m, S, R, bc, hl, zf, cf):
    assert 0xFFFF != S.cpBCHL       # ensure it's been assembled
    m.call(S.cpBCHL, R(bc=bc, hl=hl, Z=not zf, C=not cf))
    assert R(Z=zf, C=cf, bc=bc, hl=hl) == m.regs

@param('bc, de, zf, cf', cp_tests, ids=tmc_tid)
def test_cpBCDE(m, S, R, bc, de, zf, cf):
    assert 0xFFFF != S.cpBCHL       # ensure it's been assembled
    m.call(S.cpBCDE, R(bc=bc, de=de, Z=not zf, C=not cf))
    assert R(Z=zf, C=cf, bc=bc, de=de) == m.regs
