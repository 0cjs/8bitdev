from    io  import BytesIO
from    testmc.generic.iomem  import *
import  pytest

@pytest.fixture
def mem():
    return IOMem(8)

def test__slice_to_range(mem):
    assert range(2, 4) == mem._slice_to_range(slice(2, 4))
    assert range(0, 3) == mem._slice_to_range(slice(None, 3))
    assert range(0, 8) == mem._slice_to_range(slice(None))
    assert range(0, 8, 3) == mem._slice_to_range(slice(None, None, 3))

def test_memory(mem):
    assert b'\x00'*8 == mem
    assert b'\x00'*8 == mem[0:8]

    mem[2:6] = b'\x02\x03\x04\x05'
    assert (2, 5) == (mem[2], mem[5])
    assert b'\x04\x05\x00\x00' == mem[4:]
    assert b'\x00\x00\x02' == mem[:3]
    assert b'\x00\x00\x02\x03\x04\x05\x00\x00' == mem[:]

    #   We support stepped slices.
    assert b'\x02\x04\x00' == mem[2:7:2]
    assert b'\x00\x02\x04' == mem[:5:2]
    assert b'\x00\x03\x00' == mem[::3]

def test_bad_address(mem):
    msg = r"^Invalid memory address: \${}"

    with pytest.raises(IndexError) as ex:  mem[-1]
    assert ex.match(msg.format('-001'))

    with pytest.raises(IndexError) as ex:  mem[8]
    assert ex.match(msg.format('0008'))

    with pytest.raises(IndexError) as ex:  mem[-1] = 0
    assert ex.match(msg.format('-001'))

    with pytest.raises(IndexError) as ex:  mem[8] = 0
    assert ex.match(msg.format('0008'))

def test_slice_range_checked(mem):
    msg = r"^Invalid memory address: \${}"

    with pytest.raises(IndexError) as ex:  mem[6:10]
    assert ex.match(msg.format('0008'))

    with pytest.raises(IndexError) as ex:  mem[6:10] = b'6789'
    assert ex.match(msg.format('0008'))

def test_no_deletion(mem):
    with pytest.raises(TypeError) as ex:
        del mem[3]
    assert ex.match(r"'IOMem' object doesn't support item deletion$")

def test_no_length_changes(mem):
    msg = r"^'IOMem' object cannot change length" \
        + r' \(length {} slice had {} value\(s\) provided\)$'

    with pytest.raises(ValueError) as ex:  mem[3:5] = b'1'
    assert ex.match(msg.format(2, 1))

    with pytest.raises(ValueError) as ex:  mem[3:5] = b'123'
    assert ex.match(msg.format(2, 3))

def test_setio_badargs(mem):
    with pytest.raises(ValueError) as ex:
        mem.setio(0, 42)
    assert ex.match(r'^Not callable: 42$')

    with pytest.raises(IndexError):  mem.setio(-1, None)
    with pytest.raises(IndexError):  mem.setio(8, None)
    with pytest.raises(TypeError):   mem.setio(slice(6,9), None)

def test_setio_no_overlaps(mem):
    def iof(addr, value): pass
    mem.setio(3, iof)
    with pytest.raises(ValueError) as ex:
        mem.setio(3, iof)
    assert ex.match(r'address \$0003')

def test_setiostreams(mem):
    ' This also tests streamiof() and setio(). '
    mem[4] = 0xEA
    assert 0xEA == mem[4]

    in4, out4 = mem.setiostreams(4, b'\x40\x41\x42\x43')
    assert in4 is not out4, 'input and output should be separate streams'

    #   non-device reads/writes still work
    assert (0, 0) == (mem[3], mem[5])
    mem[3] = 0x30; mem[5] = 0x50
    assert (0x30, 0x50) == (mem[3], mem[5])

    #   device reads
    assert 0x40 == mem[4]
    assert 0x41 == mem[4]
    assert 0x42 == in4.read(1)[0]
    assert 0x43 == mem[4]
    with pytest.raises(EOFError):
        mem[4]

    #   device writes
    assert b'' == out4.getvalue()
    mem[4] = 0x80
    assert b'\x80' == out4.getvalue()
    mem[4] = 0x81
    assert b'\x80\x81' == out4.getvalue()

    #   deletion of io functions
    mem.setio(4, None)
    assert 0xEA == mem[4]

def test_copyapi(mem):
    class O: pass
    o = O()
    mem.copyapi(o)

    assert hasattr(o, 'setiostreams')
    assert hasattr(o, 'streamiof')
    assert hasattr(o, 'setio')

    in5, out5 = o.setiostreams(5, b'\x55')
    assert 0x55 == mem[5]
