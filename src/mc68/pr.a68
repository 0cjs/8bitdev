;   pr - routines for formatting and printing output

;   Required definitions:
;   • _a:       input variable (_b and _c will be added as necessary)
;   • _x:       output variable (_y and _z will be added as necessary)
;   • prchar    ♡ABX print character in A
;
;   Pretty much everything in this repo assumes that `prchar` preserves
;   A, B and X. If your particular BIOS print character routine does not,
;   it should be wrapped in a `prchar` that does.
;

DEL         equ $7F

; ----------------------------------------------------------------------
;   ♣A ♡BX Print any (8-bit) value "visibly" as one character.
;
;   The output is always a character from the printable ASCII range. Bit 7
;   is ignored, characters in the control sticks ($00-$1F) are shifted
;   up into the upper-case ASCII sticks, and DEL is printed as `?` (i.e.,
;   shifted down in the reverse direction from the control chars).
;
;   XXX This should be printing control chars in reverse video.
;
;   This is a more informative alternative to printing just a `.` for any
;   non-printing char. It is slightly more subject to confusion in that it
;   can make non-ASCII look more like ASCII, but it's assumed that the
;   viewer will also have hex output easily available to help distinguish
;   the two.
;
prvischar   and A,#$7F          ; clear bit 7
            cmp A,#DEL
            beq .isctl
            cmp A,#' '
            bcc .notctl
.isctl      ;   Flipping bit 6 of a control character moves it up by $40
            ;   into the upper-case sticks, except for DEL where it's
            ;   moved down by 40 into the numeric/symbol stick.
            eor A,#(1<<6)
.notctl     jmp prchar          ; RTS (TCO)
