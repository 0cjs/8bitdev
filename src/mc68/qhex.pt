from    testmc  import tmc_tid
from    testmc.mc6800 import  Machine
import  pytest

test_rig = '''
            cpu 6800
            org $1000
            include src/mc68/qhex.a68

qhex_out    equ $21     ; WORD output of qhex*
'''

@pytest.fixture
def REG():
    ' N flag set on error, clear on ok. '
    return lambda value, ok: Machine.Registers(a=value, N=not ok)

####################################################################
#   qdigit

pytest.register_assert_rewrite('src.qdigit')
from src.qdigit import (
    test_qdigit_good                as test_qdigit_good_6800,
    test_qdigit_good_exhaustive     as test_qdigit_good_exhaustive_6800,
    test_qdigit_error               as test_qdigit_error_6800,
    test_qdigit_error_exhaustive    as test_qdigit_error_exhaustive_6800,
    )

#   XXX move this up to generic code?
@pytest.mark.parametrize('char, num', [
    ('0', 0x0), ('1', 0x1), ('8', 0x8),  ('9', 0x9),
    ('A', 0xA), ('a', 0xA), ('F', 0xF),  ('f',0xF),
])
def test_qhexdigit_good(m, R, char, num):
    m.call(m.symtab.qhexdigit, R(a=ord(char), N=1))
    assert R(a=num, N=0) == m.regs

@pytest.mark.parametrize('char', [
    '\x00', '/',                        # chars below digits
    ':', '@',                           # chars between digits and letters
    'G', 'g',                           # chars above valid letters
   #'\x7F', '\x80', '\x81',
   #'\xAF', '\xB0', '\xB9', '\xBa',     # MSb set: '/', '0', '9', ':'
   #'\xC7', '\xE7', '\xFF',             # MSb set: 'G', 'g'
    ])
def test_qhexdigit_error(m, R, char):
    m.call(m.symtab.qhexdigit, R(a=ord(char), N=0))
    assert R(N=1) == m.regs

####################################################################
#   qhexword, qhexbyte

@pytest.mark.parametrize('testno, Z, result, consumed, input', (
    ( 0,  0, 0x0000,  0, b'\x00'),
    ( 1,  0, 0x0000,  0, b'G'),
    ( 2,  0, 0x0000,  0, b'g'),
    ( 3,  1, 0x000F,  1, b'F\x00'),
    ( 4,  1, 0x00A0,  2, b'A0\x00'),
    ( 5,  1, 0x0B19,  3, b'B19\x00'),
    ( 6,  1, 0x1234,  4, b'1234'),
    ( 7,  1, 0x0123,  4, b'01234'),
    ( 8,  1, 0xabcd,  4, b'aBcdE'),
    (10,  1, 0x0000,  1, b'0'),
    (11,  1, 0x0000,  4, b'00000'),
), ids=tmc_tid)
def test_qhexword(m, S, R, testno, Z, result, consumed, input):
    #   We re-use another routine's space.
    #   Change the address from test to test.
    buf = 0x220 + testno
    m.deposit(buf, input + b'\x00')
    bufdebug = 'buf {} = {}'.format(
        m.hexdump(buf, len(input)), m.bytes(buf, len(input)))
    print(bufdebug, end='')
    m.depword(S.qhex_out, 0x9999)   # definitely not our output value

    m.call(S.qhexword, R(x=buf), maxsteps=10000)
    print('\t\tX={:04X} Z={} qhex_out=${:04X}'
        .format(m.x, m.Z, m.word(S.qhex_out)))
    assert R(x=buf+consumed) == m.regs
    assert (R(Z=Z), result) == (m.regs, m.word(S.qhex_out))

def test_qhexbyte(m, S, R):
    #   Most testing of internal details is done by test_qhexword.
    input    =  b'0 1 23 45 6789a bcd'
    inbuf    = 0x200
    expected = (0x00, None, 0x01, None, 0x23, None, 0x45, None,
                0x67, 0x89, 0x0A, None, 0xBC, 0x0D)
    m.deposit(inbuf, input)
    print(input)
    x = inbuf
    for ex in expected:
        m.call(S.qhexbyte, R(x=x))
        print('at={:04X} next={:04X} '.format(x, m.regs.x), end='')
        if ex is None:
            print('ex=None')
            assert R(Z=0) == m.regs
            x += 1
        else:
            print('ex={:X}'.format(ex))
            assert (R(Z=1), ex) == (m.regs, m.word(S.qhex_out))
            x = m.regs.x
