from    testmc.m6502  import *
from    os.path import exists
import  pytest

if not exists('.all-tools'):
    pytest.skip("skipping ASxxxx tests", allow_module_level=True)

object_file = 'src/asxxxx/simple'

def test_loaded_object_file(m):
    ' Confirm that the correct object file was loaded. '
    ident = m.symtab.ident
    ident_str = b'asxxxx/simple.a65'
    assert ident_str == m.bytes(ident, len(ident_str))
    assert 0x400 == ident

####################################################################
#   Add X and Y, storing the result in xybuf and returning it in A

def test_addxy(m, R, S):
    m.deposit(0x8000,
        I.JSR, S.addxy & 0xff, (S.addxy & 0xff00) >> 8,
        I.NOP, I.NOP, I.NOP, I.NOP)
    assert S.addxy == m.word(0x8001)     # Did we set it up right?
    m.setregs(R(pc=S.addxy, x=0x12, y=0x34))
    #   XXX Test entry with carry flag set.
    m.deposit(S.xybuf, [0xff])
    m.step(7+2)      # Execute a couple NOPs for safety
    assert R(a=0x12+0x34) == m.regs
    assert 0x12+0x34 == m.byte(S.xybuf)

####################################################################
#   signeq - determine if signs of two bytes are the same

signeq_pos = [0x00, 0x01, 0x7F]
signeq_neg = [0x80, 0x81, 0xFE, 0xFF]
@pytest.mark.parametrize('match, a, b', [] \
    + [ ( True, a, b) for a in signeq_pos for b in signeq_pos ] \
    + [ ( True, a, b) for a in signeq_neg for b in signeq_neg ] \
    + [ (False, a, b) for a in signeq_pos for b in signeq_neg ] \
    + [ (False, a, b) for a in signeq_neg for b in signeq_pos ] \
)
def test_signeq(m, R, S, match, a, b):
    m.deposit(S.signeq_a, a)
    m.deposit(S.signeq_b, b)
    print('[a,b] = {}'.format(m.hexdump(S.signeq_a, 2)))
    m.call(S.signeq, R(N=int(match)))
    assert R(N=int(not match)) == m.regs

####################################################################
#   JMP [addr] vs PHA/RTS

def test_jmpptr(m, R, S):
    #   Step by step testing, to make _really_ sure the instructions
    #   are doing what I intend. Maybe overkill?
    m.setregs(R(pc=S.jmpabs, a=2))
    m.step()                 # asl
    assert R(a=4) == m.regs
    m.step()                 # tax
    m.step()                 # lda jmplist,X  ;LSB
    assert R(a=0xBC) == m.regs
    m.step()                 # sta jmpptr
    m.step()                 # inx
    m.step()                 # lda jmplist,X  ;MSB
    m.step()                 # sta jmpptr+1
    assert 0x9abc == m.word(S.jmpptr)
    m.step()                 # jmp [jmpptr]
    assert R(pc=0x9ABC) == m.regs
    print('pc={:04X} a={:02X} x={:02X}'.format(m.mpu.pc, m.mpu.a, m.mpu.x))

def test_jmpabsrts(m, R, S):
    m.setregs(R(pc=S.jmpabsrts, a=1))
    m.stepto(stopon=(I.RTS,))
    assert 0x5678-1 == m.spword()
    m.step()                 # rts
    assert R(pc=0x5678) == m.regs

####################################################################
#   bsread: A source stream of bytes

def test_bytesource(m, R, S):
    addr  = 0x1ffe          # Set so we cross a page boundary
    bytes = b'A\0B\xffC'
    m.deposit(addr, bytes)
    m.depword(S.bytesource, addr)
    n = 0x79                # Various values to check register preservation
    for i in bytes:
        m.call(S.bsread, R(x=n, y=n+0x40))
        assert R(a=i, x=n, y=n+0x40) == m.regs
        n += 5

####################################################################
#   Read (using bsread) a pair of ASCII chars representing a printable...

def test_rab_decode(m, R):
    decode = m.symtab.rab_decode
    for inp, exp in [ ('0',0), ('5', 5), ('9',9), ('A',0xA), ('F',0xF), ]:
        print("inp='{}' exp={:02X}".format(inp, exp))
        m.call(decode, R(a=ord(inp)))
        assert R(a=exp) == m.regs

def test_read_ascii_byte(m, R, S):
    input = 0x8000
    m.deposit(input, b'FF0012ED')
    m.depword(S.bytesource, input)

    for i in (0xFF, 0x00, 0x12, 0xED):
        m.call(S.read_ascii_byte)
        assert R(a=i) == m.regs

####################################################################
#   Stack addressing

def test_stk(m, R, S):
    m.deposit(S.stkval_i1, 0xDE)    # sentinel to ensure overwrite
    m.deposit(S.stkval_i3, 0xDE)
    m.call(S.stk_main, R(a=0xFF, sp=0xFF), maxsteps=100, trace=0)

    #   Verify correct test data was pushed on the stack.
    #   No return address was pushed or popped by our call() above
    #   because it executes up to, but not including the final RTS.
    #            $1FB  $1FC  $1FD  $1FE  $1FF  guard
    print(m.hexdump(0x1F4, 12))
    expected = b'\x24\x23\x22\x21\x20' \
             + b'\xFC\xFF'  # sentinel return address pushed by m.call()
    assert expected == m.bytes(0x1F9, len(expected))
    assert 0x25 != m.byte(0x1F8)    # Didn't stack too much

    #   Ensure the stack pointer was left where it started
    assert R(sp=0xFF) == m.regs

    #   Fixed offset using X
    assert 0x23 == m.byte(S.stkval_i1)

    #   Variable offset using Y
    assert 0x1F9 == m.word(S.stkframe)
    assert 0x21 == m.byte(S.stkval_i3)
