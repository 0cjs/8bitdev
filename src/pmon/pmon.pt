from    testmc  import *
from    testmc.mc6800  import *
import  pytest

R = Machine.Registers

test_rig = '''
            cpu 6800
            org $1000

pmon_ramlo  equ $0080
pmon_org    equ $1000
            include src/mc68/std.a68
            include src/tmc68/bios.a68
            include src/pmon/pmon.a68

; ----------------------------------------------------------------------
;   Mock command table(s) for testing

            org $4FFF
cmdtbl_1
cmdentry_a  db  'a'             ; command character
            dw  $0000           ; command entrypoint (testing zeros here)
            db  'x',CTP_WORD    ; parameters
            db  'y',CTP_BYTE
            db  CTP_END

            db  CT_CONTINUE
            dw  cmdtbl_2

            org $5EEE
cmdtbl_2
cmdentry_n  db  'n'             ; command with no parameters
            dw  $1234
            db CTP_END

cmdentry_b  db  'b'
            dw  $100B
            db  'x',CTP_BYTE
            db  'y',CTP_WORD
            db  CTP_END

            db  CT_END

; ----------------------------------------------------------------------
'''

param = pytest.mark.parametrize

@param('cmdchar', ['a', 'b'])
def test_cmdlookup_success(m, S, R, cmdchar):
    m.depword(S.cmdtbl, S.cmdtbl_1)
    m.call(S.cmdlookup, R(a=ord(cmdchar), x=0xFFFF, C=1))
    cmdentry = m.word(S.cmdentry)
    print('entry:', m.hexdump(cmdentry, 9))
    assert (ord(cmdchar), 0, S['cmdentry_' + cmdchar]) == (m.a, m.C, cmdentry)

@param('cmdchar', [0xFF, 0x00, 0x01, ord('Z')])
def test_cmdlookup_failure(m, S, R, cmdchar):
    m.depword(S.cmdtbl, S.cmdtbl_1)
    m.call(S.cmdlookup, R(a=cmdchar, x=0xFFFF, C=0))
    assert R(C=1, a=cmdchar) == m.regs

@param('result, x, b', (
    ( 0x1000, 0x1000, 0x00 ),
    ( 0x2001, 0x2000, 0x01 ),
    ( 0x30FF, 0x3000, 0xFF ),
    ( 0x4100, 0x40FF, 0x01 ),
    ( 0x0001, 0xFFFF, 0x02 ),
))
def test_addXB(m, S, R, result, x, b):
    a = b ^ 0xA5
    inputs = R(x=x, b=b, a=a)
    print(inputs)
    m.call(S.addXB, inputs)
    assert R(x=result, a=a) == m.regs
