from    testmc.asxxxx import MemImage, SymTab

from    io  import BytesIO, StringIO
import  pytest

#   Records in "Tandy CoCo Disk BASIC binary" (.bin) format as
#   generated by the ASxxxx assembler's `aslink` program.
BINDATA = bytes.fromhex(''
    # typ  len addr data
    + '00 0001 0123 ee'
    + '00 0009 0400 8a 8c09 0418 6d09 0460'
    + 'ff 0000 0403'    # final record has entry point
    )

def test_MemImage_parse_cocobin():
    mi = MemImage.parse_cocobin(BytesIO(BINDATA))
    rec0data = (0xee,)
    rec1data = (0x8a, 0x8c, 0x09, 0x04, 0x18, 0x6d, 0x09, 0x04, 0x60)
    assert (0x0123, rec0data) == mi[0]
    assert (0x0400, rec1data) == mi[1]
    #   Entries only for data records, not the entrypoint record
    assert 2 == len(mi)
    assert 0x0403 == mi.entrypoint


####################################################################
#   SymTab - Parse symbol table from ASxxxx listing file

def test_SymTab_getattr():
    s = SymTab(None)
    assert 0 == len(s)
    assert callable(s.__len__)

    with pytest.raises(AttributeError):
        s.foo
    s['foo'] = 0
    assert 0 is s['foo']
    assert 0 is s.foo

    #   Confirm that we do not override existing methods.
    s['__len__'] = 0
    assert 0 is s['__len__']
    assert not callable(s['__len__'])
    assert callable(s.__len__)
    assert 2 == len(s)

def test_SymTab_splitentries_0():
    assert [] == SymTab.splitentries('\n')

def test_SymTab_splitentries_1():
    assert ['2 xybuf              0416 GR'] \
        == SymTab.splitentries('  2 xybuf              0416 GR')

def test_SymTab_splitentries_2():
    e0 = '.__.H$L.       =   0000 L'
    e1 = '2 addxy              040A GR'
    assert [e0, e1] == SymTab.splitentries('  {}   |  {}'.format(e0, e1))

def test_SymTab_parseent():
    p = SymTab.parseent
    assert ('.__.$$$.', 0x2710) == p(  '.__.$$$.       =   2710 L')
    assert ('addxy',    0x040a) == p('2 addxy              040A GR')
    assert ('jmpptr',   0x0010) == p(  'jmpptr         =   0010')

def test_SymTab_parse():
    p = SymTab(StringIO(LST_SYM))
    assert 0x0400 == p.ident
    assert 0x042f == p.jmprtslist
    assert 0x2710 == p['.__.$$$.']

LST_SYM = '''
Everything before the symbol table should be ignored.

\fASxxxx Assembler V05.31  (Rockwell 6502/6510/65C02)                     Page 1
Hexadecimal [16-Bits]                                 Sun Sep 15 17:26:48 2019

Symbol Table

    .__.$$$.       =   2710 L   |     .__.ABS.       =   0000 G

\fASxxxx Assembler V05.31  (Rockwell 6502/6510/65C02)                     Page 1
Hexadecimal [16-Bits]                                 Sun Sep 15 17:26:48 2019

    .__.CPU.       =   0000 L   |     .__.END.       =   0400 G

ASxxxx Assembler V05.31  (Rockwell 6502/6510/65C02)                     Page 1
Hexadecimal [16-Bits]                                 Sun Sep 15 17:26:48 2019

    .__.H$L.       =   0000 L   |   2 addxy              040A GR
  2 ident              0400 R   |   2 jmpabs             0417 R
  2 jmpabsrts          0437 R   |   2 jmplist            0427 R
    jmpptr         =   0010     |   2 jmprtslist         042F R
  2 xybuf              0416 GR


\fASxxxx Assembler V05.31  (Rockwell 6502/6510/65C02)                     Page 2
Hexadecimal [16-Bits]                                 Sun Sep 15 17:26:48 2019

Area Table
'''
