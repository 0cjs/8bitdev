#!/usr/bin/env bash
set -eu -o pipefail

die() {
    local exitcode="$1"; shift
    [[ -z $1 ]] || echo 1>&2 "$@"
    exit $exitcode
}

tool_setup() {
    [[ ${#@} -eq 1 ]] \
        || { echo 1>&2 'tool_setup(): tool path arg required'; return 2; }
    local tool_path="$1"; shift
    [[ -x $tool_path ]] || return 69    # EX_UNAVAILABLE: support file nonexist

    #   The tool_path command is expected to produce build output messages
    #   on stdout (1) and stderr (2), and commands to configure this shell
    #   process (e.g., to set environment variables) on file descriptor 3.
    #
    #   The following rather magical statement handles this by redirecting
    #   fd 3 of the subprocess to the standard output, to be read and
    #   executed by the source (`.`) command, and redirecting stdout of the
    #   subprocess to our current process' stdout so we can still see that
    #   output or have it properly sent to wherever our stdout is directed.
    . <($tool_path 3>&1 1>/proc/$$/fd/1)
}

####################################################################
#   Main

basedir=$(cd "$(dirname "$0")" && pwd -P)
export BUILDDIR="$basedir/.build"
all_tools="$basedir/.all-tools"

#   Leading command line args (these must be at the start):
#   • -C: clean rebuild of everything, including toolchains
#   • -c: clean rebuild of only this repo's source (test/toolchain output)
#   • -A: build and use all tools
#   All args after these are passed on to pytest.
while [[ ${#@} -gt 0 ]]; do case "$1" in
    -C)     shift; rm -rf "$BUILDDIR";;
    -c)     shift; rm -rf "$BUILDDIR"/{obj,pytest};;
    -A)     shift; touch "$all_tools";;
    *)      break;;
esac; done

cd "$basedir"

. ./activate -q -p python3

[[ -f $all_tools ]] && tool_setup tool/asxxxx/Setup
tool_setup tool/asl/Setup
tool_setup tool/diskimg/Setup
tool_setup tool/dos33fs/Setup
tool_setup tool/linapple/Setup
[[ $PATH =~ ^$basedir/bin:|:$basedir/bin:|:$basedir/bin$ ]] \
    || export PATH="$basedir/bin:$PATH"
mkdir -p "$BUILDDIR/obj"

####################################################################
#   ASxxxx builds
#
#   Due to issues with 32-bit binaries, run only when $all_tools set.
#
#   The files to build are currently hardcoded with
#   no dependency graph so it rebuilds everything each time.
#   (Fortunately this is quite fast.)

#   -x  Output in hexadecimal
#   -w  Wide listing format for symbol table (55 char of symname instead of 14)
#   -p  Disable listing pagination
#   -l  Create listing file (`.lst`)
#   -o  Create object file (`.rel`)
#   -s  Create symbol file (`.sym`) (removes symtab from listing file)
#   -r  Inlcude assembler line numbers in the `.hlr` hint file
#   -rr Inlcude non-list assembler line numbers in the `.hlr` hint file
asmopts="-xwplo -f"

#   -n  No echo of commands to stdout
#   -u  Update listing file (`.lst`) with relocated addresses info (`.rst`)
#       (This does not update the addresses in the symbol table.)
#   -m  Generate map output file (`.map`)
#   -w  "Wide" mode for map file (show 32 chars, not 8, of symbol names)
#   -t  Output format: Tandy Color Computer BASIC binary file (`.bin`)
linkopts="-numwt"

asm() {
    local srcfile="$1"; shift
    #   `.rel` output extension is replaced/added automatically
    as6500 $asmopts "$BUILDDIR/obj/"$(basename "$srcfile") "$srcfile" "$@" || {
        local exitcode=$?
        [[ $exitcode -eq 127 ]] && echo 1>&2 \
            "as6500 exited with 127: do you support 32-bit executables?"
        return $exitcode
    }
}

link() {
    #   First filename is outputfile; extn replaced by .hex/.s19/.bin.
    #   Subsequent filenames are input files, with or without .rel extension
    #   Single filename is ouput and input.
    #   Other arguments before and after
    (cd $BUILDDIR/obj/ && aslink $linkopts "$@")
}

[[ -f $all_tools ]] && {
    asm src/simple-asx.a65  ; link simple-asx
    asm src/reloctest.a65   ; link reloctest -b '_code=0x400' reloctest
    asm src/zptest.a65      ; link zptest    -b '_code=0x0300'

    #   Replace form feeds since we view listing only on screen. This must
    #   be done *after* the .rst file is created by the linker because
    #   otherwise the extra newlines make the linker edit the wrong lines
    #   in the .lst file.
    sed -i -e 's/\f/\n/' "$BUILDDIR"/obj/*.{lst,rst,map}
}

####################################################################
#   AS builds

objdir() {
    #   The object directory for built files is the source path
    #   relative to the base, but under .build/obj/.
    local d=$(dirname "$1")         # Source file directory
          d=${d#$basedir/}          # Remove $basedir prefix if present
    echo "$basedir/.build/obj/$d"
}

asbuild() {
    local srcpath="$1"; shift
    local objdir=$(objdir "$srcpath")
    local src=$(basename "$srcpath")
    #   AS has some poor behaviour we need to work around here.
    #   • We set CWD to output dir because AS can't specify other output
    #     locations for some files, such as the debug symbols.
    #   • If given an absolute path to a source file in another dir, AS
    #     doesn't generate output files. (!) So we set up the top-level
    #     source file here that `include`s the real top-level source file.
    #   • </dev/null prevents interactive prompt if no input file given.
    #   • Full path to source file must be given. It will be found from
    #     path relative to include dir, but then AS will crash.
    #   Also, We make symbols case sensitive here; this can be done only
    #   with a command-line option.
    [[ -r $srcpath ]] || die 2 "Test: asbuild cannot read $srcpath"
    mkdir -p "$objdir"
    (cd "$objdir" \
        && echo  >"$src" '   page 0' \
        && for line in "$@"; do echo >>"$src" "$line"; done \
        && echo >>"$src" "   include $srcpath" \
        && asl </dev/null -codepage utf-8 -qxx -U \
            -i "$basedir" "$src" -L -s -g
    )
}

a2exebuild() {
    local exe=$(basename "$1")
          exe=${exe%.*}             # Remove extension
    local objdir=$(objdir "$1")
    asbuild "$@"
    p2a2bin "$objdir/$exe.p" > "$objdir/$exe"

    #   Build a disk image that will run the program when booted.
    local baseimg="$BUILDDIR/tool/src/dskimg/a2/EMPTY-DOS33-48K-V254.dsk"
    local img="$objdir/$exe.dsk"
    cp "$baseimg" "$img"
    dos33 -y "$img" SAVE B "$objdir/$exe" "${exe^^}"
    echo '10 PRINT CHR$(4);"BRUN' "${exe^^}" '"' \
        | tokenize_asoft > "$objdir/$exe.HELLO"
    dos33 -y "$img" DELETE HELLO    # Avoids annoying SAVE overwrite warning
    dos33 -y "$img" SAVE A "$objdir/$exe.HELLO" HELLO
    dos33 -y "$img" HELLO HELLO     # Ensure HELLO is run on boot

    #   The above can be run with:
    #       linapple --conf tool/linapple/linapple.conf \
    #           --d1 .build/obj/exe/a2/charset.dsk
    #   We should work out an option to do this automatically.
}

asbuild src/asl-nomacro.a65
asbuild src/asl-sym.a65
asbuild src/simple-asl.a65  ';  Unit Test Assembly' '   org $240'
asbuild src/stdtest.a65     \
    '   cpu 6502' '   include "src/std.a65"' '   org $240'
asbuild src/objects.a65     \
    '   cpu 6502' '   include "src/std.a65"' '   org $300'
asbuild src/bigint.a65      \
    '   cpu 6502' '   include "src/std.a65"' '   org $1000'

asbuild src/a1/pia2.a65
asbuild src/a2/misc.a65
asbuild src/a2/mondump.a65
asbuild src/c64.a65
asbuild src/jr200.a68
asbuild src/fm7.a69

asbuild     exe/a1/charset.a65
a2exebuild  exe/a2/charset.a65

####################################################################
#   Tests

export PYTHONPATH="$basedir/lib"
#   XXX This probably relies on the cwd to find the pytest.ini.
pytest -q "$@"
