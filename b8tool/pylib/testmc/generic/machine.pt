from    testmc.generic   import *
from    testmc.memimage  import MemImage
import  pytest

@pytest.fixture
def m():
    ''' Create a new Machine class and return it. This ensures that changes
        made to a Machine or Registers class in a test are not leaked to
        other tests.
    '''
    class Machine(GenericMachine):

        class Registers(GenericRegisters):
            registers = (Reg('pc', 16), )
            srbits = (Bit(1), Bit(0), Flag('B'), Bit(1))

        def __init__(self, pc=0):
            self.mem = [0] * 16
            self.pc = pc
            #   This must still have either attribute B or a status
            #   resgister defined.

            #   Test attributes
            self._steps_taken = 0

        is_little_endian            = False
        def get_memory_seq(self):   return self.mem

        def _getpc(self):
            return self.pc

        def _step(self):
            ''' In this test Machine, all opcodes are NOPs with the low two
                bits indicating how many additional bytes should be
                consumed as arguments to this opcode.
            '''
            argcount = self.byte(self.pc) & 0b11
            self.pc += argcount + 1
            self.pc &= 0xFFFF
            self._steps_taken += 1

        def _getsp():               raise RuntimeError('Tested in subclasses.')
        def pushretaddr(self, _):   raise RuntimeError('Tested in subclasses.')
        def getretaddr(self):       raise RuntimeError('Tested in subclasses.')

        _RTS_opcodes = _ABORT_opcodes = None

    return Machine

@pytest.fixture
def R(m):
    ''' Registers class of the Machine created by the `m()` fixture.

        This assumes that the default for the Machine class has not
        been overridden in an instance. If you do override it, you must
        use the `Registers` attribute from that instance.
    '''
    return m.Registers

####################################################################
#   Instantiation

def test_abc():
    class m(GenericMachine):
        is_little_endian = None
        def get_memory_seq(): pass
    with pytest.raises(TypeError) as ex:
        m()
    assert ex.match(r"Can't instantiate abstract class m")
    assert ex.match(r'Registers')

def test_instantiation(m):
    assert type is type(m.Registers)
    r = m.Registers(pc=3);  assert    3 == r.pc
    r = m().Registers();    assert None is r.pc

####################################################################
#   Usage

def test_memory(m):
    ' Smoke test: make sure the functions are there. '
    m = m()
    assert  0 == m.byte(3)
    m.deposit(3, 42)
    assert 42 == m.byte(3)

def test_regs_flag_attributes(m, R):
    m = m(); m.B = False
    assert R() == m.regs
    assert R(pc=0, B=0) == m.regs

    m.pc = 3; m.B = True
    assert R(pc=3, B=1) == m.regs

    #   We still use flags if property named by `Registers.srname`
    #   does not exist on the Machine.
    R.srname = 'psr'
    assert R(pc=3, B=1) == m.regs

def test_regs_status_register(m, R):
    R.srname = 'psr'

    m = m(); m.psr = 0b1001
    assert R() == m.regs
    assert R(pc=0, psr=0b1001) == m.regs
    assert R(B=False) == m.regs

    m.pc = 4; m.psr = 0b1011
    assert R(pc=4, psr=0b1011) == m.regs
    assert R(B=True) == m.regs

def test_setregs_flag_attributes(m, R):
    m = m(); m.B = False;       assert (     0, False) == (m.pc, m.B)
    m.setregs(R(pc=0xF000));    assert (0xF000, False) == (m.pc, m.B)
    m.setregs(R(B=1));          assert (0xF000,  True) == (m.pc, m.B)
    m.setregs(R(pc=4, B=0));    assert (     4, False) == (m.pc, m.B)

    #   We still use flags if property named by `Registers.srname`
    #   does not exist on the Machine.
    R.srname = 'psr'
    m.setregs(R(B=0));          assert not m.B
    m.setregs(R(B=1));          assert m.B

def test_setregs_status_register(m, R):
    R.srname = 'psr'

    m = m(); m.psr = 0b1001;    assert (0, 0b1001) == (m.pc, m.psr)
    m.setregs(R(pc=6));         assert (6, 0b1001) == (m.pc, m.psr)
    m.setregs(R(B=1));          assert (6, 0b1011) == (m.pc, m.psr)
    m.setregs(R(pc=7, B=0));    assert (7, 0b1001) == (m.pc, m.psr)

    #   setregs() (really, R.set_attrs_on()) ignores any PSR bits defined
    #   as constant bits rather than flags.
    m.setregs(R(psr=0b0110));   assert (7, 0b1011) == (m.pc, m.psr)

def test_regs_setregs_regsattr(m, R):
    ' Test using a separate object to hold the register values. '
    class SubMachine(): pass
    sm = SubMachine()
    sm.pc = 99;  sm.B = True

    m = m();  del m.pc;  m.regsobj = sm
    assert not hasattr(m, 'pc')
    assert not hasattr(m, 'B')
    assert not hasattr(m, 'srname')

    assert R(pc=99, B=1) == m.regs

    m.setregs(R(pc=201, B=0))
    assert R(pc=201, B=0) == m.regs
    assert (201, False) == (sm.pc, sm.B)
    assert not hasattr(m, 'pc')
    assert not hasattr(m, 'B')

####################################################################
#   Object code loading

def test__load_memimage(m, R):
    memlen = 0x800

    m = m()
    m.B = False
    m.mem = [0] * memlen

    mi = MemImage()
    rec1data = (0x8a, 0x8c, 0x09, 0x04, 0x18, 0x6d, 0x09, 0x04, 0x60)
    mi.append(mi.MemRecord(0x400, rec1data))
    mi.append(mi.MemRecord(0x123, (0xee,)))
    mi.entrypoint = 0x0403

    expected_mem \
        = [0] * 0x123 \
        + [0xEE] \
        + [0] * (0x400 - 0x124) \
        + list(rec1data) \
        + [0] * (memlen - 0x400 - 9)

    m.load_memimage(mi)
    assert R(pc=0x0403)    == m.regs
    assert expected_mem    == m.mem

@pytest.mark.xfail(strict=True, reason='''
    Much of load() is calling code that's already unit-tested, but there's
    still some complex logic in load() itself that's currently tested only
    by clients of this library.
''')
def test_load():
    assert 0 # XXX write me

####################################################################
#   Execution

def test_underscore_step(m):
    ' Test that our test _step() function is doing what it should. '
    m = m()
    m.deposit(m.pc, b''.join((
        b'\x00', b'\x01' * 2, b'\x02' * 3, b'\x03' * 4, b'\x04', )))

    ...;            assert  0 == m.pc
    m._step();      assert  1 == m.pc
    m._step();      assert  3 == m.pc
    m._step();      assert  6 == m.pc
    m._step();      assert 10 == m.pc
    m._step();      assert 11 == m.pc

####################################################################
#   Execution - step(), stepto()

def test_step(m):
    m = m();    assert 0 == m._steps_taken
    m.step();   assert 1 == m._steps_taken
    m.step(3);  assert 4 == m._steps_taken

def test_step_trace(m, capsys):
    m = m(); m.B = False
    m.step(2, trace=1)
    out, err = capsys.readouterr()
    assert '' == err
    tracelines = ''.join((
        'CPU pc=0000 --b- opcode=00\n',
        'CPU pc=0001 --b- opcode=00\n',
        ))
    assert tracelines == out

def test_stepto_maxsteps_withexception(m):
    m = m(); m.B = False
    m.deposit(m.pc, b'\x00\x01\xFD\xFD\x00\x00')
    with pytest.raises(m.Timeout) as ex:
        m.stepto(maxsteps=3, trace=True)
    assert (3, 5) == (m._steps_taken, m.pc)
    assert ex.match('after 3 opcodes: CPU pc=0005')

def test_stepto_maxsteps_noexception(m):
    m = m(); m.B = False
    stepsret = m.stepto(maxsteps=3, raisetimeout=False, trace=True)
    assert (3, 3, 3) == (m._steps_taken, stepsret, m.pc)

@pytest.mark.parametrize('stopon, steps, pc', (
    (                      [0xFD],  2, 3),
    (    [0x02, 0xFE, 0xFD, 0xFC],  2, 3),
    (set([0x02, 0xFE, 0xFD, 0xFC]), 2, 3),
    (                      [0x00],  3, 5),  # always execute first op
))
def test_stepto_stopon(m, stopon, steps, pc):
    m = m(); m.B = False
    m.deposit(m.pc, b'\x00\x01\xFD\xFD\x00\x00')
    print('stop on', type(stopon), stopon)   # test name not obvious
    stepsret = m.stepto(stopon=stopon)
    assert (steps, stepsret, pc) == (m._steps_taken, m._steps_taken, m.pc)

@pytest.mark.parametrize('initpc, steps, finalpc, stopat', (
    #  init  st   fin   stopat
    (  0x00,  1, 0x04,      (      0x04,     )),    # 1-tuple
    (  0x00,  1, 0x04,      (0xFF, 0x04, 0x00)),    # tuple
    (  0x00,  1, 0x04,      [0xFF, 0x04, 0x00]),    # list
    (  0x00,  1, 0x04,  set([0xFF, 0x04, 0x00])),   # set
    (  0x00,  2, 0x08,  [                        0x08,     ]),
    (  0x00,  2, 0x08,  [0x03, 0x05, 0x06, 0x07, 0x08, 0x09]),
    (  0x00,  2, 0x08,  range(0x05, 0x10)),
))
def test_stepto_stopat(m, R, initpc, steps, finalpc, stopat):
    m = m(); m.B = False
    m.deposit(0, b''.join([
        b'\x03\xFF\xFF\xFF' * 2,    # 4-byte ops
        b'\x01\xFF'         * 2,    # 2-byte ops
        b'\x00'             * 2,    # 1-byte ops
        b'\xFF'             * 2,    # "stop" ops
        ]))
    #   We configure stepto() to stop on $Ff, which always indicates an error.

    print('start at {} stop at {} {}'.format(initpc, stopat, type(stopat)))
    m.setregs(R(pc=initpc))
    stepsret = m.stepto(stopat=stopat, stopon=(0xFF,), trace=0)
    assert (steps, stepsret, finalpc) == (m._steps_taken, m._steps_taken, m.pc)

####################################################################
#   Execution - call()
#
#   This is dependent enough on the individual CPU's stack handling
#   that it now is always fully tested in the tests for each CPU.
