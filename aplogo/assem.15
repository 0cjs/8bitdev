;;;-*-LISP-*-

; Pass 1.
(defun get-a-token ()
       (do ((charlst (ncons (tyi)) (nconc charlst (ncons (tyi)))))
	    ((token-delimiter-p (tyipeek))
	     (cond ((= #/; (tyipeek)) (gobble-comment)))
	     (implode charlst))))

(defun token-delimiter-p (character-code)
       (memq character-code *token-delimiter-character-codes*))

(defvar *token-delimiter-character-codes*  '(#/  #/; #\cr #\tab #/# #/( #/) #/+
				       #/* #// #/^ #/& #/| #/~ #/$))

(defvar *line-delimiter-character-codes* '(#/; #\cr))

(defun gobble-comment ()				;wait for cr.
       (do () ((= (tyipeek) #\cr)) (tyi)))

(defun read-code-line ()				;gettok until #\cr or #/;
       (do ((line (ncons (get-a-token)) (nconc line (ncons (get-a-token)))))
	   ((memq (tyipeek) *line-delimiter-character-codes*)
	    line)))

(defun hex4val (lst)
       (+ (* 256. (hex2val lst))			;sorry
	  (hex2val (cddr lst))))

(defun hex2val (lst)
       (+ (* 16. (unhex (car lst)))
	  (unhex (cadr lst))))

(defun unhex (hexchar)
       (cond ((greaterp hexchar #.(1- #/A))
	      (- hexchar #.(- #/A 10.)))
	     (t (- hexchar #/0))))			;no eror checking.

;pass 2

;expressions are infix, evaluated left-to-right without operator
;precedence. Defined operators are: +, -, *, /, &, !, 
(defun parse-expression (lst)
       (cond ((null lst