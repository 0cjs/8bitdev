from    cmtconv.platform.jr200  import *
import  pytest

TESTBLOCK = bytes([
    0x02, 0x2A,             # magic number
    0x03, 0x04,             # block no., datalen
    0x78, 0x80,             # address (big-endian)
    0xAA, 0x55, 0xAA, 0x55, # data
    0x29                    # checksum
])

####################################################################
#   Creating blocks from values, as when writing them to tape

def test_make_block_without_checksum():
    data  = b'\xAA\x55\xAA\x55'
    block = Block.make_block(3, 0x7880, tuple(data))  # any sequence should work
    assert            False is block.is_eof
    assert                3 == block.blockno
    assert           0x7880 == block.addr
    assert             data == block.filedata
    assert             0x29 == block.checksum
    assert        TESTBLOCK == block.to_bytes()

    assert 'cmtconv.platform.jr200.Block(blockno=0x3, addr=0x7880, _data={})' \
        .format(repr(data)) \
        == repr(block) == str(block)

def test_make_block_with_checksum():
    args = (3, 0x7880, b'\xAA\x55\xAA\x55')
    Block.make_block(*args, checksum=0x29)
    with pytest.raises(Block.ChecksumError) as ex:
        Block.make_block(*args, checksum=0xEE)
    assert ex.match('expected=29 actual=EE')

def test_fullsize_block():
    block = Block(8, 0, bytes(0x100))
    assert            0x100 == len(block.filedata)
    assert                0 == block.to_bytes()[3]

def test_setdata_regular():
    block = Block.make_block(3, 0x7880)

    with pytest.raises(AttributeError) as ex:
        block.filedata = b''
    assert ex.match("can't set attribute")

    d55 = b'\xAA\x55\xAA\x55'
    block.setdata(d55); assert (d55, 0x29) == (block.filedata, block.checksum)
    block.setdata(d55, checksum=0x29)

    d67 = b'\xAA\x56\xAA\x57'
    block.setdata(d67); assert (d67, 0x2C) == (block.filedata, block.checksum)
    block.setdata(d67, checksum=0x2C)

    #   Non-bytes sequences should work, so long as the values fit into a byte.
    block.setdata((5, 6, 7)); assert b'\x05\x06\x07' == block.filedata

    with pytest.raises(Block.ChecksumError) as ex:
        block.setdata(d55, checksum=0xEE)
    assert ex.match('expected=29 actual=EE')

def test_make_EOF_block():
    block = Block.make_eof_block(0x789A)
    assert             True is block.is_eof
    assert              255 == block.blockno
    assert           0x789A == block.addr
    assert              b'' == block.filedata
    assert                0 == block.checksum

    bb = (  b'\x02\x2A'     # magic
            b'\xFF\xFF'     # blockno and datalen identify a end block
            b'\x78\x9A'     # address
    )
    assert              bb == block.to_bytes()

    assert 'cmtconv.platform.jr200.EOFBlock(addr=0x789a)' \
        == repr(block) == str(block)

    with pytest.raises(AttributeError) as ex:
        block.filedata = b''
    assert ex.match("can't set attribute")

def test_setdata_end():
    ' Setting data on the end block would be used to confirm the checksum. '
    block = Block.make_eof_block(0x0A0B)
    block.setdata(b'', 0)
    with pytest.raises(Block.ChecksumError): block.setdata(b'', 0x01)
    with pytest.raises(ValueError):          block.setdata(b' ')

def test_fileheader_make_good():
    block = FileHeader.make_block(b'hello', FileHeader.BINARY, FileHeader.B_600)
    assert (b'hello', 1, 1) == (block.filename, block.filetype, block.baudrate)
    assert 26 == len(block._data)
    #   The data above are correct because they were
    #   generated by make() and then parsed by from_bytes().
    #   See the from_bytes tests for full internals testing.

def test_fileheader_make_error():
    ex = pytest.raises(ValueError)
    with ex: FileHeader.make_block('str',   0,  0)
    with ex: FileHeader.make_block(b'0'*17, 0,  0)
    with ex: FileHeader.make_block(b'fn',   2,  0)
    with ex: FileHeader.make_block(b'fn',   0, -1)


####################################################################
#   Creating blocks from bytes, as when reading them from tape

def test_from_header_badlen():
    with pytest.raises(ValueError) as ex:
        Block.from_header(b'\x02\x2B 1234')
    assert ex.match('Bad length: expected=6 actual=7')

def test_from_header_badmagic():
    with pytest.raises(ValueError) as ex:
        Block.from_header(b'\x02\x2B 123')
    assert ex.match('Bad magic: expected=022A actual=022B')

def test_from_header_regular():
    (block, datalen) = Block.from_header(TESTBLOCK[0:Block.headerlen])
    assert                3 == block.blockno
    assert           0x7880 == block.addr
    assert                4 == datalen
    assert              b'' == block.filedata
    assert            False is block.is_eof

def test_from_header_end():
    header = bytes([ 0x02, 0x2A, 0xFF, 0xFF, 0x00, 0x09 ])
    (block, datalen) = Block.from_header(header)
    assert             0xFF == block.blockno
    assert           0x0009 == block.addr
    assert                0 == datalen
    assert              b'' == block.filedata
    assert             True is block.is_eof

TESTFH = bytes([
    0x02, 0x2A,                 # magic number
    0x00, 0x1A,                 # block no. 0, datalen
    0xFF, 0xFF,                 # address (always $FFFF)
    0x68, 0x65, 0x6C, 0x6C,     # filename: b'hello'
    0x6F, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x01,                       # filetype: binary
    0x01,                       # baud rate: 600
    0xFF, 0xFF, 0xFF, 0xFF,     # padding
    0xFF, 0xFF, 0xFF, 0xFF,
    0x52,                       # checksum
])

def test_fileheader_from_bytes_good():
    FH = FileHeader
    assert FH.blocklen == len(TESTFH)
    block = FH.from_bytes(TESTFH)

    assert            False is block.is_eof
    assert                0 == block.blockno
    assert           0xFFFF == block.addr
    assert              b'' == block.filedata   # no file data, just metadata
    assert       TESTFH[-1] == block.checksum
    assert           TESTFH == block.to_bytes()

    assert         b'hello' == block.filename
    assert        FH.BINARY == block.filetype
    assert         FH.B_600 == block.baudrate

    assert 'cmtconv.platform.jr200.FileHeader' \
           "(filename=b'hello', filetype=BINARY baudrate=B_600)" \
        == repr(block) == str(block)

def test_fileheader_from_bytes_error():
    ve = pytest.raises(ValueError)
    ce = pytest.raises(FileHeader.ChecksumError)
    fb = FileHeader.from_bytes

    with ve: fb(TESTFH[:-1])            # bad length
    with ve: fb(TESTFH + b'\x00')
    with ve: fb(b'\x88' + TESTFH[1:])   # bad magic
    with ce: fb(TESTFH[:-1] + b'\xEE')  # bad checksum
