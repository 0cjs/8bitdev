from    testmc  import tmc_tid
from    testmc.mc6800  import *
import  pytest, re

R = Machine.Registers

object_file = 'src/mc68/pmon.p'

def loadbios(m, input=None, output=None):
    bioscode = '.build/obj/src/tmc68/bioscode.p'
    S = m.symtab
    m.load(bioscode, mergestyle='prefcur', setPC=False)
    assert S['charinport'] == S['charoutport']
    return m.setiostreams(S.charinport, input, output)

####################################################################
#   pr* - printing output

@pytest.mark.parametrize('val, char', (
    (0x00, b'0'), (0x01, b'1'), (0x0E, b'E'), (0x0F, b'F'),
    (0x10, b'0'), (0xFE, b'E'),
), ids=tmc_tid)
def test_prnyb(m, S, R, val, char):
    _, output = loadbios(m)
    m.call(S.prnyb, R(a=val))
    assert char == output.getvalue()

@pytest.mark.parametrize('val, chars', (
    (0x00, b'00'), (0x0F, b'0F'), (0xA0, b'A0'), (0xFF, b'FF'),
), ids=tmc_tid)
def test_prhex(m, S, R, val, chars):
    _, outchars = loadbios(m)
    m.call(S.prhex, R(a=val))
    assert chars == outchars.getvalue()

####################################################################
#   rd* - read input

def test_rdchar(m, R, S):
    ' Mostly confirms that our test framework works. '
    chars = b'!\x00\x7F'
    inchars, _ = loadbios(m, chars)
    for char in chars:
        m.call(S.rdchar, R(a=0xEA))
        assert R(a=char) == m.regs

    #   Document how an attempt to read past available input fails.
    with pytest.raises(EOFError) as ex:
        m.call(S.rdchar)
    assert ex.match('No more input available')

@pytest.mark.parametrize('buf, input', (
    (b'',                   b'\r'),
    (b'a',                  b'a\r'),
    (b'jklm',               b'j_\bk_\x7Fl__\b\bm\r'),
    (b'',                   b'\b\x7F\b\r'),
    (b'ij',                 b'\b\x7Fgh\b\b\b\bij\r'),
    (b'\x01\n\x1F\x7E',     b'\x01\x00\n\x00\x1F\x00\x7E\r'),
))
def test_rdline(m, R, S, input, buf):
    TERM = b'END'
    istream, ostream = loadbios(m, input + TERM)
    m.deposit(S.rdlinebuf, b'\xA5'*40)
    m.call(S.rdline)

    assert R(x=S.rdlinebuf, C=0) == m.regs
    assert buf + b'\x00' == m.bytes(m.regs.x, len(buf)+1)

    assert TERM == istream.read(len(TERM))  # no unconsumed input

    def echo_of(readchars):
        out = []
        for i in readchars:
            if   i == 0:    pass                # NUL not echoed
            elif i == 0x7F: out.append(0x08)    # DEL echoes backspace
            elif i == 0x0D: out.append(0x0A)    # CR echos newline
            else:           out.append(i)
        return bytes(out)

    assert echo_of(input) == ostream.getvalue()

def test_rdline_ctrlC(m, R, S):
    istream, ostream = loadbios(m, b'pqr\bqp\x03END')
    m.call(S.rdline)
    assert [ R(x=S.rdlinebuf, C=1), b'pqqp\x00'             ] \
        == [ m.regs,                m.bytes(m.regs.x, 5)    ]
    assert b'END' == istream.read(3)
    assert b'pqr\bqp\a\n' == ostream.getvalue()   # BEL char sent

def test_rdline_rubout_at_beginning(m, R, S):
    istream, ostream = loadbios(m, b'\b\b\babc\b\r')

    #   Whatever happens to be just before the buffer may not be
    #   the best sentinel bytes, but we can't overwrite it because
    #   we don't know if something important might be there.
    prebuf = m.bytes(S.rdlinebuf - 4, 4)
    m.deposit(S.rdlinebuf, b'\xA5'*40)

    m.call(S.rdline)
    assert R(x=S.rdlinebuf, C=0) == m.regs
    assert prebuf + b'ab\x00' == m.bytes(m.regs.x - 4, 7)

def test_rdline_overflow(m, R, S):
    buflen = S.rdlinebuf_end - S.rdlinebuf
    bufinput = b'_' * (buflen - 3) + b'yz'
    istream, ostream = loadbios(m, bufinput + b'AB\r')

    postbuf = m.bytes(S.rdlinebuf_end, 4)
    m.call(S.rdline)

    expected_buf = bufinput + b'\x00' + postbuf
    actual_buf   = m.bytes(m.regs.x, len(expected_buf))
    assert [ R(x=S.rdlinebuf, C=0), expected_buf,   ] \
        == [ m.regs,                actual_buf,     ]

    #   A BEL for each char rejected when the buffer was full.
    assert bufinput + b'\a\a\n' == ostream.getvalue()

####################################################################
#   Command support routines

def test_usepending_none(m, S, R):
    curval = 0x301; m.depword(curval, 0x2711)
    m.depword(S.Mpending, 0xC355)

    m.deposit(S.stat, 0x7F)         # no pending available
    m.call(S.usepending, R(x=curval))
    assert (0x2711, 0xC355) == (m.word(curval), m.word(S.Mpending))
    assert 0x7F == m.byte(S.stat), 'status should not have been modified'

def test_usepending_available(m, S, R):
    curval = 0x404; m.depword(curval, 0x4E22)
    m.depword(S.Mpending, 0xC355)

    m.deposit(S.stat, 0xD5)         # pending available
    m.call(S.usepending, R(x=curval))
    assert (0xC355, 0xC355) == (m.word(curval), m.word(S.Mpending))
    assert 0x55 == m.byte(S.stat), 'pendingval not marked as consumed'

def test_prperr_offset(m, S, R):
    ' Test the segment that calculates current offset into rdline buffer. '
    m.depword(S.cmdqptr, S.rdlinebuf+7)
    m.setregs(R(pc=S['prperr.tp0']))
    m.stepto(stopat=[S['prperr.tp1']])
    assert R(a=7) == m.regs

@pytest.mark.parametrize('input', [
    #   set_rdlinebuf automatically provides different buffer offsets for these.
    b'abc', b'def',
])
def test_prperr(m, S, R, input):
    inbuf = set_rdlinebuf(m, input)
    _, ostream = loadbios(m)

    m.setregs(R(pc=S.prperr))
    m.stepto(stopat=[S.cmdloop])

    offset = inbuf - S.rdlinebuf
    expected = '\n\a?{:02X} {:c}'.format(offset, input[0])
    assert bytes(expected, encoding='ASCII') == ostream.getvalue()

####################################################################
#   Commands (tested outside of command loop)

def set_rdlinebuf(m, input=b''):
    ''' Set up the input buffer with args to be parsed by a command.

        This deposits `input` into ``rdlinebuf`` at a deterministic offset
        0-7 (based on the contents of `input`), appends a $00 terminator,
        and sets the current parse pointer `cmdqptr` to that offset.
    '''
    S = m.symtab
    inbuf = S.rdlinebuf + sum(input) % 8
    print('rdlinebuf:{:04X} input@{:04X} {}'.format(S.rdlinebuf, inbuf, input))
    m.deposit(inbuf, input + b'\x00')
    m.depword(S.cmdqptr, inbuf)
    return inbuf

@pytest.mark.parametrize( 'target', [ 0x2222, 0x7055, ], ids=tmc_tid)
def test_call(m, S, R, target):
    m.depword(S.Mcallcur, target)
    m.deposit(target, [I.LDAA, 0xAA, I.RTS])
    m.call(S.call, R(a=0x55))
    assert R(a=0xAA) == m.regs

@pytest.mark.parametrize(
    '  addr, parselen, cmdarg,    data', [
    (0x0001,     0,    b'',       b''),
    (0xD123,     2,    b'ff',     b'\xFF'),
    (0x0301,     1,    b'1',      b'\x01'),
    (0x0302,     4,    b'abcd',   b'\xAB\xCD'),
    (0x0303,    20,    b'a bc def 0123  4   5',
                                  b'\x0A\xBC\xDE\x0F\x01\x23\x04\x05'),
    (0x0304,     1,    b'6x',     b'\x06'),
    (0x0305,     5,    b'6 12 x', b'\x06\x12'),
    (0x0306,     5,    b'6 13:x', b'\x06\x13'),
], ids=tmc_tid)
def test_deposit(m, S, R, addr, parselen, cmdarg, data):
    guarded = b'\xEE' + data + b'\xEE'

    m.depword(S.Mdepcur, addr)
    inbuf = set_rdlinebuf(m, cmdarg)
    m.deposit(addr-1, b'\xEE'*len(guarded))

    m.call(S.deposit, R(a=ord(':'), x=S.deposit))
    assert (inbuf,  inbuf + parselen,   guarded) \
        == (inbuf,  m.word(S.cmdqptr),  m.bytes(addr-1, len(guarded)))

@pytest.mark.parametrize(
    '  addr, cmdarg, width, lines, expmatch', [
    (0x7FFF, b'',        8,   2, '7FFF: 00 40 41 42 43 44 45 46\n'
                                 '8007: 47 48 49 4A 4B 4C 4D 4E\n'),
    (0x8000, b'L1',      8,   1, '8000: 40 41 42 43 44 45 46 47\n'),
    (0x8001, b'W3',      3,   2, '8001: 41 42 43\n8004: 44 45 46\n'),
    (0x8002, b'L1fW2',   2,  31, '8002: 42 43\n.*803E: 7E 7F\n'),
    (0x8003, b'l3w10',  16,   3, '8003: 43 .* 52\n8013: 53.*\n8023: 63.*72\n'),
    (0x8004, b'w031',    3,   1, '8004: 44 45 46\n'),
], ids=tmc_tid)
def test_examine(m, S, R, addr, width, cmdarg, lines, expmatch):
    m.deposit(0x8000, range(0x40, 0x80))    # test data to dump
    m.depword(S.Mexamcur, addr)
    m.deposit(S.Mexamwidth, 8)              # default values for tests
    m.deposit(S.Mexamlines, 2)
    inbuf = set_rdlinebuf(m, cmdarg)
    _, ostream = loadbios(m)

    m.call(S.examine)
    print('updated: lines={:02X} width={:02X}'.format(
        m.byte(S.Mexamlines), m.byte(S.Mexamwidth)))
    output = str(ostream.getvalue(), encoding='ASCII')
    print(output)

    assert (inbuf + len(cmdarg), lines, width, lines) \
        == (m.word(S.cmdqptr), m.byte(S.Mexamlines), m.byte(S.Mexamwidth),
            len(output.split('\n')) - 1,
        ), 'consumed, lines, width, outlines'
    assert re.fullmatch(expmatch, output, re.DOTALL)

@pytest.mark.parametrize('regs', [
    R(pc=0x5678, a=0x9A, b=0xBC, x=0xDEF0, cc=0xFF, sp=0x1234),
    R(pc=0x0002, a=0x03, b=0x04, x=0x0005, cc=0x00, sp=0x0001),
])
def test_show_registers(m, S, R, regs):
    print(regs)
    m.depword(S.Rpc, regs.pc)
    m.deposit(S.Ra,  regs.a)
    m.deposit(S.Rb,  regs.b)
    m.depword(S.Rx,  regs.x)
    m.deposit(S.Rcc, regs.cc)
    m.depword(S.Rsp, regs.sp)

    _, ostream = loadbios(m)
    m.call(S.regscmd)
    output = str(ostream.getvalue(), encoding='ASCII')
    print(output)

    #   XXX flags should be in more human-readable format
    #   But it may be difficult to do this with expanding beyond 32 chars:
    #        p5678 a9A bBC xDEF0 cFF s1234
    #       1--------10--------20--------30-|------40

    expected = ' p{:04X} a{:02X} b{:02X} x{:04X} c{:02X} s{:04X}\n' \
        .format(regs.pc, regs.a, regs.b, regs.x, regs.cc, regs.sp)
    assert expected == output

@pytest.mark.parametrize('command, curloc', [
    ('deposit', 'Mdepcur'),
    ('examine', 'Mexamcur'),
    ('call',    'Mcallcur'),
])
def test_command_pending_use(m, S, R, command, curloc):
    ''' Test only that commands properly store the pending value in their
        current location if a simple pending value is available. All other
        coverage comes from test_usepending_* and the individual command
        tests.

        It does this by running the command up to the first RTS, which will
        normally be the return from `bsr usepending`. For commands whose
        first call isn't to usepending, we'll have to look at other options
        or just have those test their pending setup themselves.
    '''
    cmdaddr = S[command]; claddr = S[curloc]
    print('{}={:04X} {}={:04X}'.format(command, cmdaddr, curloc, claddr))

    def run():
        m.depword(S.Mpending, 0x5678); m.depword(claddr, 0x1234)
        m.setregs(R(pc=cmdaddr)); m.stepto(stopon=[I.RTS])

    m.deposit(S.stat, 0); run()
    assert 0x1234 == m.word(claddr), 'no pending available'

    m.deposit(S.stat, 0x80); run()
    assert 0x5678 == m.word(claddr), 'available pending not used'


####################################################################
#   Command loop

@pytest.mark.parametrize('cmdchar, foundaddr', [
    ('z', 0x0F0F),
    ('y', 0x0E0E),
    ('a', 0x0101),
    ('w', None),
    ('@', None),
])
def test_cmdloop_search(m, S, R, cmdchar, foundaddr):
    ' Test the command table search routine embedded in cmdloop. '
    CMDTBL = 0x3FFE
    tabledata = [ ('z', 0x0F0F), ('y', 0x0E0E),
                  ('a', 0x0101), ('\x00', 0x0000),
                ]
    for entry, char_addr in enumerate(tabledata):
        offset = entry * 3; char, addr = char_addr
        m.deposit(CMDTBL+offset,   [ord(char)])
        m.depword(CMDTBL+offset+1, [addr])
    m.depword(S.cmdtbl, CMDTBL)

    callcmd = S['cmdloop.callcmd'] + 2  # instruction after loading address
    unkcmd  = S['cmdloop.unkcmd']

    m.setregs(R(pc=S['cmdloop.search'], a=ord(cmdchar)))
    m.stepto(stopat=[callcmd, unkcmd], maxsteps=10000)

    if foundaddr is not None:
        #   We've loaded the right command address and are about to call it
        assert R(pc=callcmd, x=foundaddr) == m.regs
    else:
        #   We've gone through the entire table and not found the command.
        lastentry = CMDTBL + 3 * (len(tabledata)-1)
        assert R(pc=unkcmd, x=lastentry) == m.regs

def test_cmdloop_quitcmd(m, S, R):
    ' Minimal path that gets us through to exit. '
    #   Quit doesn't return to the parser loop; it manually removes the
    #   return address that .parse added. This means our JSRs/RTSs will
    #   match, so in this one case we can use m.call().
    istream, ostream = loadbios(m, b'q\r')
    m.depword(S.cmdtbl, S.cmdtbl_std)
    m.call(S.cmdloop)
    assert b'\n^q\n' ==  ostream.getvalue()
    #   Make sure we exited at the point where we expected.
    assert R(pc=S.rtscmd) == m.regs

def test_cmdloop_cancel(m, S, R):
    ' Confirm that ctrl-C terminates input, ignores line. '
    istream, ostream = loadbios(m, b'^~123~^\x03' b'q\r')
    m.depword(S.cmdtbl, S.cmdtbl_std)
    m.call(S.cmdloop)
    assert b'\n^^~123~^\x07\n' b'^q\n' ==  ostream.getvalue()
    #   Make sure we exited at the point where we expected.
    assert R(pc=S.rtscmd) == m.regs

def test_cmdloop_parse_error(m, S, R):
    ''' This checks not only the error message, but also, by showing that
        `q` works properly after a parse error, that the stack is handled
        correctly when we abort parsing the command line.
    '''
    istream, ostream = loadbios(m, b'\xC0z\xC0\xC0\rq\r')
    m.depword(S.cmdtbl, S.cmdtbl_std)
    m.call(S.cmdloop)
    assert (
        b'\n^'              # prompt
        b'\xC0z\xC0\xC0\n'  # first input line echoed
        b'@'                # output of ^ command
        b'\n\a?01 z'        # error message
                            # `\xC0` commands after error are ignored
        b'\n^'              # prompt
        b'q\n'              # second input line echoed
      ) == ostream.getvalue()

####################################################################
#   Integration tests

def test_cmdloop_pending(m, S):
    ' Ensure that pending values are loaded properly. '
    istream, ostream = loadbios(m, b'3039q\r')
    m.call(S.init)
    assert b'\n^3039q\n' ==  ostream.getvalue()
    pendingbit = m.byte(S.stat) & 0x80  # isolate pending bit
    assert (0x80, 0x3039) == (pendingbit, m.word(S.Mpending))

def test_cmdloop_multicmd(m, S):
    ' Multiple command processing of the simplest possible commands. '
    istream, ostream = loadbios(m, b'\xC0\xC0 \xC0q\r')
    m.call(S.init)
    assert b'\n^\xC0\xC0 \xC0q\n' b'@@@' ==  ostream.getvalue()

def test_cmdloop_multiline(m, S):
    ''' Simple commands split across lines.

        This demonstrates some ill-formed behaviour; entering a line causes
        the input routine to produce a newline, but then the prompt prints
        another newline even though there was no output on the existing
        line. When we print newlines needs to be reworked.
    '''
    istream, ostream = loadbios(m, b' \r\xC0\rq\r')
    m.call(S.init)
    expected = (
        '\n^'          # prompt
        ' \n'          # input echo: space EOL NL
        '\n^'          # prompt
        '\xC0\n'       # input echo: print @ command, EOL NL
        '@'            # print @ command output
        '\n^'          # prompt
        'q\n'          # input echo: quit command, EOL NL
        )
    #   Not actually ISO-8859-1, but just transparent 8-bit pass-through.
    assert bytes(expected, encoding='ISO-8859-1') ==  ostream.getvalue()

def test_cmdloop_deposit_examine(m, S):
    ' Simple integration test. '
    istream, ostream = loadbios(m, b'7654x 7655:ab:x :cd:x q\r')
    m.call(S.init)
    print(m.regs); print(m.hexdump(m.regs.sp-8, 8))
    output = ostream.getvalue(); print(output)
    assert b'\n7654: 00 AB 00' in output
    assert b'\n7654: 00 CD 00' in output

####################################################################

@pytest.mark.skip
def test_cmdloop_eachrts(m, S, R):
    ''' A (currently non-working) hack to do "selective trace," printing
        the current instruction, stack contents and buffer contents at a
        few points during execution.
    '''
    input = b'a800\r3q\r'
    input = b'^ \xC0\xC0q\r'
    istream, ostream = loadbios(m, input)
    m.deposit(0xA800, b'ABCDEFGH')

    stackbase = m.regs.sp + 1
    def showstack():
        return '{:02X}{:02X} {:02X}{:02X} {:02X}{:02X} {:02X}{:02X}' \
            .format(*m.bytes(stackbase-8, 8))

    m.setregs(R(pc=S.cmdloop))
    level = 0
    print('{}                {}'.format(m.regs, showstack()))
    while True:
        m.stepto(stopon=[I.JSR, I.BSR, I.RTS, I.PSHA],
            stopat=[ S['rtscmd'], S['cmdloop.parse'] - 1 ])
        r = m.regs
        opcode = m.byte(r.pc)
        if   opcode == I.PSHA:
            level += 1
            inst = 'PSH'
            dest = S['cmdloop.parse']
        elif opcode == I.JSR:
            level += 1
            inst = 'JSR'
            dest = m.word(r.pc+1)
        elif opcode == I.BSR:
            level += 1
            inst = 'BSR'
            dest = r.pc + 2 + m.byte(r.pc+1)
        else:
            level -= 1
            inst = 'RTS'
            dest = 0
        print('{} {:3d} {} {:04X}   {}   {}'
            .format(r, level, inst, dest, showstack(), m.bytes(r.x, 6)))

    assert 0
