;   mc68/pr/dec - Print numbers in decimal

;   Required definitions:
;   • _a,_x:    addresses of temporary storage
;   • prchar    ♡ABX print character in A

; ----------------------------------------------------------------------
;   ♣ABX,_a,_x  Print unsigned 16-bit int at (X) in decimal.
;
;   This uses the relatively simple and fast "multiple subtraction of
;   factors" method: count all the 10,000s you can subtract, print out
;   that digit, then the 1,000s, and so on. This iterates fewer loops
;   than doing actual division and also produces digits in the output
;   order while using minimal storage space.
;

        ifndef prdec_u16
prdec_u16

.n          equ _x          ; temporary storage
.printing   equ _a          ; bits 0..6: initial value of factor count (0)
                            ;     bit 7: 1 if we are printing all digits,
                            ;            0 if we are in non-printed leading 0s

            lda A,0,X       ; copy input MSB...
            sta A,.n
            lda A,1,X       ;   ...and LSB
            sta A,.n+1
            ldx #.ten_tab-2 ; position just before first (largest) factor
            clr A           ; start with high bit clear, meaning that
            sta A,.printing ;   we do not print 0 values

.nextfactor inx             ; next factor
            inx
            lda B,.printing ; count of this factor's quantity and printing flag
            lda A,1,X       ; end of list marker?
            bne .subfactor  ;   nonzero: carry on

            lda A,.n+1      ; remaining amount is final digit
            add A,#'0'
            jmp prchar      ; RTS (TCO)

            ;   All possible 10^n (where n>0) factors of $FFFF, terminated
            ;   by low-byte 0. The termination is slightly tricky: it relies
            ;   on the fact that none of the factors have an LSB of 0.
.ten_tab    dw  10000, 1000, 100, 10, 0

.subfactor
            lda .n+1        ; subtract factor from LSB...
            sub A,1,X
            sta .n+1
            lda .n
            sbc A,0,X       ;   ...and MSB
            sta .n
            bcs .finfactor  ; we underflowed; we're done with this factor
            inc B
            bra .subfactor

.finfactor  ;   Add factor back into current value to undo underflow.
            lda A,.n+1      ; LSB and...
            add A,1,X
            sta A,.n+1
            lda A,.n        ;   ...MSB
            adc A,0,X
            sta A,.n

            tba             ; count of this factor and leading 0 suppress flag
            beq .noprint    ; no count and flag=0: skip printing leading 0

            and A,#$7F      ; clear printing leading 0s flag, if present
            add A,#'0'      ; convert to ASCII
            jsr prchar
            lda A,#$80      ; ensure we print all digits from now on
            sta A,.printing
.noprint    bra .nextfactor

        endif ; !defined(prdec_u16)
