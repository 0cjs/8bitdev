from    testmc.registers  import HasRegisters
import  pytest

def test_register_def_read_set():
    class Machine(HasRegisters):
        register('a')
        register('b')

    m = Machine();  assert (0x00, 0x00) == (m.a, m.b)
    m.a  = 0xFF;    assert (0xFF, 0x00) == (m.a, m.b)
    m.b  = 0x80;    assert (0xFF, 0x80) == (m.a, m.b)

@pytest.mark.parametrize('regname, maxvalue, badvalue', (
    ('pc',  'FFFF', -1),
    ('pc',  'FFFF', 0x10000),
    ('a',   'FF',   -1),
    ('a',   'FF',   0x100),
))
def test_width_checks(regname, maxvalue, badvalue):
    class Machine(HasRegisters):
        register('pc', 16)
        register('a')

    m = Machine()
    with pytest.raises(ValueError) as ex:
        setattr(m, regname, badvalue)
    assert ex.match(r'{} value out of range \$00-\${}: \${:02X}$'
        .format(regname, maxvalue, badvalue))

def test_per_object_values():
    ''' Because the objects implementing the descriptor protocol are class
        objects, one must be careful that you're storing the actual data
        with the instance, not the class.
    '''
    class Machine(HasRegisters):
        register('a')

    m3 = Machine();     m3.a = 3
    m4 = Machine();     m4.a = 4
    assert (3, 4) == (m3.a, m4.a)

    m0 = Machine()
    assert (3, 4, 0) == (m3.a, m4.a, m0.a)

def test_init_preserved():
    class Machine(HasRegisters):
        def __init__(self, val0, *, val1=None):
            ' Setup should insure that this is called with args and kwargs. '
            self.val0 = val0
            self.val1 = val1
        register('a')

    m = Machine(33, val1=44)
    assert (33, 44) == (m.val0, m.val1)
    assert 0 == m.a
