;   pmon: a machine-language monitor

; ---------------------------------------------------------------------------
;   Monitor Entry, Stack Pointer and Saved Program Counter

;   A reset may be "cold" (the system has just been powered on, and RAM and I/O
;   are not initialized) or "warm" (the system can continue with its current
;   configuration).
;
;   The "OS" is whatever has most recently done a cold reset initialization
;   (whether via an actual reset or just calling the cold reset code), setting
;   up the stack and I/O. This is usually the system ROM, but may also have
;   been a user-supplied cold reset routine that then entered pmon.
;
;   A vendor-supplied ROM OS may or may not support warm resets. The Apple II
;   Autostart Monitor does; the Apple II "Old Monitor" does not. (See _Apple II
;   Reference Manual_ (1979) pp. 36-38.)
;
;   Pmon supports warm resets: the standard entry point will always attempt to
;   determine whether it needs to (re-)initialize its own data (memory) and any
;   I/O devices it owns (such as a serial console not set up by the OS). Pmon
;   generally avoids setting the stack; see below for more on SP handling.
;
;   XXX Pmon warm resets are not yet properly implemented.
;
;   There are four ways of entering the monitor:
;   1. JMP into the monitor from the OS (direct entry by OS or manually via
;      vendor monitor or BASIC) or other running program. This leaves us with
;      no information about the caller, beyond what its current SP is.
;   2. JSR from OS etc. We know the calling address from the stack, and the
;      quit (`q`) command will return to the calling program. (Quit has
;      undefined behaviour otherwise; can we mitigate this? Can we even detect
;      that we were entered with JSR instead of JMP?)
;   3. From an interrupted running program (NMI or SWI/breakpoint).
;   4. Return from a call (`k`) command.
;
;   *** Saved Program Counter (PC) Handling
;
;   1. Saved PC unchanged. The current PC is irrelevant; any value useful to
;      the monitor was lost at reset.
;   2. ??? Use return addr from stack? How do we tell it's valid?
;   3. Save PC from the interrupt stack frame. The user can view it for
;      debugging, and it's available when rebuilding the stack frame for an
;      RTI. There should be some way of easily using this as the target for
;      jump/continue/step/trace commands.
;   4. Saved PC unchanged. The current PC is irrelevant, and we have no
;      information about what it was before the RET that returned us to the
;      call command.
;
;   *** Saved Stack Pointer (SP) Handling
;
;   pmon always uses the existing SP no matter how entered.
;
;   For cases 1-3 it assumes that the OS or program has set a reasonable SP
;   with enough stack space available for the monitor's needs (a few dozen
;   bytes, probably). For a system with only pmon on it, the "OS" is the reset
;   vector code that sets up the stack and I/O; returning to this might just
;   re-enter the monitor.
;
;   For case 4 (return to call command) it currently assumes that the SP was
;   not changed; this allows it to continue parsing the command line after a
;   call. It might be possible for pmon to detect a change of stack by a called
;   routine (which would have to copy the pmon return address to the new stack)
;   and restart pmon, but it's not clear how useful this would be.
;
;   The saved SP represents the most recent SP we've seen from a program that
;   entered the monitor in any way other than returning after a call command.
;   (This is useful for debugging programs, or sometimes seeing how one entered
;   the monitor.) The entry cases are:
;   1. SP is saved at entry, allowing the user to examine the OS/calling
;      program stack.
;   2. Same as #1.
;   3. Pmon saves the SP  after removing interrupt stack frame. (This lets the
;      user examine the program's stack contents.) The interrupt stack frame is
;      rebuilt from saved regs if RTI is used to continue.
;   4. Pmon does not save the SP; the old value is maintained since that's the
;      last one we know of that we did not set. (It's assumed that the called
;      routine did not change the SP; see above.)
;

; ---------------------------------------------------------------------------

    ifdef UNIT_TESTING
;   XXX These definitions should really be coming from the .pt file.
pmon_ramlo      equ $80
rdlinebuf       equ $110
rdlinebuf_end   equ $140    ; 48 chars
pmon_ramhi      equ $180
pmon_org        equ $1000
    endif

; ----------------------------------------------------------------------
;   Memory Configuration

;   The memory areas used by the monitor are configured by constants that
;   must be defined before this file included.
;
;   `pmon_ramlo`, `pmon_ramhi` and `rdlinebuf`-`rdlinebuf_end` are the
;   three blocks of RAM storage required by the monitor. They all may be
;   anywhere in memory, but there is a slight code size and performance
;   benefit to having `pmon_ramlo` in the direct page.
;
;   `pmon_ramhi` may be left undefined to place that area immediately after
;   `pmon_ramlo`
;
;   `pmon_org` sets the start of the code.
;
;   XXX define pmon_ramlo_end and pmon_ramhi_end? Test usefulness with
;   usage of these forward definitions.

;   Abort assembly with a clear message if an essential definition is missing.
    set ______,
    pushv , pmon_ramlo, rdlinebuf, rdlinebuf_end, pmon_org
    popv  , ______,     ______,    ______,        ______

; ----------------------------------------------------------------------
;   Standard functions, macros and definitions
;   (Much of this should probably be moved to `stddef`.)

;   ASCII character definitions
BEL         equ $07                 ; bell ('\a')
BS          equ $08                 ; backspace ('\b')
LF          equ $0A                 ; line feed ('\n')
CR          equ $0D                 ; carriage return ('\r')

;   Monitor definitions
PROMPT      equ '^'

    ifndef EXWIDTH
EXWIDTH     equ $10                 ; examine default: 16 bytes/line
    endif

; ----------------------------------------------------------------------
;   Storage for variables that must be in RAM.
;   Monitor variables are prefixed with `M`.

; ----------------------------------------
;   "Low" area aimed at maximum gain from minimum direct page usage.
;
;   It's a convention in this repo to have _[axbyij] zero pages words
;   defined for arithmetic routine parameters/returns/counters so we re-use
;   this here for temp space for non-arithemtic routines.
;
            org pmon_ramlo

_a          ds  2
_x          ds  2
_i          ds  1
qhex_out    ds  2       ; last qhex result ($0000 if qhex failed)
cmdqptr     ds  2       ; Current parsing point in command input buffer.
                        ; Update this to consume parsed text, but do not
                        ; ever move it past the terminating $00.
Mpending    ds  2       ; last value input before a command

stat        ds  1       ; status values
stat_pend   equ $80     ;   b7: 0=no pending value, 1=pending value available
stat_begline equ $40    ;   b6: 1=we are at the beginning of a line
                        ;       0=we are in the middle of a line (or don't know)
                        ;   b5-0: unused

pmon_ramlo_end equ *

; ----------------------------------------
;   "High" area that gains little from being in the direct page.
        if defined(pmon_ramhi)
            org pmon_ramhi
        endif

cmdtbl      ds  2       ; pointer to command table (see below)
;   Saved register values (same memory order as interrupt stack frame):
Rcc         ds  1       ; condition codes
Rb          ds  1       ; accumulator B
Ra          ds  1       ; accumulator A
Rx          ds  2       ; index register X
Rpc         ds  2       ; program counter
Rsp         ds  2       ; stack pointer
;   Command data
Mexamcur    ds  2       ; examine command current start addr
Mexamwidth  ds  1       ; examine width: bytes per line to print
Mexamlines  ds  1       ; examine lines: number of lines to print
Mdepcur     ds  2       ; deposit command current start addr
Mcallcur    ds  2       ; call command address to call

;   Stack position + 1 at start of parsing continuation, enabling prperr_abort
;   to drop any arbitrary amount of stack data pushed by command routines if,
;   instead of returning up the stack, they abort due to a parse failure or
;   other error. In essence, the exception catch point. It's SP+1 because
;   that's what TSX gives us, TXS corrects this, and we don't use it otherwise
;   so there's no point in spending cycles to "correct" it.
perr_stack  ds  2

pmon_ramhi_end equ *

; ----------------------------------------------------------------------
;   Code

            org pmon_org

; ----------------------------------------------------------------------
;   Command loop

init        ;   The SP in the saved registers defaults to our SP at monitor
            ;   entry. This points to the address where Cquit would return; our
            ;   monitor stack starts immediately underneath. (See above for
            ;   details on this.)
            tsx
            dex
            stx Rsp
            ;   Minimum initialization to avoid truly broken behaviour.
            ldx #cmdtbl_std     ; default command table
            stx cmdtbl
            lda A,#EXWIDTH      ; default examine width
            sta A,Mexamwidth
            lda A,#8            ; default examine lines to print
            sta A,Mexamlines
            ; fallthrough

cmdloop     jsr startline       ; prompt always printed at start of line
            lda A,#PROMPT
            jsr prchar
            jsr rdline
            bcs cmdloop         ; if ^C, ignore line
            stx cmdqptr         ; start parsing at beginning of input line

.parse      ;   Registers may have been destroyed at entry here.
            ldx cmdqptr
            lda A,0,X           ; reached terminator?
            beq cmdloop         ; yes, read another line of commands

            ;   Save our current stack position so we can restore it on a
            ;   command abort, dropping any stack data pushed from here on.
            tsx
            stx perr_stack

            ;   Standard commands will RTS when done; we set up the stack
            ;   so that after we JMP to them they will come back here where
            ;   we will continue parsing the remainder of the command line.
            ;   (Essentially, continuation-passing style.)
            lda A,#LB(.parse)
            psh A
            lda A,#MB(.parse)
            psh A

            ;   Start by attempting to parse a hexword as the pending value.
            ldx cmdqptr         ; continue parsing at current parse point
            jsr qhexword        ; parsed a hexword?
            beq savepending     ; yes, save as pending and carry on parsing

            ;   Consume a char and parse it as a command.
            ;   (Callees may DEX to get the input buf addr of the parsed char.)
            lda A,0,X           ; load char we're checking
            inx                 ; move input pointer to next char
            stx cmdqptr         ;   for later

.search     ldx cmdtbl
.contsearch lda B,0,X           ; load next command char from table
            cmp B,#00           ; end of table?
            beq .unkcmd         ; yes, unknown command
            cba                 ; found command?
            beq .docmd          ; yes, call it
            inx                 ; skip past command char in table
            inx                 ;   and its address
            inx
            bra .contsearch

.docmd      ldx 1,X             ; load command address
            jmp ,X              ; call command (TCO)

            ;   No command matched; we have an error
.unkcmd     ldx cmdqptr         ; restore parse point because we had consumed
            dex                 ;   the command
            stx cmdqptr
            ; fallthrough

;   Parse error: beep, print message, start fresh parser loop.
;
;   On a parse error we stop parsing (ignoring the remainder of the line)
;   and print a message `?nn c` where `c` is the offending character and
;   `nn` is its (zero-based) hex offset in the input buffer.
;
;   prperr_abort first restores the stack to where it was before we set up
;   the parse continuation and called the command, so that a command can
;   abort without having to do its own stack cleanup first.

prperr_abort
            ldx perr_stack      ; drop everything on stack created by
            txs                 ;   a command that aborted

prperr      jsr startline
            jsr errbeep
            lda A,#'?'
            jsr prchar
.tp0        ;   Subtract rdline buffer head address from current parse
            ;   position to get current offset into the parse buffer.
            ;   Since it's an unsigned subtraction, we can ignore the
            ;   MSB. This produces a wrap-around at $100, but it's unlikely
            ;   developers will have buffers that long, much less actual
            ;   command lines that long.
            lda A,cmdqptr+1
            sub A,#LB(rdlinebuf)
.tp1        jsr prhex
            jsr prspace
            ldx cmdqptr
            lda A,0,X
            cmp A,#' '+1
            bcs .hexchar        ; space and below prints as hex
            cmp A,#$7F
            bcc .hexchar        ; DEL and above prints as hex
            jsr prchar
            bra .exit
.hexchar    jsr prhex
.exit       jsr nextline
            jmp cmdloop

;   Consume just-parsed text and save pending value in qhex_out.
;
;   This is sort of a pesudo-command: the stack return is expected to be the
;   parsing continuation (as with a real command) but A/X/cmdqptr are not
;   advanced before entry.
;
savepending stx cmdqptr         ; consume the parsed text
            ldx qhex_out        ; copy parsed value into pending
            stx Mpending
            lda A,stat
            ora A,#$80          ; ensure pending available bit set
            sta A,stat
            rts

;   ♠X,stat ♣A  Copy Mpending to (X), if available.
;
;   If `stat` has bit 7 clear, indicating that the last call to `qhex` read
;   a value, copy that value to the location pointed to by X and clear bit
;   7 of `stat`. Otherwise do nothing.

usepending  tpa                 ; set bit 7 (pending available) in A
            bit A,stat          ; is it set?
            bpl .done           ; no, nothing pending
            lda A,Mpending      ; copy MSB
            sta A,0,X
            lda A,Mpending+1    ; copy LSB
            sta A,1,X
            lda A,stat
            and A,#$7F          ; clear pending available bit to indicate
            sta A,stat          ;   that Mpending has been consumed
.done       rts

;   ♣B Indicate to startline that we have text on the current line.
inline      lda B,stat
            and B,#(~stat_begline) ; clear begining of line bit
            sta B,stat
            rts

;   ♣A Print a newline if we have text on the current line (`inline` state).
startline   lda A,stat
            and A,#stat_begline ; at beginning of line?
            beq nextline        ; no, print a newline
            rts

;   ♣A Print a newline and clear inline state.
nextline    lda A,stat
            ora A,#stat_begline ; set beginning of line state
            sta A,stat
            jsr prnl
            rts

; ----------------------------------------------------------------------
;   Command Table

;   The `cmdtbl` variable points to the current command table used by the
;   parser. Each 3-byte entry is one of:
;   • A command character followed by the address of the routine
;     for that command; the routine should finish with RTS.
;   • A $00 character and $0000 address indicating end of table.
;   • XXX need to define entry for continuation address of table.
;   Commands may destroy any registers and _[axbyij] variables.

;   `init` sets `cmdtbl` to point to `cmdtbl_std`. The user may change this
;   to point to his own command table to add new commands or override
;   existing ones; usually the last entry of the user's table would be a
;   continuation pointer to `cmdtbl_std`.

cmdtbl_std
            db ' '
            dw      Crts        ; do nothing
            db ':'
            dw      Cdeposit    ; enter data into memory
            db '?'
            dw      Cquery      ; show representations of pending
            db '^'
            dw      Cnl         ; print newline
            db 'k'
            dw      Ccall       ; JSR to address ("kall")
            db 'q'
            dw      Cquit       ; "quit"; exit to monitor's caller
            db 'r'
            dw      Cregisters  ; show/set saved registers
            db 'x'
            dw      Cexamine    ; examine memory
            db $C0
            dw      Cprat       ; print '@'; used for testing
            db $00
            dw      $0000       ; end of table

; ----------------------------------------------------------------------
;   Commands
;
;   When a command routine is called, A will contain the command char and
;   `cmdqptr` will point to the first character after the command. If the
;   command routine does further parsing of arguments, it must increment
;   `cmdqptr` to consume what it has parsed. RTS will continue parsing
;   from `cmdqptr`.

Cquit       pul B               ; remove parse continuation address so that we
            pul B               ;   return to what called the monitor
            ; fallthrough

Crts        rts                 ; do-nothing command

;   This command is used for testing the command parser; it's usually
;   bound an unprintable character such as $C0 (`@` with MSbit set).
Cprat       jsr inline
            lda A,#'@'
            jmp prchar          ; RTS (TCO)

;   Print a newline (even if not inline).
;   This is useful for separating output, and also used by unit tests.
Cnl         equ nextline

;   Call ("kall") to an address.
;
;   This leaves the monitor stack and other data in place so that an RTS
;   will continue parsing the command line.
;
;   WARNING: This assumes that the code being called will not change the
;   input buffer or move the stack! The monitor may also break if other
;   locations it depends upon are overwritten.
;
;   Before the call, this sets the registers and condition codes (excepting the
;   PC and SP) to the saved values, and saves the same at return. This is
;   handy for testing/debugging subroutines, but means that the information
;   needed to resume after an interrupt that entered the monitor is destroyed.

Ccall       ldx #Mcallcur
            bsr usepending
            ;   Set up return address for this call
            lda #LB(.callreturn)
            psh A
            lda #MB(.callreturn)
            psh A
            ;   Build an RTI stack frame from address of the routine to
            ;   call and the saved register values.
            lda Mcallcur+1
            psh A
            lda Mcallcur
            psh A
            lda Rx+1
            psh A
            lda Rx
            psh A
            lda Ra
            psh A
            lda Rb
            psh A
            lda Rcc
            psh A
            ;   Set the register values and "call" the routine.
            rti

.callreturn ;   We can't just start with `STA A,Rcc` becuase that changes the
            ;   flags. (Making store instructions affect flags was not the best
            ;   decision Motorola ever made.) So instead:
            psh A           ; does not affect flags
            tpa
            sta A,Rcc       ; save condition codes at return
            pul A
            sta A,Ra        ; save accumulators and index register at return
            sta B,Rb
            stx Rx
            ;   The current PC is irrelevant, and we have no information about
            ;   what the PC was at the RET that brought us back here. So we do
            ;   not update the saved PC. This leaves intact the saved PC of the
            ;   interrupt point that entered the monitor, if present, but
            ;   we cannot continue from interrupt after a call command because
            ;   the call command changed A/B/X/CCR.
            ;
            ;   We assume that the caller did not move the stack, so the saved
            ;   SP stays at its value as of the last monitor entry (or change
            ;   by the user). Had the routine moved the stack, our behviour now
            ;   would be undefined unless it copied our stack data to the new
            ;   stack.
            rts

;   deposit byte arguments to memory at Mcur.
;
;   The argument is pairs of ASCII hex digits. Spaces terminate reading of
;   a single-digit byte and are otherwise ignored. The data are terminated
;   by any other character, which will be left to be executed as the next
;   command on the line. The one exception is `:`, which is consumed in
;   order to provide a convenient way of terminating input when the
;   following command is a hex number that would otherwise be interpreted
;   as data to be deposited.
;
Cdeposit    ldx #Mdepcur
            jsr usepending
            ldx Mdepcur
            stx _a              ; deposit index
.next       ldx cmdqptr         ; current input pointer
            jsr qhexbyte
            bne .nothex         ; not hexbyte, skip space or end
            stx cmdqptr         ; save next parse position
            lda A,qhex_out+1    ; byte we just read
            ldx _a              ; current deposit index
            sta A,,X
            inx
            stx _a              ; next deposit index
            bra .next

.nothex     lda A,,X            ; load next character
            cmp A,#':'          ; terminator to consume?
            beq .term           ; yes, we're done
            cmp A,#' '          ; is it a space?
            bne .rts            ; no, we're done
            inx                 ; skip past space
            stx cmdqptr
            bra .next           ; and continue parsing

.term       inx                 ; consume terminator
            stx cmdqptr
.rts        rts

;   "Query" pending, without consuming it. If no pending is available,
;   this uses the most recent value of pending. The value is printed in
;   hex, decimal (XXX not yet implemented), ASCII, etc.
;
Cquery      jsr inline          ; output after this continues on same line

            lda #'$'            ; hex value
            jsr prchar
            lda A,Mpending
            jsr prhex
            lda A,Mpending+1
            jsr prhex
            jsr prspace

            ldx #Mpending       ; decimal value
            jsr prdec_u16
            jsr prspace

            lda #'\''           ; ASCII characters
            jsr prchar
            lda A,Mpending
            jsr prvischar
            lda A,Mpending+1
            jsr prvischar
            lda #'\''
            jsr prchar

            ;   Space instead of CR at end of output works better when
            ;   we have multiple commands per line.
            jsr prspace
            rts

;   Examine memory.
;
;   Starting at address `Mexamcur', `Mexamlines` of `Mexamwidth` bytes are
;   printed in hexadecimal.
;
;   If a pending value is available, `Mexamcur` is set to that, otherwise
;   it's left unchanged. Arguments after the command change persistent
;   seeings and are any of the following, where `NN` indicates a hexbyte.
;   Whitespace (including EOL) terminates the argument list.
;   - lNN   number of lines to dump
;   - wNN   nubmer of bytes dumped per line

Cexamine    ldx #Mexamcur
            jsr usepending
            ldx #.opttab
            jsr qcmdopts

.print      jsr startline
            lda A,Mexamlines    ; lines to print
            sta A,_i            ; set remaining lines left to print
            ldx Mexamcur        ; load start location to examine
.nextline   ;   print current line address
            stx _a
            lda A,_a            ; addr hi
            jsr prhex
            lda A,_a+1          ; addr lo
            jsr prhex
            lda A,#':'
            jsr prchar
            ;   print data
            lda B,Mexamwidth    ; bytes per line
.nexthex    jsr prspace
            lda A,,X
            jsr prhex
            inx
            dec B
            bne .nexthex
            jsr prnl
            dec _i              ; lines left to print
            bne .nextline
            rts

.opttab     db 'l',OPTbyte      ; number of lines of dump output
            dw Mexamlines
            db 'w',OPTbyte      ; number of bytes per dump line
            dw Mexamwidth
            db 0                ; terminator

;   show/set saved registers
;
;   The registers are named with single letters `pabxcs`. With no args, the
;   registers are printed as (space-prefixed) ` Cval` pairs of name character
;   and 2- or 4-character value. Otherwise arguments of a register letter
;   followed immediately by a hexbyte or hexword (depending on register size)
;   set register values. The argument list must be terminated by whitespace or
;   end of input.

Cregisters  jsr qwspace         ; check args after command
            bcc .set            ; if not whitespace, we're setting registers

.show       lda A,#'p'
            lda B,Rpc
            jsr prchval
            lda A,Rpc+1
            jsr prhex

            lda A,#'a'
            lda B,Ra
            jsr prchval

            lda A,#'b'
            lda B,Rb
            jsr prchval

            lda A,#'x'
            lda B,Rx
            jsr prchval
            lda A,Rx+1
            jsr prhex

            lda A,#'c'
            lda B,Rcc
            jsr prchval

            lda A,#'s'
            lda B,Rsp
            jsr prchval
            lda A,Rsp+1
            jsr prhex

            jmp prnl            ; RTS TCO

.opttab     db 'p',OPTword      ; program counter
            dw Rpc
            db 'a',OPTbyte      ; ACC A
            dw Ra
            db 'b',OPTbyte      ; ACC B
            dw Rb
            db 'x',OPTword      ; index register
            dw Rx
            db 'c',OPTbyte      ; condition code register
            dw Rcc
            db 's',OPTword      ; stack pointer
            dw Rsp
            db 0                ; terminator

.set        ldx #.opttab
            jmp qcmdopts        ; RTS TCO

;   ♣A print space, char in A, byte in B as hex
prchval     psh B               ; some platforms's prchar may not preserve this
            psh A
            jsr prspace
            pul A
            jsr prchar
            pul A               ; previous B value
            jmp prhex           ; RTS TCO


; ----------------------------------------------------------------------
;   rd* - read input

;   ♠X ♣A ♡B Read a line of user input into rdlinebuf, echoing each character.
;   On return X will point to the start of the chars read, terminated by $00,
;   and the carry will be clear for CR termination, set for ^C termination.
;
;   The following characters are interpreted specially:
;     - BS, DEL: if not at start of input, echo a BS and delete the
;       previously entered character.
;     - CR: echo a newline and return with C=0.
;     - ^C: beep, echo a newline and return with C=1.
;
;   This uses a fixed input buffer, rdlinebuf, which is overwritten with every
;   call. When the buffer is full rdline will beep instead of accepting input.
;
rdline      ldx #rdlinebuf
.nextchar   jsr rdchar
            cmp A,#CR           ; done?
            bne .continue
            jsr prnl
            clr ,X              ; clears carry
.ret        ldx #rdlinebuf      ; no effect on carry
            rts

.continue   cmp  A,#$03         ; Ctrl-C
            beq  .cancel
            ;   If we're on the last byte of the buffer, we need to save that
            ;   for the termination char. So just reject input at that point.
            cpx #(rdlinebuf_end - 1)
            bne .accept
            jsr errbeep
            bra .nextchar

.accept     cmp  A,#$00         ; ignore NUL
            beq  .nextchar
            cmp  A,#BS
            beq .backspace
            cmp  A,#DEL
            beq .backspace
            sta A,0,X
            inx
.echo       jsr prchar
            bra .nextchar

.backspace  cpx #rdlinebuf
            beq +               ; don't backspace past beginning of buffer
            dex
+           lda A,#BS
            bra .echo

.cancel     ;   We terminate without storing the Ctrl-C char mainly
            ;   because we don't know if we have space for it. We might
            ;   be on the last byte of the buffer already.
            clr ,X
            jsr errbeep         ; beep to indicate cancel
            jsr prnl
            sec                 ; indicate input cancelled
            bra .ret

; ----------------------------------------------------------------------
;   q* - parsing

            include "src/mc68/qhex.a68"

;   ♠X,cmdqptr,A  Parse/consume one whitespace char at cmdqptr
;   Returns:
;     - C=1 if whitespace is found, C=0 otherwise
;     - A = char found at cmdqptr (whether consumed or not)
;     - X = copy of (possibly updated) cmdqptr
;
;   If the char at cmdqptr is whitespace and not the input terminator, it will
;   be consumed by incrementing cmdqptr. The input line terminator $00 is
;   considered to be whitespace, but is not consumed to avoid moving past the
;   end of the input.
;
qwspace     ldx cmdqptr
            lda A,,X
            cmp A,#$00
            beq .noconsume
            cmp A,#'\t'
            beq .consume
            cmp A,#'\n'
            beq .consume
            cmp A,#'\r'
            beq .consume
            cmp A,#' '
            beq .consume
            clc                 ; failure
            rts

.consume    inx
            stx cmdqptr
.noconsume  sec                 ; success
            rts

;   ♣X,A,B,_a,_x  qcmdopts
;   Process command options from `cmdqptr` per table at X
;
;   Command options are a sequence of option letter followed by that
;   option's value; whitespace (or EOL) terminates the command's options.
;
;   The table is an array, terminated by a 0 byte, of:
;   - the option character (byte),
;   - the type of the option's value (byte, definitions below), and
;   - the location where the value is to be stored (word).
;
;   An option may be any character, but using characters that are also hex
;   numbers (0-9 and A-F) may cause some inconvenince to the user since
;   they may be interpreted as option values. E.g., if `a` and `x` are
;   option characters with byte values, `x2a3` will be interpreted as "set
;   X to $2A" follwed by a parse error; to set X then A in this instance
;   one would have to enter `x02a3`.

OPTbyte     equ  %011
OPTword     equ  %110
OPTtable    equ _a
OPTvaladdr  equ _x

qcmdopts    stx OPTtable        ; save command options table location
.parsenext  ;   process the next option in the input
            jsr qwspace         ; ♠AX end of options given to command?
            bcs .done           ; yes, we're done
            ;   A now contains an unconsumed input char given as a cmd option
            ldx OPTtable
.tabnext    lda B,0,X           ; get next option char in table
                                ; is it the $00 table terminator?
            beq .opterr         ; yes, input char is not a known option
            cba                 ; input char is this option?
            beq .optmatch       ; yes, process it
            inx                 ; no, skip past option char,
            inx                 ;   option type,
            inx                 ;   and option value address
            inx
            bra .tabnext        ; see if we match next opt char

.optmatch   lda A,1,X           ; option type
            ldx 2,X             ; option value address (where we store it)
            stx OPTvaladdr
            ldx cmdqptr         ; consume matched option char
            inx
            stx cmdqptr
            cmp A,#OPTbyte
            beq .optvalbyte
            cmp A,#OPTword
            beq .optvalword
            ;   If we reach this, the options table is bad.
            ;   XXX Currently we die (in the simulator) with an illegal opcode,
            ;   but we should find a better way to handle this.
            db $05

.optvalbyte jsr qhexbyte
            bne .opterr
            stx cmdqptr         ; consume parsed value
            ldx OPTvaladdr      ; target location for value
            lda B,qhex_out+1
            sta B,0,X           ; save parsed LSB
            bra .parsenext

.optvalword jsr qhexword
            bne .opterr
            stx cmdqptr         ; consume parsed value
            ldx OPTvaladdr      ; target location for value
            lda B,qhex_out
            sta B,0,X           ; save parsed MSB
            lda B,qhex_out+1
            sta B,1,X           ; save parsed LSB
            bra .parsenext

.opterr     ;   Parse error:
            ;   - Input char did not match a char from the option table.
            ;   - Incorrect value after option char.
            jmp prperr_abort

.done       rts

; ----------------------------------------------------------------------
;   pr* - printing output

            include "src/mc68/pr.a68"
