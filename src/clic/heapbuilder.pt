from    testmc.i8080  import  Machine       # test with little-endian machine
from    src.clic.heapbuilder  import HeapBuilder

def test_HeapBuilder_defaultaddr():
    hb = HeapBuilder(None)
    assert (0x9000, 0x9000) == (hb.addr, hb.topaddr)

def test_HeapBuilder(m):
    top = 0x6E00
    hb = HeapBuilder(m, addr=top)
    m.deposit(top-0x200, [0xFF] * 0x204)    # sentinels

    expected = []; addr = top
    def expect(s):
        nonlocal addr; addr -= 4
        expected.insert(0, f'{addr:04X}: {s}')

    hb.ptr(0x12BC)          ; expect('BC 12 00 00')
    hb.ptr(0xFFFF)          ; expect('FC FF 00 00') # forced alignment
    hb.nil()                ; expect('00 00 00 00')
    hb.const(0xFFFF)        ; expect('FC 00 00 00')
    hb.sym1(b'A')           ; expect('02 41 00 00')
    hb.sym1(b'\xFF')        ; expect('02 FF 00 00')
    hb.sym2(b'//')          ; expect('BE 2F 00 00') # /=$2F
    hb.sym2(b'Uz')          ; expect('56 FA 00 00') # U=$55 z=$7A
    hb.sym2(b'\x7F\x7F')    ; expect('FE FF 00 00')
    hb.smallint(0)          ; expect('01 00 00 00')
    hb.smallint(1)          ; expect('05 00 00 00')
    hb.smallint(8191)       ; expect('FD 7F 00 00')
    hb.smallint(-1)         ; expect('FD FF 00 00')
    hb.smallint(-8192)      ; expect('01 80 00 00')

    print(expected)
    print(f'addr=${hb.addr:04X} size={hb.size} topaddr=${hb.topaddr:04X}')
    actual = [ m.hexdump(a, 4) for a in range(addr, top, 4) ]
    print(actual)
    assert expected == actual
