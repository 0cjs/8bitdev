from    testmc  import tmc_tid
from    testmc.mc6800  import  Machine, Instructions as I
import  pytest, re

object_file = 'src/mc68/pmon.p'

def loadbios(m, input=None, output=None):
    bioscode = '.build/obj/src/tmc68/bioscode.p'
    S = m.symtab
    m.load(bioscode, mergestyle='prefcur', setPC=False)
    assert S['charinport'] == S['charoutport']
    return m.setiostreams(S.charinport, input, output)

####################################################################
#   pr* - printing output

@pytest.mark.parametrize('val, char', (
    (0x00, b'0'), (0x01, b'1'), (0x0E, b'E'), (0x0F, b'F'),
    (0x10, b'0'), (0xFE, b'E'),
), ids=tmc_tid)
def test_prnyb(m, S, R, val, char):
    _, output = loadbios(m)
    m.call(S.prnyb, R(a=val))
    assert char == output.getvalue()

@pytest.mark.parametrize('val, chars', (
    (0x00, b'00'), (0x0F, b'0F'), (0xA0, b'A0'), (0xFF, b'FF'),
), ids=tmc_tid)
def test_prhex(m, S, R, val, chars):
    _, outchars = loadbios(m)
    m.call(S.prhex, R(a=val))
    assert chars == outchars.getvalue()

####################################################################
#   rd* - read input

def test_rdchar(m, R, S):
    ' Mostly confirms that our test framework works. '
    chars = b'!\x00\x7F'
    inchars, _ = loadbios(m, chars)
    for char in chars:
        m.call(S.rdchar, R(a=0xEA))
        assert R(a=char) == m.regs

    #   Document how an attempt to read past available input fails.
    with pytest.raises(EOFError) as ex:
        m.call(S.rdchar)
    assert ex.match('No more input available')

@pytest.mark.parametrize('buf, input', (
    (b'',                   b'\r'),
    (b'a',                  b'a\r'),
    (b'jklm',               b'j_\bk_\x7Fl__\b\bm\r'),
    (b'',                   b'\b\x7F\b\r'),
    (b'ij',                 b'\b\x7Fgh\b\b\b\bij\r'),
    (b'\x01\n\x1F\x7E',     b'\x01\x00\n\x00\x1F\x00\x7E\r'),
))
def test_rdline(m, R, S, input, buf):
    TERM = b'END'
    istream, ostream = loadbios(m, input + TERM)
    m.deposit(S.rdlinebuf, b'\xA5'*40)
    m.call(S.rdline)

    assert R(x=S.rdlinebuf, C=0) == m.regs
    assert buf + b'\x00' == m.bytes(m.regs.x, len(buf)+1)

    assert TERM == istream.read(len(TERM))  # no unconsumed input

    def echo_of(readchars):
        out = []
        for i in readchars:
            if   i == 0:    pass                # NUL not echoed
            elif i == 0x7F: out.append(0x08)    # DEL echoes backspace
            elif i == 0x0D: out.append(0x0A)    # CR echos newline
            else:           out.append(i)
        return bytes(out)

    assert echo_of(input) == ostream.getvalue()

def test_rdline_ctrlC(m, R, S):
    istream, ostream = loadbios(m, b'pqr\bqp\x03END')
    m.call(S.rdline)
    assert [ R(x=S.rdlinebuf, C=1), b'pqqp\x00'             ] \
        == [ m.regs,                m.bytes(m.regs.x, 5)    ]
    assert b'END' == istream.read(3)
    assert b'pqr\bqp\a\n' == ostream.getvalue()   # BEL char sent

def test_rdline_rubout_at_beginning(m, R, S):
    istream, ostream = loadbios(m, b'\b\b\babc\b\r')

    #   Whatever happens to be just before the buffer may not be
    #   the best sentinel bytes, but we can't overwrite it because
    #   we don't know if something important might be there.
    prebuf = m.bytes(S.rdlinebuf - 4, 4)
    m.deposit(S.rdlinebuf, b'\xA5'*40)

    m.call(S.rdline)
    assert R(x=S.rdlinebuf, C=0) == m.regs
    assert prebuf + b'ab\x00' == m.bytes(m.regs.x - 4, 7)

def test_rdline_overflow(m, R, S):
    buflen = S.rdlinebuf_end - S.rdlinebuf
    bufinput = b'_' * (buflen - 3) + b'yz'
    istream, ostream = loadbios(m, bufinput + b'AB\r')

    postbuf = m.bytes(S.rdlinebuf_end, 4)
    m.call(S.rdline)

    expected_buf = bufinput + b'\x00' + postbuf
    actual_buf   = m.bytes(m.regs.x, len(expected_buf))
    assert [ R(x=S.rdlinebuf, C=0), expected_buf,   ] \
        == [ m.regs,                actual_buf,     ]

    #   A BEL for each char rejected when the buffer was full.
    assert bufinput + b'\a\a\n' == ostream.getvalue()

####################################################################
#   Command support routines

def test_usepending_none(m, S, R):
    curval = 0x301; m.depword(curval, 0x2711)
    m.depword(S.Mpending, 0xC355)

    m.deposit(S.stat, 0x7F)         # no pending available
    m.call(S.usepending, R(x=curval))
    assert (0x2711, 0xC355) == (m.word(curval), m.word(S.Mpending))
    assert 0x7F == m.byte(S.stat), 'status should not have been modified'

def test_usepending_available(m, S, R):
    curval = 0x404; m.depword(curval, 0x4E22)
    m.depword(S.Mpending, 0xC355)

    m.deposit(S.stat, 0xD5)         # pending available
    m.call(S.usepending, R(x=curval))
    assert (0xC355, 0xC355) == (m.word(curval), m.word(S.Mpending))
    assert 0x55 == m.byte(S.stat), 'pendingval not marked as consumed'


####################################################################
#   Commands (tested outside of command loop)

def command_setup(m, pendingval, input=b''):
    ''' Common setup for command unit tests:
        - Set pending value if not none, and stat appropriately
        - Load the input buffer `S.rdlinebuf` with `input` and $00 terminator
        - Set current parse pointer `cmdqptr` to start of input buffer
    '''
    S = m.symtab
    if pendingval is None:
        m.depword(S.Mpending, 0xC000)   # should be ignored
        m.deposit(S.stat, 0x55)         # bit 7 clear: no pending value
    else:
        m.depword(S.Mpending, pendingval)
        m.deposit(S.stat, 0xAA)             # bit 7 set: pending value available
    m.deposit(S.rdlinebuf, input + b'\x00')
    m.depword(S.cmdqptr, S.rdlinebuf)

@pytest.mark.parametrize(
    'pending, curloc', [
    ( 0x7050, 0x2222, ),
    (   None, 0x7055, ),
], ids=tmc_tid)
def test_call(m, S, R, pending, curloc):
    m.depword(S.Mcallcur, curloc)
    command_setup(m, pending)
    m.deposit(curloc, 0x02)     # invalid opcode for when curloc is not target

    target = pending if pending is not None else curloc
    print('target={:04X}'.format(target))
    m.deposit(target, [I.LDAA, 0xAA, I.RTS])

    m.call(S.call, R(a=0x55))
    assert R(a=0xAA) == m.regs

@pytest.mark.parametrize(
    'pending, curloc, parselen, cmd,       data', [
    ( 0x7000, 0x0000,     0,    b'',       b''),
    ( 0x7001, 0xFEDC,     2,    b'ff',     b'\xFF'),
    ( 0x7002, 0x0000,     1,    b'1',      b'\x01'),
    ( 0x7003, 0x0000,     4,    b'abcd',   b'\xAB\xCD'),
    ( 0x6FFC, 0x0000,    20,    b'a bc def 0123  4   5',
                                           b'\x0A\xBC\xDE\x0F\x01\x23\x04\x05'),
    ( 0x7005, 0x0000,     1,    b'6x',     b'\x06'),
    ( 0x7006, 0x0000,     5,    b'6 12 x', b'\x06\x12'),
    ( 0x7007, 0x0000,     5,    b'6 13:x', b'\x06\x13'),
    (      1, 0xFEDC,     2,    b'34',     b'\x34'),
    (   None, 0x9999,     5,    b'12 01',  b'\x12\x01'),
], ids=tmc_tid)
def test_deposit(m, S, R, pending, curloc, parselen, cmd, data):
    inbuf = S.rdlinebuf
    guarded = b'\xEE' + data + b'\xEE'

    m.depword(S.Mdepcur, curloc)
    command_setup(m, pending, cmd)
    loc = curloc if pending is None else pending
    m.deposit(loc-1, b'\xEE'*len(guarded))

    m.call(S.deposit, R(a=ord(':'), x=S.deposit))
    assert (inbuf,  inbuf + parselen,   guarded) \
        == (inbuf,  m.word(S.cmdqptr),  m.bytes(loc-1, len(guarded)))

@pytest.mark.parametrize(
    'pending, curloc, width, cmdarg, lines, expmatch', [
    (0x8003,  0x0000,   8,   b'',       2,  '8003: 43 44 45 46 47 48 49 4A\n'
                                            '800B: 4B 4C 4D 4E 4F 50 51 52\n'),
    (0x7FFF,  0xFEDC,   5,   b'1',      1,  '7FFF: 00 40 41 42 43\n'),
    (0x8000,  0x0000,   2,   b'1f',    31,  '8000: 40 41\n.*803C: 7C 7D\n'),
    (  None,  0x8033,   8,   b'',       2,  '8033: 73 74 .*'),
], ids=tmc_tid)
def test_examine(m, S, R, pending, curloc, width, cmdarg, lines, expmatch):
    m.deposit(0x8000, range(0x40, 0x80))    # test data to dump
    m.depword(S.Mexamcur, curloc)           # overwritten by pending if avail.
    m.deposit(S.Mexamwidth, width)
    m.deposit(S.Mexamlines, 2)              # default value for tests
    command_setup(m, pending, cmdarg)
    _, ostream = loadbios(m)

    m.call(S.examine)
    if pending is not None:
        assert pending == m.word(S.Mexamcur), 'Mexamcur should be updated'
    output = str(ostream.getvalue(), encoding='ASCII')
    print(output[0:300])

    assert re.fullmatch(expmatch, output, re.DOTALL)
    assert lines == m.byte(S.Mexamlines), 'new lines default not set'
    assert S.rdlinebuf + len(cmdarg) == m.word(S.cmdqptr), 'cmdarg not consumed'
    assert lines == len(output.split('\n')) - 1, \
        'exepcted number of output lines'


####################################################################
#   Command loop

@pytest.mark.parametrize('cmdchar, foundaddr', [
    ('z', 0x0F0F),
    ('y', 0x0E0E),
    ('a', 0x0101),
    ('w', None),
    ('@', None),
])
def test_cmdloop_search(m, S, R, cmdchar, foundaddr):
    ' Test the command table search routine embedded in cmdloop. '
    CMDTBL = 0x3FFE
    tabledata = [ ('z', 0x0F0F), ('y', 0x0E0E),
                  ('a', 0x0101), ('\x00', 0x0000),
                ]
    for entry, char_addr in enumerate(tabledata):
        offset = entry * 3; char, addr = char_addr
        m.deposit(CMDTBL+offset,   [ord(char)])
        m.depword(CMDTBL+offset+1, [addr])
    m.depword(S.cmdtbl, CMDTBL)

    callcmd = S['cmdloop.callcmd'] + 2  # instruction after loading address
    unkcmd  = S['cmdloop.unkcmd']

    m.setregs(R(pc=S['cmdloop.search'], a=ord(cmdchar)))
    m.stepto(stopat=[callcmd, unkcmd], maxsteps=10000)

    if foundaddr is not None:
        #   We've loaded the right command address and are about to call it
        assert R(pc=callcmd, x=foundaddr) == m.regs
    else:
        #   We've gone through the entire table and not found the command.
        lastentry = CMDTBL + 3 * (len(tabledata)-1)
        assert R(pc=unkcmd, x=lastentry) == m.regs

def test_cmdloop_quitcmd(m, S, R):
    ' Minimal path that gets us through to exit. '
    #   Quit doesn't return to the parser loop; it manually removes the
    #   return address that .parse added. This means our JSRs/RTSs will
    #   match, so in this one case we can use m.call().
    istream, ostream = loadbios(m, b'q\r')
    m.depword(S.cmdtbl, S.cmdtbl_std)
    m.call(S.cmdloop)
    assert b'\n^ q\n' ==  ostream.getvalue()
    #   Make sure we exited at the point where we expected.
    assert R(pc=S.rtscmd) == m.regs

def test_cmdloop_cancel(m, S, R):
    ' Confirm that ctrl-C terminates input, ignores line. '
    istream, ostream = loadbios(m, b'^~123~^\x03' b'q\r')
    m.depword(S.cmdtbl, S.cmdtbl_std)
    m.call(S.cmdloop)
    assert b'\n^ ^~123~^\x07\n' b'^ q\n' ==  ostream.getvalue()
    #   Make sure we exited at the point where we expected.
    assert R(pc=S.rtscmd) == m.regs

####################################################################
#   Integration tests

#   Because the parser loop sets up return addresses with PSH (continuation
#   passing style), m.call() will not see a JSR to match to each command's
#   RTS and thus exit after the first command. We get around this by
#   instead adding a quit command at the end of every test input and running
#   until we reach quitcmd, a unique location before monitor exit. (rtscmd
#   cannot be used for this because it's also used as a convenient branch
#   target for conditional RTS by other code.)

def runmon(m):
    ''' Run the monitor starting with the standard init routine, up to when
        it quits due to command input. We deliberately do not do extra
        initialization here to help confirm that the monitor's minimal
        initialization is complete enough to avoid problems.
    '''
    S = m.symtab
    m.setregs(m.Registers(pc=S.init))
    m.stepto(stopat=[S.quitcmd], stopon=[0x00], maxsteps=20000)

def test_cmdloop_pending(m, S):
    ' Ensure that pending values are loaded properly. '
    istream, ostream = loadbios(m, b'3039q\r')
    runmon(m)
    assert b'\n^ 3039q\n' ==  ostream.getvalue()
    pendingbit = m.byte(S.stat) & 0x80  # isolate pending bit
    assert (0x80, 0x3039) == (pendingbit, m.word(S.Mpending))

def test_cmdloop_multicmd(m):
    ' Multiple command processing of the simplest possible commands. '
    istream, ostream = loadbios(m, b'^^ ^q\r')
    runmon(m)
    assert b'\n^ ^^ ^q\n' b'\n\n\n' ==  ostream.getvalue()

def test_cmdloop_multiline(m):
    ''' Simple commands split across lines.

        This demonstrates some ill-formed behaviour; entering a line causes
        the input routine to produce a newline, but then the prompt prints
        another newline even though there was no output on the existing
        line. When we print newlines needs to be reworked.
    '''
    istream, ostream = loadbios(m, b' \r^\rq\r')
    runmon(m)
    expected = bytes(
        b'\n^ '         # initial prompt
        b' \n\n^ '      # space (no command), unwanted NL, following prompt
        b'^\n\n\n^ '    # ^ (print CR), unwanted NL, following prompt
        b'q\n'          # quit command
        )
    assert expected ==  ostream.getvalue()

def test_cmdloop_deposit_examine(m):
    ' Simple integration test. '
    istream, ostream = loadbios(m, b'7654x 7655:ab:x :cd:x q\r')
    runmon(m)
    print(m.regs); print(m.bytes(m.regs.sp-8, 8))
    output = ostream.getvalue(); print(output)
    assert b'\n7654: 00 AB 00' in output
    assert b'\n7654: 00 CD 00' in output

####################################################################

@pytest.mark.skip
def test_cmdloop_eachrts(m, S, R):
    ''' A (currently non-working) hack to do "selective trace," printing
        the current instruction, stack contents and buffer contents at a
        few points during execution.
    '''
    input = b'a800\r3q\r'
    input = b'^ ^^q\r'
    istream, ostream = loadbios(m, input)
    m.deposit(0xA800, b'ABCDEFGH')

    stackbase = m.regs.sp + 1
    def showstack():
        return '{:02X}{:02X} {:02X}{:02X} {:02X}{:02X} {:02X}{:02X}' \
            .format(*m.bytes(stackbase-8, 8))

    m.setregs(R(pc=S.cmdloop))
    level = 0
    print('{}                {}'.format(m.regs, showstack()))
    while True:
        m.stepto(stopon=[I.JSR, I.BSR, I.RTS, I.PSHA],
            stopat=[ S['rtscmd'], S['cmdloop.parse'] - 1 ])
        r = m.regs
        opcode = m.byte(r.pc)
        if   opcode == I.PSHA:
            level += 1
            inst = 'PSH'
            dest = S['cmdloop.parse']
        elif opcode == I.JSR:
            level += 1
            inst = 'JSR'
            dest = m.word(r.pc+1)
        elif opcode == I.BSR:
            level += 1
            inst = 'BSR'
            dest = r.pc + 2 + m.byte(r.pc+1)
        else:
            level -= 1
            inst = 'RTS'
            dest = 0
        print('{} {:3d} {} {:04X}   {}   {}'
            .format(r, level, inst, dest, showstack(), m.bytes(r.x, 6)))

    assert 0
