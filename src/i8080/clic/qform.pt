from    testmc.i8080  import  Machine
from    src.clic.objref  import asbytes, \
    NIL, T, sym1 as s1, sym2 as s2, smallint as i
from    collections  import namedtuple
import  pytest

param   = pytest.mark.parametrize
R       = Machine.Registers

test_rig = '''
            cpu  8080
            include src/i8080/std.i80
            include testmc/i8080/tmc/biosdef.i80

            org  $200
            include src/i8080/clic/qform.i80

            include src/i8080/clic/qtok.i80
            include src/i8080/arith.i80
            include src/i8080/qhex.i80
'''

####################################################################

#   XXX should getc ignore NUL?

class G:
    ' getc command '
    def __init__(self, expected):
        self.expected = asbytes(expected)
        self.sym = 'getc'
        self.initregs = R(a=0xFF)
    def test(self, m):
        assert R(a=ord(self.expected)) == m.regs

class U:
    ' ungetc command '
    def __init__(self, char):
        self.char = asbytes(char)
        self.sym = 'ungetc'
        self.initregs = R(a=ord(self.char))
    def test(self, m):
        assert True         # result tested by subsequent `getc`


@param('testname, commands', [
   ( 'get-only',        [ G('a'), G('b'), G('\r'), G('c') ]),
   ( 'one-unget',       [ G('a'), U('a'), G('a'), G('b') ]),
   ( 'unget-overwrite', [ G('a'), U('a'), U('X'), G('X'), G('b') ]),
])
def test_getc_regular(m, R, S, loadbios, testname, commands):
    loadbios(input=b'ab\rcd')
    m.call(S.qform_init)
    for cmd in commands:
        m.call(S[cmd.sym], cmd.initregs)
        cmd.test(m)

####################################################################

def remainder(m, inp):
    pushback = m.byte(m.symtab.getc_buf)
    if pushback == 0x00:
        return inp.read()
    else:
        return bytes([pushback]) + inp.read()

@param('tokentext, next', [    # input is tokentext+next
    ('(',               ')'),
    ('ab',              '    '),
    ('ab',              '\r  '),
    ('ab',               ')'),
    ('ab',              '(def'),
    ('+12345',          ' '),
    ('-3.75e10',        ' '),
    ('\r\n\t\v\f XX',   ' '),           # leading whitespace stripped by test
    ('  (',             ')'),
    # XXX test escape chars
])
def test_rtok(m, R, S, loadbios, tokentext, next):
    tokentext = asbytes(tokentext)
    next      = asbytes(next)
    input     = tokentext + next
    inp, _    = loadbios(input=tokentext+next)
    m.deposit(S.tokbuf, b'\xEE'*S.tokbuflen)

    m.call(S.rtok)
    print(m.hexdump(S.tokbuf, S.tokbuflen+1))

    expected = tokentext.lstrip() + b'\xEE'
    assert [                        expected,              next] \
        == [m.bytes(S.tokbuf, len(expected)), remainder(m, inp)]

# XXX test token too long error

####################################################################

@param('form, ast', [
    ['x\r',         s1('x')],
    ['foobar\r',    s2('fo')],
    [')',           s1(')')],       # XXX wrong!
    ['(',           s1('(')],       # XXX wrong!
])
def test_form(m, R, S, loadbios, form, ast):
    inp, _    = loadbios(input=asbytes(form))
    m.call(S.rform, R(de=0xFFFF))
    assert R(de=ast) == m.regs
