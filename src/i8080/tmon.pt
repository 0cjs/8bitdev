from    testmc  import LB, MB, tmc_tid
from    testmc.i8080  import  Machine, Instructions as I
from    binascii  import crc_hqx
from    itertools  import cycle, islice
import  pytest

pytest.register_assert_rewrite('src.tmon.test')

from src.tmon.test import (NAK, CAN)

test_rig = '''
            cpu 8080
            include  src/i8080/std.i80
            include testmc/i8080/tmc/biosdef.i80

            org $8000

;   Tweak some default parameter values tests. This both checks that the
;   defaults are properly taken from these settings and lets us use
;   settings that produce less output that the "default" defaults, which
;   are designed for 80-column, many-line terminals.
vini_start  equ  $0000      ; examine etc. default start (XXX should move this)
vini_format equ  $01        ; examine format: hex only
vini_width  equ  $08        ; examine width

; ----------------------------------------------------------------------

tmon_ram    equ  $7000
tmon_stack  equ  tmon_ram   ; stack below work area
tmon_rom    equ  $8000

rsti        equ $6 * $8     ; address of RST 6

            org  rsti
            jp  intentry

            include src/i8080/tmon.i80
            include src/i8080/pr/space.i80
            include src/i8080/prvischar/ascii.i80
            include src/i8080/prscreenchar/ascii.i80

exit        halt            ; exit routine used by monitor

init_platform
            ld   a,0xEE
            ld   (t0),a
            ret

jump_test   inc  a
            inc  hl
jump_test_E halt

call_test   inc  b
            inc  de
call_test_E ret

iret_test   halt

            ;   data for testing E command and similar
            org  $12AB
utest_data  db   $FF, $00, $12, $23, $34, $45, $56, $67
            db   $78, $89, $9A, $AB, $BC, $CD, $DE, $EF
'''

param = pytest.mark.parametrize

####################################################################
#   Pytest improvements.
#   Possibly this should be pulled up to a more generic/shared location.

def XXX(*args):
    ' Mark test parameters as (strictly) expected to fail. '
    return pytest.param(*args, marks=pytest.mark.xfail(strict=True))

####################################################################
#   Generic routines

@param('hl, de, result', [
    (0x0000, 0x0000, 0x0000),
    (0x1234, 0x1233, 0x0001),
    (0x0001, 0x0002, 0xFFFF),       # uses carry
], ids=tmc_tid)
def test_subHLDE(m, S, R, hl, de, result):
    m.call(S.subHLDE, R(hl=hl, de=de), trace=1)
    Z = (result == 0)
    C = hl >= de            # Would be nice to affect carry, but we don't
                            # need it right now and might increase size.
    assert R(hl=result, de=de, Z=Z) == m.regs

@param('bc, hl, cy', [
    #   BC â‰¥ HL
    (0x0000, 0x0000, False),    (0x0001, 0x0000, False),
    (0x00FF, 0x0000, False),    (0x0100, 0x0000, False),
    (0x8001, 0x7FFF, False),    (0xFFFF, 0x0000, False),
    (0xFFFF, 0xFFFE, False),    (0xFFFF, 0xFFFF, False),
    #   BC < HL
    (0x0000, 0x0001, True),     (0x7FFF, 0x8000, True),
    (0xFFFE, 0xFFFF, True),     (0x0000, 0xFFFF, True),
], ids=tmc_tid)
def test_cpBCHL(m, S, R, bc, hl, cy):
    m.call(S.cpBCHL, R(bc=bc, hl=hl, C=not cy))
    assert R(C=cy) == m.regs

@param('result, hl, bc', [
    (0x0000, 0x0000, 0x0000), (0x0001, 0x0001, 0x0000), (0xFFFF, 0xFFFF, 0x0000),
    (0xFFFE, 0xFFFF, 0x0001), (0xFFFE, 0x0002, 0x0004), (0x7000, 0x9000, 0x2000),
], ids=tmc_tid)
def test_subHLpBC(m, S, R, result, hl, bc):
    addr = 0x9876
    m.depword(addr, bc)
    m.call(S.subHLpBC, R(hl=hl, bc=addr))
    assert R(hl=result) == m.regs

####################################################################
#   Support routines

@param('input, expected', [
    ('\n',    True), ('\r',    True),
    ('\x09', False), ('\x0B', False),
    ('\x0C', False), ('\x0E', False),
    ('\x8A', False),
])
def test_qexec(m, S, R, input, expected):
    m.call(S.qexec, R(a=ord(input), Z=not expected), trace=1)
    assert R(Z=expected) == m.regs

@param('char, cancelled', [
    (  NAK,   True), (  CAN,   True),
    ('\x14', False), ('\x16', False),
    ('\x17', False), ('\x19', False),
    ('\x85', False),
])
def test_cqcancel(m, S, R, char, cancelled):
    m.call(S.cqcancel, R(a=ord(char)), stopat=[S.cancel])
    if cancelled:
        assert R(pc=S.cancel) == m.regs
    else:
        assert S.cancel != m.pc
        assert R(a=ord(char)) == m.regs      # preserved A

####################################################################
#   Options parsing

@param('char, val', [
    ('/', None), (':', None), ('@', None), ('`', None), # outside digit range
    ('0',    0), ('9',    9),                           # decimal range
    ('A',  0xA), ('F',  0xF), ('f',  0xF), ('a',  0xA), # hex range
    ('g', None), ('G', None),                           # digits above hex range
])
def test_qhexdigitDE(m, S, R, char, val):
    m.deposit(S.errbeep, I.RET)         # Don't bother loading the BIOS,
    m.deposit(S.prchar, I.RET)          #   just make no-ops.
    PR = R(bc=0xA1B2, hl=0xC3D4).clone  # Preserved register sentinels.
    m.call(S.qhexdigitDE, PR(a=ord(char), de=0x3456))
    if val is not None:  assert PR(C=0, de=0x4560|val) == m.regs
    else:                assert PR(C=1, de=0x3456)     == m.regs

def test_qrhex4_good(m, S, R, loadbios):
    ''' This tests the most complex entry point into `qrhexN`
        and the `qrhexN` routine itself.
    '''
    inp, out = loadbios(input=b'1F2e3')
    m.call(S.qrhex4, R(C=1, c=2, de=0x1234, b=0xEA, hl=0x5678))
    assert R(C=0, a=0x2E, de=0x1F2E, b=0xEA, hl=0x5678) == m.regs
    assert ord(b'e') == m.byte(S.t0), 'last char read'
    assert b'3' == inp.read(), 'read only 4 valid digits'

@param('input', [ '1g', '/', ':', '?', ])
def test_qrhex2_bad(m, S, R, loadbios, input):
    ''' `qrhexN` error returns. '''
    input = bytes(input, encoding='ASCII')
    inp, out = loadbios(input=input)
    m.call(S.qrhex2, R(C=0))
    assert R(C=1) == m.regs
    assert input[-1] == m.byte(S.t0), 'last char read'

@param('size, stored, input', [
    #   We always check the word value; for byte values the MSB is $EE.
    ( 8, 0xEEEE, b' '),       (16, 0xEEEE, b' '),   # keep curval, more params
    ( 8, 0xEEEE, b'\n'),      (16, 0xEEEE, b'\r'),  # keep curval, execute
    ( 8, 0xEEEE, NAK),        (16, 0xEEEE, CAN),    # keep curval, cancel
    ( 8, 0xEE00, b'0 '),      (16, 0x0000, b'0 '),  # replace curval
    ( 8, 0xEE01, b'1 '),      ( 8, 0xEE0F, b'F '),      ( 8, 0xEE0F, b'f '),
    (16, 0x0001, b'1 '),      (16, 0x000F, b'F '),      (16, 0x000F, b'f '),
    ( 8, 0xEE34, b'1234 '),   (16, 0x3456, b'123456 '),
    ( 8, 0xEE00, b"'\x00 "),  (16, 0x0D7A, b"'\r'z "),
    ( 8, 0xEE80, b'"\x00 '),  (16, 0xFFFE, b'"\x7F"~ '),
    ( 8, 0xEE23, b'123\n'),   (16, 0x6789, b'123456789\n'),
    ( 8, 0xEEEE, b'123'+CAN), (16, 0xEEEE, b'1234567'+NAK),
], ids=tmc_tid)
def test_qhex_and_store(m, S, R, loadbios, size, stored, input):
    ' This covers all of qhex, so test_qoptval_parsedigit must be passing. '
    if   size ==   8: c = 0x00; incr = 1  # 8 bits, saved
    elif size ==  16: c = 0x80; incr = 2  # 16 bits, saved
    else:             raise ValueError('bad size')
    valp = 0xF002

    loadbios(input=input)
    m.depword(0xF002, 0xEEEE)
    m.call(S.qhex, R(c=c, hl=0xF002), stopat=[S.cancel])
    print(m.hexdump(0xF000, 6))

    term = input.endswith
    if term(NAK) or term(CAN):
        assert(S.cancel, stored, valp     ) == (  m.pc, m.word(valp), m.hl)
    elif input == b'\r' or input == b'\n':  # no data actually entered
        assert(  R(Z=1), stored, valp     ) == (m.regs, m.word(valp), m.hl)
    elif term(b'\r') or term(b'\n'):
        assert(  R(Z=1), stored, valp+incr) == (m.regs, m.word(valp), m.hl)
    elif term(b' '):
        assert(  R(Z=0), stored, valp+incr) == (m.regs, m.word(valp), m.hl)
    else:
        raise ValueError(f'unterminated test data: {input!r}')

def test_read_params_good(m, S, R, loadbios):
    out = loadbios(input=b'  b')
    optB = ord('B')|0x80
    testtab = 0xA000; m.deposit(testtab,
        b'A', b'\xAA\x01', optB, b'\xBB\x02', b'\x00')
    print('testtab:', m.hexdump(testtab, 8))
    m.call(S.read_params, R(hl=testtab), stopat=[S.qhex])
    assert R(pc=S.qhex, hl=0x02BB) == m.regs

#   XXX need read_params_bad here? tmon/test.py test_params_bad_good()
#   discovered a bug in the read_params routine.

####################################################################
#   Saved parameter value initialization

def test_init_platform(m, S, R, loadbios):
    _, out = loadbios()      # capture printed re-init notification
    len = S.v_end - S.v_start
    print('initdata', m.hexdump(S.v_initdata, len + 2))

    m.deposit(S.v_start, [0xFF] * (len + 2))
    print('  before', m.hexdump(S.v_start, len + 2))
    m.deposit(S.t0, 0xDD)           # sentinel for init_platform

    m.call(S.init, stopat=[S['init.end']])
    print('  inited', m.hexdump(S.v_start, len + 2))
    assert m.bytes(S.v_initdata, len) == m.bytes(S.v_start, len)
    assert 0xEE == m.byte(S.t0), 'value not set by init_platform'
    assert b'@' == out.written(), \
        'user should have been notified of param re-init'
    out.clear()

    #   change param vals and checksum
    m.depword(S.vS_exec, 0x1234); m.depword(S.vE_source, 0x5678)
    m.call(S.cksum_v); m.depword(S.v_cksum, m.hl)
    newdata = m.bytes(S.v_start, len + 2)
    print('cksummed', m.hexdump(S.v_start, len + 2))

    #   ensure it's not overwritten w/original values
    m.call(S.init, stopat=[S['init.end']])
    print(' reinitt', m.hexdump(S.v_start, len + 2))
    assert newdata == m.bytes(S.v_start, len + 2)
    assert b'' == out.written(), \
        'user should not have been notified of param re-init'

####################################################################
#   Commands: Examining Machine State

def test_prexamine_fclear(m, S, R):
    ' prexamine just returns if the format bit in A not set in (vM_examine). '
    m.deposit(S.vM_examine, 0b11111101)
    m.call(S.prexamine, R(a=0b10, de=0000), stopat=[0000], trace=1)
    assert 0000 != m.pc, "prexamine should not have called DE"

def test_prexamine_fset(m, S, R, loadbios):
    _, out = loadbios()
    m.deposit(S.vM_examine, 1)          # must have a format bit set
    m.deposit(S.vW_examine, 6)          # bytes/line
    m.depword(S.t0, S.utest_data)       # start addr of line

    m.call(S.prexamine, R(a=0xFF, hl=S.prmhexA))
    s = out.written(print=True)
    assert b' FF 00 12 23 34 45 ' == s   # prints just one line

def test_examine_defaults(m, S, R, loadbios):
    _, out = loadbios(input=b'\n')
    m.call(S.init, stopat=[S['init.end']])           # testing default values
    m.call(S.cmd_examine_cur, stopat=[S['cmd_examine_cur.end']])
    s = out.written(print=True)
    assert b'0000: 00' in s
    assert b'0018: 00' in s
    assert s.endswith(b'\n')

def test_examine_settings(m, S, R, loadbios):
    _, out = loadbios(input=b'\n')
    #   2 lines of 5 bytes of known non-zero data.
    m.depword(S.vS_examine, S.utest_data)
    m.deposit(S.vM_examine, 7)              # hex, ascii, screencodes
    m.deposit(S.vL_examine, 2)
    m.deposit(S.vW_examine, 5)
    m.call(S.cmd_examine_cur, stopat=[S['cmd_examine_cur.end']])
    s = out.written()
    expected =  b'\r' \
                b'12AB: FF 00 12 23 34  ?@R#4    #4\n' \
                b'12B0: 45 56 67 78 89  EVgxI EVgx \n'
    print('expected:', expected); print('  actual:', s)
    assert expected == s

def test_examine_next_defaults(m, S, R, loadbios):
    _, out = loadbios(input=b'\n')
    m.call(S.init, stopat=[S['init.end']])           # testing default values
    m.call(S.cmd_examine_next, stopat=[S['cmd_examine_cur.end']])
    s = out.written()
    print(f'vS_examine={m.word(S.vS_examine):04X} t0={m.word(S.t0):04X}',
        s.decode('ASCII'))
    assert b'0020: 00' in s
    assert b'0028: 00' in s
    assert s.endswith(b'\n')
    assert 0x0020 == m.word(S.vS_examine)

def test_examine_prev(m, S, R, loadbios):
    _, out = loadbios(input=b'\n')
    m.call(S.init, stopat=[S['init.end']])           # testing default values
    m.call(S.cmd_examine_prev, stopat=[S['cmd_examine_cur.end']])
    s = out.written()
    print(f'vS_examine={m.word(S.vS_examine):04X} t0={m.word(S.t0):04X}',
        s.decode('ASCII'))
    assert b'FFE0: 00' in s
    assert b'FFF8: 00' in s
    assert s.endswith(b'\n')
    assert 0xFFE0 == m.word(S.vS_examine)

####################################################################
#   Register command and support functions

@param('input, output', [
    (0x00,  b'-----'), (0xFF,  b'SZHPC'), (0x91,  b'S-H-C'),
], ids=tmc_tid)
def test_prflags(m, S, R, loadbios, input, output):
    _, out = loadbios()
    m.call(S.prflags, R(a=input))
    assert output == out.written()

def test_regs_print(m, S, R, loadbios):
    _, out = loadbios()
    m.deposit(S.ureg_AF, [0xD7, 0x12])
    m.depword(S.ureg_BC, [0x2345, 0x6789, 0xABCD, 0xEFFE, 0xFEEF])
    m.call(S['cmd_regs_examine'], stopat=[S['cmd_regs_examine.end']])
    assert b'\rFEEF EFFE SZHPC 12 2345 6789 ABCD\n' \
        == out.written()
'''
Various ideas for printing registers:
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
         10        20        30!       !        !=32 and 40 cols
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
PC=FFEF SP=EFFE szhpc A=12 BC=2345 DE=6789 HL=ABCD
FFEF EFFE SZHPC 12 2345 6789 ABCD
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  PC   SP  A  B C  D E  H L  F                  2-row
FEEF EFFE 12 2345 6789 ABCD SZâ‚€Hâ‚€PÂ¹C
FEEF EFFE 12 2345 6789 ABCD D7
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
'''

def test_regs_setbytes(m, S, R, loadbios):
    loadbios(input=b'a1234 f5678 b0B c0C d0D e0E h08 l07\n')
    m.call(S.cmd_regs_deposit, stopat=[S['cmd_regs_examine.end']])
    print(m.hexdump(S.ureg_AF, 12))
    assert (0x34, 0x78, 0x0B, 0x0C, 0x0D, 0x0E, 0x08, 0x07) \
        == tuple(map(m.byte, [S.ureg_A, S.ureg_F,
            S.ureg_B, S.ureg_C, S.ureg_D, S.ureg_E, S.ureg_H, S.ureg_L, ]))
    assert (0x3478, 0x0B0C, 0x0D0E, 0x0807) \
        == tuple(map(m.word, [S.ureg_AF, S.ureg_BC, S.ureg_DE, S.ureg_HL, ]))

def test_regs_setwords(m, S, R, loadbios):
    loadbios(input=b'p0102 s0304 i0506 t0708 m090A\n')
    m.call(S.cmd_regs_deposit, stopat=[S['cmd_regs_examine.end']])
    print(m.hexdump(S.ureg_AF, 12))
    assert (0x0102, 0x0304, 0x0506, 0x0708, 0x090A) == tuple(map(m.word,
        [S.ureg_PC, S.ureg_SP, S.ureg_BC, S.ureg_DE, S.ureg_HL, ]))

@pytest.mark.xfail(strict=True)
def test_port():
    #   XXX Need to implement IN and OUT in simulator for this.
    assert 0

####################################################################
#   Initialisation

def hexlist(xs):
    return ' '.join([ f'{i:02X}' for i in xs ])

@param('entrypoint, userpc', [
    ('entry',       0xDEAD),
    ('intentry',    0x8001),
])
#   Warnings filter: 'action:message:category:module:line'
#   https://docs.python.org/3/library/warnings.html#warning-filter
@pytest.mark.filterwarnings(
    'ignore:.*simulator will not generate interrupts:UserWarning')
def test_entry(m, S, R, loadbios, entrypoint, userpc):
    loadbios()                          # because intentry prints
    m.depword(S.ureg_PC, 0xDEAD)
    m.depword(0xEF01, 0x8001)           # return address, if needed

    #   S flag (bit 7) is clear to confirm that it's not set on int entry
    regs = R(pc=S[entrypoint],
             a=0xFE, bc=0x2345, de=0x6789, hl=0xABCD, sp=0xEF01,
             S=0, Z=1, H=1, P=1, C=1)
    m.setregs(regs)
    m.stepto(stopat=[S['entry1.end']])
    actual = [ i for i in m.bytes(S.ureg_AF, 10) ]

    flags = 0b01010111  # on 8080, unused b5,b3 are clear, unused b1 is set
    expected = [ flags, 0xFE,
        0x45, 0x23, 0x89, 0x67, 0xCD, 0xAB, 0x01, 0xEF ]
    print('expected', hexlist(expected))
    print('  actual', hexlist(actual))
    assert expected == actual

    #   Ensure user PC was set for ints, but not for "regular" entries.
    print(f'userpc expected={userpc:04X} actual={m.word(S.ureg_PC):04X}')
    assert userpc == m.word(S.ureg_PC)

####################################################################
#   Commands: Execution

def test_jump(m, S, R, loadbios):
    loadbios(input=b'\n')
    userstack = 0xFF80
    m.deposit(userstack-4, b'\xEA' * 8)     # sentinels
    m.depword(S.ureg_AF, [0x12FF, 0x3456, 0x789A, 0xBCDE, userstack, 0xEBEB])
    m.depword(S.vS_exec, S.jump_test)
    m.stepto(S.cmd_jump, stopat=[S.jump_test_E], trace=1)
    assert R(a=0x13, bc=0x3456, de=0x789A, hl=0xBCDF, pc=S.jump_test_E) == m.regs
    assert b'\xEA' * 8 == m.bytes(userstack-4, 8), 'stack trashed!'

def test_call(m, S, R, loadbios):
    loadbios(input=b'\n')
    userstack = 0xFF80
    m.deposit(userstack-4, b'\xEA' * 8)     # sentinels
    m.depword(S.ureg_AF, [0x12FF, 0x3456, 0x789A, 0xBCDE, userstack, 0xEBEB])
    m.depword(S.vS_exec, S.call_test)
    m.depword(S.ureg_SP, userstack)

    m.stepto(S.cmd_call, stopat=[S.call_test_E], trace=1)
    assert R(a=0x12, bc=0x3556, de=0x789B, hl=0xBCDE,
        sp=userstack-2, pc=S.call_test_E) == m.regs
    expected_stack \
        = bytes([0xEA, 0xEA, LB(S.entry), MB(S.entry), 0xEA, 0xEA, 0xEA, 0xEA])
    assert expected_stack == m.bytes(userstack-4, 8), 'stack trashed!'

def test_iret(m, S, R, loadbios):
    #   The common code is tested in test_jump and test_call.
    loadbios(input=b'\n')
    userstack = 0xFF80
    m.depword(S.ureg_SP, userstack)
    m.depword(userstack, S.iret_test)
    print(f'iret_test={S.iret_test:4X} ', m.hexdump(userstack-2,8))
    m.stepto(S.cmd_iret, stopat=[S.iret_test], trace=1)
    assert R(sp=userstack+2, pc=S.iret_test) == m.regs

####################################################################
#   Commands: Deposit

def test_depset_startaddr(m, S, R, loadbios):
    loadbios(input=b's1234 n1\n')
    m.depword(S.vS_examine, 0xABCD)    # sentinel
    m.call(S.cmd_deposit_params, stopat=[S['cmd_deposit_params.end']])
    assert (      0x1234 ,         0x01 ,        0x00 ) \
        == (m.word(S.vS_deposit), m.byte(S.vN_deposit), m.byte(S.t0))

def test_depset_copyaddr(m, S, R, loadbios):
    loadbios(input=b's5678 n0 e1\n')
    m.depword(S.vS_examine, 0xABCD)
    m.call(S.cmd_deposit_params, stopat=[S['cmd_deposit_params.end']])
    assert (      0xABCD ,         0x00 ,        0x01 ) \
        == (m.word(S.vS_deposit), m.byte(S.vN_deposit), m.byte(S.t0))

#   Deposit modes: hex bytes, hex words, ASCII.
B = object(); W = object(); A = object()
CLR4 = '    \x08\x08\x08\x08'   # clear-on-execute output

@param('mode, depfwd, input, mem, output', [
    #   '\x06' below is Ctrl-F to leave cur unchanged and move to next location

    (B, 0, '\n', 'abcdefgh', '61\b\b\n'),
    (B, 2, '31 32\n', '12cdefgh', '61\b\b31 '+CLR4+'62\b\b32'+CLR4+'\n'),
    (B, 2, '\x0621\n', 'a!cdefgh', '61\b\b61 '+CLR4+'62\b\b21'+CLR4+'\n'),

    (A, 0, '\n', 'abcdefgh', 'a\x08\n'),
    (A, 4, 'X0\a~\n',           'X0\a~efgh',    'a\bX' 'b\b0' 'c\bG' 'd\b~' 'e\b\n'),
    #   Spaces are entered as data, not interpreted as skip.
    (A, 2, '  \n',              '  cdefgh',     'a\b ' 'b\b ' 'c\b\n'),
    #   Instead Ctrl-F is used for skip.
    (A, 4, '\x06!\x06\x06\n',   'a!cdefgh',     'a\ba' 'b\b!' 'c\bc' 'd\bd' 'e\b\n'),
    #   ^D goes into "digit" mode: one byte using the hex input routine.
    (A, 3, 'X\x04a1b2c _\n',    'X,_defgh',
            'a\bX' 'b\b62\b\ba1b2c     \b\b\b\b' 'c\b_' 'd\b\n'),
    #   ^D hex input allows ascii input via ', etc.
    (A, 1, "\x04cc'D \n",    'Dbcdefgh', "a\b61\b\bcc'D\b\b44     \b\b\b\b" 'b\b\n'),
    (A, 1, "\x04cc'D\n",     'Dbcdefgh', "a\b61\b\bcc'D\b\b44    \b\b\b\b\n"),
])
def test_deposit(m, S, R, loadbios, mode, input, depfwd, mem, output):
    if   mode is B: inpsize = 2; cmd = S.cmd_deposit_bytes
    elif mode is W: inpsize = 4; cmd = S.cmd_deposit_words
    elif mode is A: inpsize = 1; cmd = S.cmd_deposit_ascii
    else:           assert 0, 'Bad deposit mode.'

    depaddr = 0x9000
    m.depword(S.vS_deposit, depaddr)
    m.depword(S.vN_deposit, 1)          # advance to next mode
    m.deposit(depaddr, b'abcdefgh')
    instream, outstream = loadbios(input=input.encode('ASCII'))
    m.call(cmd, stopat=[S.prompt])
    assert (mem.encode('ASCII'), b'\r9000: ' + output.encode('ASCII')) \
        == (m.bytes(depaddr, 8),                 outstream.written())
    assert depaddr + depfwd == m.word(S.vS_deposit)
    assert b'' == instream.read()

####################################################################
#   Commands: Checksum, Memory Copy

@param('len', [1, 0xFF, 0x100, 0x101, 0x321], ids=tmc_tid)
def test_cksum(m, S, R, loadbios, len):
    start = 0x4000;  data  = [0xEE] * len
    m.deposit(start, data)
    m.depword(S.vS_source, start)
    m.depword(S.vE_source, start + len)

    crc = crc_hqx(bytes(data), 0xFFFF)
    _, out = loadbios()
    m.call(S['cmd_cksum.exec'], stopat=[S['cmd_cksum.end']])
    assert f'\r{start:04X}:{start+len:04X}   ={crc:04X}\n' \
        == out.written().decode('ASCII')

@param('s, e, t, u', [
    #   target range is always fully filled.
    (0x100, 0x108, 0x110, 0x110),       # src 0/8 â†’ target len 0
    (0x100, 0x108, 0x110, 0x118),       # src 8/8 â†’ target len 8
    (0x100, 0x108, 0x110, 0x113),       # src 3/8 â†’ target len 3
    (0x100, 0x103, 0x110, 0x118),       # src 3/3 â†’ target len 8, copy src 2.7Ã—
    (0x204, 0x20C, 0x200, 0x208),       # src > target, but overlapped
    pytest.param(
        *(0x200, 0x208, 0x204, 0x20A),  # src < target, but overlapped
        marks=pytest.mark.xfail(strict=True, reason='No reverse copy yet')),
   #    The test itself doesn't handle ranges that wrap past the end
   #    of memory to the beginning, and it's a bit difficult to make it
   #    handle that.
   #(0xFFFE, 0x0002, 0x0100, 0x0104),
   #(0x0100, 0x0104, 0xFFFE, 0x0002),
], ids=tmc_tid)
def test_memcopy_u(m, S, R, s, e, t, u):
    #   Set parameters (Warning: relies on param order in memory)
    m.depword(S.vS_source, [s, e, t, u, 0])
    print('s,t,e,u', m.hexdump(S.vS_source, 8))

    source_data = list(map(lambda x: (x+0x80) & 0xFF, range(s, e)))
    m.deposit(s, source_data)
    print(m.hexdump(s-2, e-s+4))

    destlen = u - t
    if destlen < 0: destlen += 0x10000
    expected_target_data = list(islice(cycle(source_data), destlen))

    try:    # print info in case of crash
        m.call(S['cmd_memcopy.exec'], stopat=[S.prompt])
    finally:
        print(m.hexdump(t-2, destlen+4))
    assert bytes(expected_target_data) == m.bytes(t, u-t)

@pytest.mark.xfail
def test_memcopy_v(m, S, R):
    ' Use `V` param to calculate target end from other addrs. '
    assert 0


####################################################################
#   Commands: Other

from src.tmon.test import (
    test_invalid_command, test_ignored, test_cancel,
    test_newline, test_comment, test_quit, test_calc, test_params_good_bad_good,
    test_intelhex_good, test_intelhex_errors,
    )

def test_quit_default(m, S, R, loadbios):
    _, out = loadbios(input=b'q\r')
    m.deposit(S.t0, 123)               # sentinel
    m.call(S.cmd_quit, stopat=[S.exit])
    crc = crc_hqx(m.bytes(S.v_start, S.v_end - S.v_start), 0xFFFF)
    assert (0, crc) == (m.byte(S.t0), m.word(S.v_cksum))

@param('t', [0, 1, 2, 0xFF])
def test_quit_param(m, S, R, loadbios, t):
    _, out = loadbios(input=bytes(f'qt{t:x}\r', 'ASCII'))
    m.deposit(S.t0, (t-3) & 0xFF )      # sentinel
    m.call(S.cmd_quit, stopat=[S.exit])
    assert t == m.byte(S.t0)

####################################################################
#   Command parsing

@param('cmdchar, cmdaddr', [
    (b'A', 0xBBAA), (b'E', 0xFFEE), (b'0x01', None), (b'0xFF', None),
])
def test_command_dispatch(m, S, R, cmdchar, cmdaddr):
    cmdtbl = 0x880; m.deposit(cmdtbl, bytes([
        ord('A'), 0xAA, 0xBB,
        ord('C'), 0xCC, 0xDD,
        ord('E'), 0xEE, 0xFF,
        0, ]))
    print(m.hexdump(cmdtbl, 16))

    dispatch = S['prompt.dispatch']
    cmdjmp   = S['prompt.cmdjmp']
    cmderr   = S['prompt.cmderr']
    m.call(dispatch, R(b=cmdchar[0], hl=cmdtbl), stopat=[cmdjmp, cmderr])
    if cmdaddr is None:  assert cmderr == m.pc          , 'invalid command'
    else:                assert R(hl=cmdaddr) == m.regs , 'command addr'

def test_prompt_examine(m, S, R, loadbios):
    commands = b'e s12aB l2 w6\nq\nEND'
    inp, out = loadbios(input=commands)
    m.call(S.init, stopat=[S['init.end']])  # testing default values
    m.call(S.prompt, stopat=[S.exit], maxsteps=10000)

    bs2 = b'\b\b'; bs4 = b'\b\b\b\b'; clr = b'    ' + bs4
    expected = b'@.e s0000' + bs4 + b'12aB ' + clr \
             + b'l04' + bs2 + b'2 ' + clr \
             + b'w08' + bs2 + b'6' + clr + b'\r' \
             + b'12AB: FF 00 12 23 34 45 \n12B1: 56 67 78 89 9A AB \n' \
             + b'.q\n'
    actual = out.written()

    print(f'vS_examine={m.word(S.vS_examine):04X}, ' \
        f'vL_examine={m.byte(S.vL_examine)} vW_examine={m.byte(S.vW_examine)}')
    print(f'expected: {expected!r}\n  actual: {actual!r}')
    assert (b'END', expected) == (inp.read(),   actual)
