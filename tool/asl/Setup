#!/usr/bin/env python3
'''
    Configure for use of the Macroassembler AS.

    This will fetch from `ASL.source_repo` and build the `ASL.source_ref`
    branch, if necessary.

    See the module documentation for `setup` for more details.
'''

from    os.path  import abspath, dirname
import  shutil, sys

sys.path.insert(0, abspath(dirname(dirname(__file__)))) # setup.py location
from setup import *

class ASL(Setup):

    def toolset_name(self):
        return 'asl'

    def source_repo(self):
        return 'https://github.com/KubaO/asl.git'

    def source_ref(self):
        return 'dev/cjs/current'

    def check_installed(self):
        ''' *Silently* determine if the toolset is currently available or
            not and exit with success if it is.
        '''
        if checkrun(['asl', '-this-is-not-an-option'], 4, b'Invalid option'):
            successexit()

    def fetch(self):
        ''' Fetch the tool if not already present in TARGET. '''
        if self.srcdir().is_dir():
            self.printaction(
                'Using existing source in {}'.format(self.srcdir()))
            return

        self.printaction('Cloning {} from {}'.format(
            self.toolset_name(), self.source_repo()))
        runcmd([ 'git', 'clone', str(self.source_repo()), str(self.srcdir()) ])

        self.printaction(
            'Switching to ref or branch {}'.format(self.source_ref()))
        runcmd([ 'git', '-C', str(self.srcdir()),
            'checkout', str(self.source_ref()) ])

    def configure(self):
        ''' Configure build, if not already done. '''
        if self.srcdir().joinpath('Makefile.def').exists():
            self.printaction('Using existing build configuration')
            return

        self.printaction('Configuring {}'.format(self.srcdir()))

        shutil.copyfile(
            str(Path(__file__).parent.joinpath('gitignore')),
            str(self.srcdir().joinpath('.gitignore')))

        mfdef_template = self.srcdir().joinpath(
                'Makefile.def-samples', 'Makefile.def-x86_64-unknown-linux')
        mfdef = self.srcdir().joinpath('Makefile.def')
        shutil.copyfile(str(mfdef_template), str(mfdef))
        with mfdef.open('at') as fd:
            print('\n\n#', '-'*73, file=fd)
            print('# tool/asl/Setup additional configuration\n', file=fd)
            #   These are the two dirs defined when compiling.
            print('LIBDIR =', self.pdir('lib', 'asl'), file=fd)
            print('INCDIR =', self.pdir('include', 'asl'), file=fd)

    def build(self):
        ''' Build  the tool.

            This is generally expected to rebuild the tool if any files have
            changed in the local source copy.
        '''
        #   Note we avoid building the documentation here.
        runcmd(['make', '-j8'], cwd=self.srcdir())

    def install(self):
        ''' For ASL we don't use `make install` because that wants to build the
            documentation, which requires LaTeX and even then tends to drop to
            interactive prompts about missing `german.sty` etc.

            As well, it's nicer four our purposes to use symlinks back to the
            build directory because then a developer tweaking AS can just
            `make` in the source directory to make the new version available to
            the build system.

            So instead we emulate the parts of install.{bat,cmd,sh} we want,
            which is bin/, lib/ (the message files are required) and include/.
        '''

        binfiles = ('asl', 'plist', 'alink', 'pbind', 'p2hex', 'p2bin',)
        for f in binfiles:
            dest = self.pdir('bin').joinpath(f)
            if not dest.exists(): dest.symlink_to(self.srcdir().joinpath(f))

        #   The localization message files normally go in lib/asl/, but the
        #   programs don't find them there by default (unless perhaps the
        #   prefix is /usr/local/). We could emit a setting for the AS_MSGPATH
        #   environment variable to indicate where they are, but to allow use
        #   of these tools from the command line without running the Setup
        #   script, it seems better to just drop the files into bin/, where the
        #   programs can automatically find them.
        #
        for path in self.srcdir().glob('*.msg'):
            dest = self.pdir('lib', 'asl').joinpath(path.name)
            if not dest.exists(): dest.symlink_to(path)

        srcs = self.srcdir().joinpath('include')
        for src in srcs.glob('**/*'):
            if src.is_dir(): continue
            dest = self.pdir('include', 'asl').joinpath(src.relative_to(srcs))
            dest.parent.mkdir(parents=True, exist_ok=True)
            if not dest.exists(): dest.symlink_to(src)

if (__name__) == '__main__':
    ASL().main()
