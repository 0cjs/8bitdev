from    testmc.i8080  import  Machine
from    src.clic.oref  import ORef as O
from    random  import randrange
import  pytest

test_rig = '''
            cpu  8080
            include src/i8080/std.i80
            include testmc/i8080/tmc/biosdef.i80

            org  $400
            include src/i8080/clic/prexpr.i80
            include src/i8080/pr/hex.i80
            include src/i8080/pr/dec.i80
            include src/i8080/pr/str.i80
'''

####################################################################

param   = pytest.mark.parametrize

@param('sym, s', [
    (O.NIL,                 b'nil'),
    (O.TRUE,                b'#t'),
    (O.const(0xFC),         b'c#FC'),
    (O.ptr(0x43BC),         b'#43BC'),
    (O.ptr(0x0100),         b'#0100'),
    (O.ptr(0xFFFC),         b'#FFFC'),
    (O.sym12(b'a'),         b'a'),
    (O.sym12(b'\x00'),      b'\x00'),
    (O.sym12(b'\xFF'),      b'\xFF'),
    (O.sym12(b'ab'),        b'ab'),
    (O.smallint(0),         b'0'),
    (O.smallint(1),         b'1'),
    (O.smallint(23),        b'23'),
    (O.smallint(456),       b'456'),
    (O.smallint(7890),      b'7890'),
    (O.smallint(8191),      b'8191'),
    (O.smallint(-1),        b'-1'),
    (O.smallint(-23),       b'-23'),
    (O.smallint(-456),      b'-456'),
    (O.smallint(-7890),     b'-7890'),
    (O.smallint(-8192),     b'-8192'),
])
def test_prcell_other(m, S, R, loadbios, sym, s):
    addr = randrange(0x4000, 0xFFFF)    # even unaligned addrs, because why not.
    print(f'sym ${sym:04X} @ ${addr:04X}')
    m.depword(addr, sym)
    _, out = loadbios()
    m.call(S.prcell, R(hl=addr))
    assert R(hl=addr) == m.regs      # preserve HL
    assert s == out.written()
