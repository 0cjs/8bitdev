;   Routines for my Apple 1 Replica SBC and bits of hardware I've added to it.
;
;   PIA0 (onboard): $D010-$D01F; mirrored at $D030, $D050, ...
;   PIA1: $D000-$D00F, mirrored at $D020, $D040, ...

            cpu 6502
            include "src/mos65/std.a65"
            include "src/biosdef/apple1.a65"

            org $400

;----------------------------------------------------------------------
;   Utility routines

;   Call a single routine and return to the monitor.
;
;   This is intended for the developer to tweak on the Apple 1 by
;   changing the jump location, e.g., `401:7` to call loopdlymax.
;
call:       jsr main
            jmp wozmon
nothing:    rts             ; test target for JSR above

;   Short delay loop; exact timing is not so important.
;   Delay is X * 1.8 ms (@1 MHz). Preserves A and Y.
;
loopdlymax: ldx #0          ; maximum human delay this routine can do
loopdly:    pha
            tya
            pha
.outerloop  dex
            beq .done
            ldy #$00
.innerloop  dey
            beq .outerloop
            bne .innerloop
.done       pla
            tay
            pla
            rts

;   Wait for a key from the keyboard, returning it in A.
;   The Apple 1 keyboard always returns chars with the MSB set.
;   (The ROM has no separate subroutine for this.)
getkey:     lda KBDCR
            bpl getkey      ; IRQ1A flag (b7) not set: no input ready
            lda KBD
            rts

;----------------------------------------------------------------------
;   PIA routines

PIA2_DA     equ     $D000
PIA2_CA     equ     $D001
PIA2_DB     equ     $D002
PIA2_CB     equ     $D003

;   Initialize PIA 2: Port A all input, port B all output.
;
;   This may be called any time; it does not depend on the PIA having
;   been reset first.
;
;   A is unused at the moment, but may be used for I/O with a device
;   that requires CMOS-level inputs (min. 3.5 V high rather than 2 V).
;
;   B currently drives an LED display of some sort.
;
pia2init:   lda #0
            sta PIA2_CA
            sta PIA2_CB
            lda #$FF
            sta PIA2_DA
            sta PIA2_DB
            lda #%00000100  ; C{AB}{12} lines input, no interrupts
            sta PIA2_CA
            sta PIA2_CB
            rts

;
;   Counting in various ways out port B, with user-visible timing.
;

countdown:  lda #$FF
            sec
.loop       sta PIA2_DB
            sta PIA2_DA
            ldx #110        ; about 200 ms.
            jsr loopdly
            sbc #1
            bne .loop
            rts

countup:    lda #$00
            clc
.loop       sta PIA2_DB
            sta PIA2_DA
            ldx #110        ; about 200 ms.
            jsr loopdly
            adc #1
            bne .loop
            rts

mancount:   ;   Manual count triggered via keyboard input
            ldy #00
.loop       sty PIA2_DB
            sty PIA2_DA
            lda #' '
            jsr ECHO
            tya
            jsr PRBYTE
            jsr getkey
            iny
            bne .loop
            rts

main:       jsr pia2init
            jsr countup
            lda #0
            sta PIA2_DB     ; turn off all lights
            sta PIA2_DA
            jmp wozmon
