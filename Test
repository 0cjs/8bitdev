#!/usr/bin/env bash
set -eu -o pipefail

die() {
    local exitcode="$1"; shift
    [[ -z $1 ]] || echo 1>&2 "$@"
    exit $exitcode
}

download_asxxxx() {
    local archive=5p31_exe_linux.zip
    local dldir="$basedir/.download"
    local instdir="$builddir/bin"
    local url='http://shop-pdp.net/_ftp/asxxxx'
    local sha=648a11d48daab3b67e97d82221315b074e874ea30b3f0ead2836baec211940c7

    [[ -x $instdir/aslink && -x $instdir/as6500 ]] && return

    sha256sum --version >/dev/null || die 3
    local shacheck=$(sha256sum "$dldir/$archive" 2>/dev/null)
    [[ ${shacheck%% *} = $sha ]] || {
        echo "Downloading $archive"
        curl --create-dirs -o "$dldir/$archive" -L "$url/$archive"
    }

    unzip -h >/dev/null || die 3
    mkdir -p "$instdir"
    (cd "$instdir" && unzip -qo "$dldir/$archive" && chmod +x as* s19os9*)

    #   Here it would be nice to run "$instdir"/aslink and print out
    #   what went wrong if it fails (usually because we can't run
    #   32-bit executables), but that's difficult because getting the
    #   help message returns an error exit code.
}

####################################################################
#   Command-line options/arguments

quiet=-q
for arg in "$@"; do [[ $arg = -v* ]] && quiet=; done

####################################################################
#   Main

basedir=$(cd "$(dirname "$0")" && pwd -P)
builddir="$basedir/.build"

download_asxxxx
. ./activate -q

export PATH="$builddir/bin:$PATH"
cd "$basedir"
mkdir -p "$builddir/obj"

####################################################################
#   Build code
#
#   The files to build are currently hardcoded with
#   no dependency graph so it rebuilds everything each time.
#   (Fortunately this is quite fast.)

#   -x  Output in hexadecimal
#   -p  Disable listing pagination
#   -w  Wide listing format for symbol table (55 char of symname instead of 14)
#   -l  Create listing file (`.lst`)
#   -o  Create object file (`.rel`)
#   -s  Create symbol file (`.sym`) (removes symtab from listing file)
#   -r  Inlcude assembler line numbers in the `.hlr` hint file
#   -rr Inlcude non-list assembler line numbers in the `.hlr` hint file
asmopts="-xplo"

#   -n  No echo of commands to stdout
#   -u  Update listing file (`.lst`) with relocated addresses info (`.rst`)
#       (This does not update the addresses in the symbol table.)
#   -m  Generate map output file (`.map`)
#   -w  "Wide" mode for map file (show 32 chars, not 8, of symbol names)
#   -t  Output format: Tandy Color Computer BASIC binary file (`.bin`)
linkopts="-numwt"

asm() {
    local srcfile="$1"; shift
    #   `.rel` output extension is replaced/added automatically
    as6500 $asmopts "$builddir/obj/"$(basename "$srcfile") "$srcfile" "$@"
}

link() {
    #   First filename is outputfile; extn replaced by .hex/.s19/.bin.
    #   Subsequent filenames are input files, with or without .rel extension
    #   Single filename is ouput and input.
    #   Other arguments before and after
    (cd $builddir/obj/ && aslink $linkopts "$@")
}

asm src/simple.a65      ; link simple
asm src/c64.a65         ; link c64
asm src/reloctest.a65
link reloctest -b '_code=0x400' reloctest

#   Replace form feeds since we view listing only on screen. This must
#   be done *after* the .rst file is created by the linker because
#   otherwise the extra newlines make the linker edit the wrong lines
#   in the .lst file.
sed -i -e 's/\f/\n/' "$builddir"/obj/*.{lst,rst,map}

export PYTHONPATH="$basedir/lib"
#   XXX This probably relies on the cwd to find the pytest.ini.
pytest -q "$@"
