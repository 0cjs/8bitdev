;   NEC PC-8001 expansion ROM with various programs and experiments.

            cpu Z80
            include  src/i8080/std.i80

; ----------------------------------------------------------------------
;   PC-8001 BIOS

prchar      equ  $0257          ; ♠A ♡* print char to CRT
rdchar      equ  $0F75          ; ♠A ♣BCHL wait for char from keyboar

;   ♠A ♣?   print char in A to current output device
rst__outchar macro
            rst  $18
            endm
outchar     equ  $40A6

diskbreq    equ  $1875          ; "Disk BASIC feature" error
basicret    equ  $3C82          ; ??? return to basic after USR, etc.?
monitor     equ  $5C66          ; enter monitor

perr_syntax equ  $3BDF          ; "Syntax error"
perr_misop  equ  $3BF4          ; "Missing operand"
perr_type   equ  $3BF7          ; "Type mismatch"
perror      equ  $3BF9          ; ♠C=error code

;   BASIC statement hooks. These are initialised with `jp err_notimpl`.
err_notimpl equ  $1875          ; "Disk BASIC Feature" error routine
sj_00       equ  $F0E1          ; start of statement hook table
sj_CMD      equ  $F0FC          ; jump point for BASIC `CMD`
sj_end      equ  $F1B6          ; end (exclusive) of statement hook table

; ----------------------------------------------------------------------
;   Expansion ROM Header

            org  $6000          ; start of expansion ROM
            db   'AB'           ; signature indicating expansion ROM present
exprom_init jp   init           ; entry point of expansion ROM initialisation

; ----------------------------------------------------------------------
;   General I/O Routines

            include  src/i8080/pr.i80

;   We don't use the BASIC routine because we need this before it's init'd.
prstr       ld   a,(hl)
            inc  hl             ; move past terminator before exit
            or   a,a
            ret  Z
            call prchar
            jr   prstr

prnl        push af
            ld   a,'\r'
            call prchar
            ld   a,'\n'
            call prchar
            pop  af
            ret

; ----------------------------------------------------------------------
;   ROM Init

init        ld   hl,.message    ; print "ROM installed" banner
            call prstr
            ;   All statement hook table entries enter tmon.
            ld   d,MB(intentry)
            ld   e,LB(intentry)
            ld   hl,sj_00
            ;   Actually, the statement hook table, which we'd calculate as
            ;   b,(sj_end-sj_00)/3, is probably too long, since entries
            ;   near the end are filled with RET, and other things in the
            ;   BIOS call these and expect no failure. So instead we use
            ;   the $2E from the ROM routine that inits the table.
            ld   b,$2E
-           inc  hl             ; skip past JMP
            ld   (hl),e         ; address LSB
            inc  hl
            ld   (hl),d         ; address MSB
            inc  hl
            djnz -
            ;   Fill in specific commands for which we have other actions.
            ld   hl,cmd         ; hook BASIC `CMD` statement
            ld   (sj_CMD+1),hl
            ret                 ; continue main ROM init
            ;
.message    db '8bitdev expansion ROM #1.\r\n',0

; ----------------------------------------------------------------------
;   BASIC Statement Hooks
;
;   These are entered through statement hook table entries, with:
;   • HL→ The remainder of the command line, tokenized (leading spaces
;     skipped, converted to upper case, tokens substituted, $00-terminated).
;   • DE→ Address of command processing routine in `iltbl`.
;   • BC→ Address of statement hook.
;   The cursor is left at start of a new line.
;
;   XXX Not clear how we return error versus not. RET sometimes generates
;   a "Syntax error," sometimes not; it must depend on flags or something.
;   for the moment, we hack it by using `basicret`, but that may be
;   wrong, especially when it comes to stack handling.

;   Parse argument to `CMD` statement and run matching routine.
;   This is a bogus little Q&D routine that checks only the first
;   character given as an argument to `CMD`.
cmd         ;   HL→cmdargs,0
            ld  a,(hl)
            or  a,a             ; No argument?
            jp  Z,perr_misop    ;   yes: "Missing operand"
            ld   de,cmdtab_str
            call strtabi        ; match a valid argument?
            jp   NZ,+           ;   yes: execute matching routine
            ld   e,5            ; "Illegal function call"
            jp   perror
            ;
+
            ld   hl,cmdtab_addr
            ld   a,c
            add  a,a            ; byte index → word index
            add  a,l            ; index into table
            ld   l,a
            jp   NC,+           ; add carry if necessary (Z80 jr is shorter)
            inc  h
+           ld   a,(hl)         ; load address from table
            inc  hl
            ld   h,(hl)
            ld   l,a
            jp   (hl)

            include  src/i8080/strtabi.i80

cmdtab_str  db   'HELP',0
            db   'HELLO',0
            db   'T',$B7,0       ; "TMON": $B7 = `MON` token
            db   0
cmdtab_addr dw   cmd_help
            dw   cmd_hello
            dw   cmd_tmon

; ----------------------------------------------------------------------
;   Minimal "Hello, world."

cmd_help    ld   hl,.message
            call prstr
            jp   basicret

.message    db   'CMD HELP|HELLO|TMON\r\n',0

; ----------------------------------------------------------------------
;   A more sophisticated "Hello, world" that reads and writes chars.
;
;   XXX this has its own prstr, which should be extracted.

cmd_hello   call hello
            jp   basicret

    section hello
            public hello
            include src/i8080/hello.i80
    endsection hello

; ----------------------------------------------------------------------
;   tmon
;
;   XXX TODO:
;   - BS prints a visible char; need to fix print routine I guess
;   - prvischar and prscreenchar need to be set up for inverse (and maybe
;     prvischar should be using that printable BS, etc.)
;   - tmon_ram area needs to find a better home (BASIC stomps on it?)
;   - should set default `E` width based on 40/80 col mode?

cmd_tmon

    section tmon
            public intentry

tmon_rom    equ  $
tmon_ram    equ  $EA00-$30      ; XXX overlaps BASIC unless we CLEAR!
tmon_stksz  equ  $20
BACKSPACE   equ  $1D            ; cursor left

            public entry
            include src/i8080/tmon.i80

            include src/i8080/prvischar/pc8001.i80      ; XXX no reverse
            include src/i8080/prscreenchar/ascii.i80    ; XXX no reverse

exit        jp   basicret

BEL         equ  $07
errbeep     ld   a,BEL
            jp   prchar         ; RET

    endsection tmon

; ----------------------------------------------------------------------
;   End of Expansion ROM.

    if $ > $7FFC
            error 'code PC=$\{$} > expansion RAM max $\{tmon_ram_end}'
    endif

            org  $7FFD
;altmonvec  dw   altmon         ; alternate monitor entry point
;           db   $55            ; magic byte for `MON` to use altmonvec
