from    testmc.mc6800.opcodes   import Instructions as I
from    testmc.mc6800.opcodes   import *
from    testmc.mc6800.opimpl    import *
from    testmc.mc6800           import Machine
from    testmc                  import LB, MB, tmc_tid
import  pytest

############################################################################
#   Many functions from the opimpl module are not directly tested, but
#   instead are tested through the tests of instruction implementations.
#   This is because we want to test directly as many instruction
#   implementations as possible. The instruction implementations themselves
#   are usually very simple, and so their tests are mainly testing the
#   support functions anyway.
############################################################################

def tc(argnames, *argvalues):
    ''' Decorator for a list of test cases, parametrizing a test function.
        Avoids boilerplate words and gives nicer test IDs.
    '''
    return pytest.mark.parametrize(
        **{ 'argnames': argnames, 'argvalues': argvalues, 'ids': tmc_tid, })

@pytest.mark.xfail(strict=True, reason='Implementation incomplete')
def test_all_opcodes_implemented():
    ''' We expressly mark invalid opcodes with an entry in OPCODES,
        so anything missing is something that is not yet implemented.
    '''
    missing_count = 256 - len(OPCODES)
    assert not missing_count, 'Missing instruction count'

####################################################################
#   Address handling, reading data at the PC

@tc('initial, addend, expected',
    (      0,      0,        0),
    (      0,      1,        1),
    (      0,      2,        2),
    (   0xFE,      1,     0xFF),
    (   0xFE,      2,     0x00),
    (   0xFE,      3,     0x01),
    (      1,     -1,        0),
    (      1,     -2,     0xFF),
    (      1,     -3,     0xFE),
)
def test_incbyte(initial, addend, expected):
    assert expected == incbyte(initial, addend)

@tc('initial, addend, expected',
    (      0,      0,        0),
    (      0,      1,        1),
    (      0,      2,        2),
    ( 0xFFFE,      1,   0xFFFF),
    ( 0xFFFE,      2,   0x0000),
    ( 0xFFFE,      3,   0x0001),
    (      1,     -1,        0),
    (      1,     -2,   0xFFFF),
    (      1,     -3,   0xFFFE),
    ( 0x8000, 0xFFFF,   0x7FFF),
    ( 0x8000,-0xFFFF,   0x8001),
)
def test_incword(initial, addend, expected):
    assert expected == incword(initial, addend)

@tc(' inb,   out',
    (0x00,     0),
    (0x01,     1),
    (0x7F,  0x7F),
    (0x80, -0x80),
    (0xFF,    -1),
)
def test_readsignedbyte(inb, out):
    #   This covers signedbyteat() as well.
    m = Machine()
    m.pc = 0xFFFF
    m.deposit(m.pc, inb)
    assert out == readsignedbyte(m)
    assert 0x0000 == m.pc

@tc('     x, offset, target',
    (0x0000,   0x00, 0x0000),
    (0x0004,   0x03, 0x0007),
    (0x0080,   0xFF, 0x017F),
    (0xFFFF,   0x01, 0x0000),
    (0xFFFF,   0xFF, 0x00FE),
)
def test_readindex(x, offset, target):
    m = Machine()
    m.setregs(R(x=x, pc=0x10))
    m.deposit(0x10, offset)
    assert target == readindex(m)

####################################################################
#   Opcode test framework

R = Machine.Registers

def runop(opdata, *, machine=None, memsize=0x402, startaddr=None,
        initregs=R(), initmem={}, changedregs=R(), changedmem={}):
    m = machine
    if m is None:
        m = Machine(memsize=memsize)
    if startaddr is None:
        startaddr = 0x300 + v8(opdata[0])

    #   Set registers A, B and X to have non-zero values if they're not
    #   otherwise used to help detect if they're accidentally zeroed.
    m.a = 0xA5; m.b = 0xB5; m.x = 0xC5D5;

    #   For any register not explicitly set that has a value in changedregs,
    #   set it to some other value so we can confirm it was changed.
    unsetregs = set()
    for name, val in initregs.all().items():
        if val is None: unsetregs.add(name)
    #   But always exclude the program counter and stack pointer
    #   as they should never be randomized!
    unsetregs.discard('pc'); unsetregs.discard('sp')
    for name, val in changedregs.valued().items():
        if name in unsetregs:
            setattr(m, name, not val)
    #   Also set unexpected values for any memory locations expected to change.
    for addr, value in changedmem.items():
        m.mem[addr] = not value

    #   Now that unexpected values have been placed, set any specified
    #   initial data. This is done after the unexpected value
    #   initialization so that those can be explicitly overridden.
    m.deposit(startaddr, opdata)
    for addr, value in initmem.items():
        m.deposit(addr, value)
    m.setregs(initregs)

    m.pc = startaddr
    prevregs = m.regs
    prevmem = bytes(m.mem)

    m.step(1)

    regs = m.regs
    #   If any regs in the machine are unvalued (i.e., set to `None`)
    #   the opcode implementation has done something very wrong.
    unvalued = set(regs.all().keys()) - set(regs.valued().keys())
    assert not unvalued, \
        'op=${:02X} produced unvalued register(s)'.format(opdata[0])

    if changedregs.pc is None:
        changedregs = changedregs.clone(pc=startaddr + len(opdata))
    allregs = prevregs.clone(**changedregs.valued())

    #   Lining these up in columns makes it easier to see what was wrong.
   #print('    expected all:', allregs)
   #print('expected changed:', changedregs)
   #print('          actual:', regs)

    #   First assert that the registers and flags expected to change have
    #   their correct values. This makes more clear test failures where a
    #   tested value is wrong.
    assert changedregs == regs, \
        'expected register/flag changes, op=${:02X}'.format(opdata[0])
    #   Now assert that the other registers and flags, which we did not expect
    #   to change (and are not explicitly tested), are actually unchanged.
    assert allregs == regs, \
        'unexpected register/flag changes, op=${:02X}'.format(opdata[0])

    newmem = bytearray(prevmem)
    for addr, value in changedmem.items():
        newmem[addr] = value
    assert newmem == m.mem

def v8(val):
    ''' Given a byte or word `val`, return an 8-bit value dependent upon
        but not obviously related to `val`. (A given input value will
        always produce the same output value.) This is useful to produce
        different offsets for tests based on their test data.
    '''
    if val > 0xFF:
        val = (val >> 8) ^ val
    return (val-60) & 0xFF

def v16(val, offset=0x80):
    ''' Given a byte or word `val`, return a 16-bit value between `offset`
        and `offset`+$FF that is dependent upon but not obviously related
        to `val`. (A given input value will always produce the same output
        value.) This is useful to produce different addresses for tests
        based on their test data.
    '''
    return offset + (v8(val) ^ 0xFF)

def accx(optemplate):
    ''' Parametrize by A and B accumulators.

        `optemplate` is the name of the opcode from `opcodes.OPCODES` with
        `~` in place of the accumulator name, e.g., ``LDA~m`` or ``BIT~m``.

        The opcode names for the A and B versions (``LDAAm``, ``LDABm``)
        will be generated; these can be looked up with ``I[opname]``.

        An `accval(value, regs_flags)` function will also be given; this
        constructs a `Registers` object where the selected accumulator is
        initialized with *value* and the remaining parameters are passed
        on to the `Registers` constructor, e.g. ``accval(0xFF, Z=1, V=0)``.
    '''
    opnameA = optemplate.replace('~', 'A')
    opnameB = optemplate.replace('~', 'B')
    def make_accval(accname):
        def accval(accvalue, **kwargs):
            return R(**{ accname: accvalue, **kwargs })
        return accval
    return pytest.mark.parametrize(**dict(
        argnames='opname, accval',
        argvalues=((opnameA, make_accval('a')), (opnameB, make_accval('b')))
        ))

def inoutflags(arg, N, Z, V, C, *, H=None, inflags=R()):
    ''' Given expected output flags where `None` indicates "unchanged,"
        return a pair of `Registers` objects ``(inflags, outflags)`` for
        the input and expected output flag values.

        To try to test "unchanged" for both 0 and 1 initial values, flags
        expected to be unchanged will be set to the low bit of `arg`, which
        should be a value that changes across different tests.

        Input flags set by the test, if any, should be provided in the
        `Registers` object `inflags`.
    '''
    outflags = R(N=N, Z=Z, V=V, C=C, H=H)
    for flag in ('N', 'Z', 'V', 'C', 'H'):
        if getattr(outflags, flag) is None:
            f = arg & 1
            inflags = inflags.clone(**{flag:f})
            outflags = outflags.clone(**{flag:f})
    return inflags, outflags

def rununary(instr, arg, res, N, Z, V, C, inflags=R()):
    ''' Test a unary operation in the standard four addressing modes:
        ACCA, ACCB, extended (memory) and indexed (from X register).

        `instr` is the base instruction name; this will be run with A, B, m
        and x suffixes, asserting that ``arg`` is replaced by ``res` and
        that flags `N`, `Z`, `V` and `C` have the specified values, or
        unchanged if the specified value is `None`.
    '''
    inflags, outflags = inoutflags(arg, N, Z, V, C, inflags=inflags)

    runop([I[instr + 'A']],
        initregs=inflags.clone(a=arg), changedregs=outflags.clone(a=res))
    runop([I[instr + 'B']],
        initregs=inflags.clone(b=arg), changedregs=outflags.clone(b=res))

    addr = v16(arg)
    runop([I[instr + 'm'], MB(addr), LB(addr)],
        initmem={ addr:arg }, initregs=inflags,
        changedmem={ addr:res }, changedregs=outflags)

    base, offset = v16(arg), v8(arg)
    runop([I[instr + 'x'], offset],
        initmem={ base+offset:arg }, initregs=inflags.clone(x=base),
        changedmem={ base+offset:res }, changedregs=outflags)

def runbinary(instr, arg0, arg1, res, N, Z, V, C, *, H=None, inflags=R()):
    ''' Test a binary operation for both A and B accumulators in all four
        standard addressing modes: immediate, direct, extended and indirect.

        `instr` is the base instruction name; this will be run with A, B,
        Az, Bz, Am, Bm, Ax and Bx suffixes, asserting that `arg0` is
        replaced by `res` and that flags `N`, `Z`, `V`, `C` and `H` have
        the specified values, or unchanged if the specified value is
        `None`. (`H` is optional, defaulting to `None`; most ops don't
        use it.)
    '''
    inflags, outflags = inoutflags(arg1, N, Z, V, C, H=H, inflags=inflags)

    for acc in ('A', 'B'):
        inacc = { acc.lower(): arg0 }
        outacc = { acc.lower(): res }

        runop([I[instr + acc], arg1],
            initregs=inflags.clone(**inacc),
            changedregs=outflags.clone(**outacc))

        addr = v8(arg1)
        runop([I[instr + acc + 'z'], LB(addr)],
            initmem={ addr:arg1 }, initregs=inflags.clone(**inacc),
            changedregs=outflags.clone(**outacc))

        addr = v16(arg1)
        runop([I[instr + acc + 'm'], MB(addr), LB(addr)],
            initmem={ addr:arg1 }, initregs=inflags.clone(**inacc),
            changedregs=outflags.clone(**outacc))

        addr = v16(arg1); offset = v8(arg1)
        runop([I[instr + acc + 'x'], offset],
            initmem={ addr+offset: arg1 },
            initregs=inflags.clone(**inacc).clone(x=addr),
            changedregs=outflags.clone(**outacc))

####################################################################
#   Misc instructions

def test_invalid_opcodes():
    badops = (
        0x00, 0x02, 0x03, 0x04, 0x05,
        0x12, 0x13, 0x14, 0x15, 0x18, 0x1A, 0x1C, 0x1D, 0x1E, 0x1F,
        0x21,                           0x38, 0x3A, 0x3C, 0x3D,
        0x41, 0x42, 0x45, 0x4B, 0x4E,   0x51, 0x52, 0x55, 0x5B, 0x5E,
        0x61, 0x62, 0x65, 0x6B,         0x71, 0x72, 0x75, 0x7B,
        0x83, 0x87, 0x8F,               0x93, 0x9D,
        0xA3,                           0xB3,
        0xC3, 0xC7, 0xCC, 0xCD, 0xCF,   0xD3, 0xDC, 0xDD,
        0xE3, 0xEC, 0xED,               0xF3, 0xFC, 0xFD,
    )
    for i, op in enumerate(badops):
        addr = 0x00E0 + i
        with pytest.raises(InvalidOpcode) as ex:
            runop([op], startaddr=addr)
        assert (op, addr) == (ex.value.opcode, ex.value.regs.pc)
        assert ex.match(r'^op=\${:02X}.* pc={:04X} '.format(op, addr))

def test_NOP():
    #   The test framework will ensure that nothing but the PC has changed.
    runop([I.NOP])

####################################################################
#   Branches

def test_JMP():
    runop([I.JMP, 0xAB, 0xCD], changedregs=R(pc=0xABCD))

@tc('offset,      x,     pc',
    (     0, 0xFFFF, 0xFFFF),
    (     3, 0x1234, 0x1237),
    (  0xFF, 0xFF80, 0x007F),
)
def test_JMPx(offset, x, pc):
    runop([I.JMPx, offset], initregs=R(x=x), changedregs=R(pc=pc))

def test_BRA():
    runop([I.BRA,    0], startaddr=0x13, changedregs=R(pc=0x0015))
    runop([I.BRA,    3], startaddr=0x14, changedregs=R(pc=0x0019))
    runop([I.BRA, 0x7F], startaddr=0x00, changedregs=R(pc=0x0081))
    runop([I.BRA, 0x80], startaddr=0x0E, changedregs=R(pc=0xFF90))
    runop([I.BRA, 0xFC], startaddr=0x08, changedregs=R(pc=0x0006))
    #   Additional coverage in test_readsignedbyte().

@tc('   op, taken, initregs',
    #                       Carry flag
    (I.BCC, False, R(C=1)),             (I.BCC, True,  R(C=0)),
    (I.BCS, False, R(C=0)),             (I.BCS, True,  R(C=1)),
    #                       Zero flag
    (I.BEQ, False, R(Z=0)),             (I.BEQ, True,  R(Z=1)),
    (I.BNE, False, R(Z=1)),             (I.BNE, True,  R(Z=0)),
    #                       Negative flag
    (I.BMI, False, R(N=0)),             (I.BMI, True,  R(N=1)),
    (I.BPL, False, R(N=1)),             (I.BPL, True,  R(N=0)),
    #                       Overflow flag
    (I.BVC, False, R(V=1)),             (I.BVC, True,  R(V=0)),
    (I.BVS, False, R(V=0)),             (I.BVS, True,  R(V=1)),
    #                       Unsigned >
    (I.BHI, True,  R(C=0,Z=0)),         (I.BHI, False, R(C=0,Z=1)),
    (I.BHI, False, R(C=1,Z=1)),         (I.BHI, False, R(C=1,Z=0)),
    #                       Unsigned <=
    (I.BLS, False, R(C=0,Z=0)),         (I.BLS, True,  R(C=0,Z=1)),
    (I.BLS, True,  R(C=1,Z=1)),         (I.BLS, True,  R(C=1,Z=0)),
    #                       Signed <
    (I.BLT, False, R(N=0, V=0, Z=1)),        (I.BLT, True,  R(N=1, V=0)),
    (I.BLT, False, R(N=1, V=1, Z=1)),        (I.BLT, True,  R(N=0, V=1)),
    #                       Signed <=
    (I.BLE, False, R(N=0, V=0, Z=0)),   (I.BLE, True,  R(N=1, V=0, Z=0)),
    (I.BLE, False, R(N=1, V=1, Z=0)),   (I.BLE, True,  R(N=0, V=1, Z=0)),
    (I.BLE, True,  R(N=0, V=0, Z=1)),   (I.BLE, True,  R(N=1, V=0, Z=1)),
    (I.BLE, True,  R(N=1, V=1, Z=1)),   (I.BLE, True,  R(N=0, V=1, Z=1)),
    #                       Signed >=
    (I.BGE, True,  R(N=0, V=0, Z=1)),        (I.BGE, False, R(N=1, V=0)),
    (I.BGE, True,  R(N=1, V=1, Z=1)),        (I.BGE, False, R(N=0, V=1)),
    #                       Signed >
    (I.BGT, True,  R(N=0, V=0, Z=0)),   (I.BGT, False, R(N=1, V=0, Z=0)),
    (I.BGT, True,  R(N=1, V=1, Z=0)),   (I.BGT, False, R(N=0, V=1, Z=0)),
    (I.BGT, False, R(N=0, V=0, Z=1)),   (I.BGT, False, R(N=1, V=0, Z=1)),
    (I.BGT, False, R(N=1, V=1, Z=1)),   (I.BGT, False, R(N=0, V=1, Z=1)),
)
def test_condbranch(op, initregs, taken):
    print('op {} ${:02X}, flag: {}, taken {} expected\n'
        .format(OPCODES[op][0], op, str(initregs).split()[-1], taken))
    runop([op, 0x40], initregs=initregs, startaddr=0x0E,
        changedregs= R(pc=0x0050) if taken else R(pc=0x0010))

####################################################################
#   Instructions affecting the stack

@tc('initsp,    word,  newsp',
    (     0,  0x4142,      2),
    (     1,  0x4243,      3),
    (0xFFFD,  0xCECF, 0xFFFF),
    (0xFFFE,  0xCF40,      0),
    (0xFFFF,  0x4041,      1),
)
def test_popword(initsp, word, newsp):
    m = Machine()
    m.deposit(0x0000, b'\x40\x41\x42\x43')
    m.deposit(0xFFFC, b'\xCC\xCD\xCE\xCF')

    m.sp = initsp
    assert word == popword(m)
    assert newsp == m.sp

### Subroutine calls

def test_JSR():
    runop([I.JSR, 0x56, 0x78],
        memsize=65536, startaddr=0x1234,
        initregs    = R(sp=0),                      # test stack wraparound
        changedregs = R(pc=0x5678, sp=0xFFFE),
        changedmem  = { 0x0000: 0x37, 0xFFFF: 0x12, })

def test_JSRx():
    runop([I.JSRx,                    0x16],
        initregs    = R(sp=0x1F,  x=0xFFF0, ),
        changedregs = R(sp=0x1D, pc=0x0006, ),
        startaddr   =                   0x0123,
        changedmem  = { 0x1E: 0x01, 0x1F: 0x25, },
    )

def test_BSR():
    runop([I.BSR, 0xFE], startaddr=0x12,            # calling self
        initregs    = R(sp=0x18),
        changedregs = R(sp=0x16, pc=0x12),
        changedmem  = { 0x17: 0x00, 0x18: 0x14, },
    )

def test_RTS():
    runop([I.RTS],
        initregs=R(sp=0x002D), initmem={ 0x002E:0x12, 0x002F:0x34 },
        changedregs=R(pc=0x1234, sp=0x002F))

### Data Movement
#   All the other data movement operations affect flags.
#   PSH and PUL do not, which is why they belong here.

@accx('PUL~')
def test_PUL(opname, accval):
    runop([I[opname]], initregs=R(sp=0x000C), initmem={ 0x000D: 0xA1 },
        changedregs = accval(0xA1, sp=0x000D))

@accx('PSH~')
def test_PSH(opname, accval):
    runop([I[opname]], initregs=accval(0xEF, sp=0x000F),
        changedregs = R(sp=0x000E), changedmem  = { 0x000F: 0xEF })

### Interrupt Handling

@tc('cc',
    #   Bits 6,7 set/clear should be ignored so we test with both.
    0b11000000,                             # All flags clear
    0b11000001, 0b11000010, 0b11000100,     # Individual flags
    0b11001000, 0b11010000, 0b00100000,
    0b11010101, 0b00101010                  # Flag combinations
)
def test_RTI(cc):
    stackframe = {
        0x0FFA: cc,                 # CC (11HINZVC)
        0x0FFB: 0xBB, 0x0FFC: 0xAA, # ACCB, ACCA
        0x0FFD: 0x56, 0x0FFE: 0x78, # XH, XL
        0x0FFF: 0x12, 0x1000: 0x34, # PCH, PCL
    }
    runop([I['RTI']], memsize=0x2000,
        initmem=stackframe, initregs=R(sp=0x0FF9),
        changedregs=R(cc=cc, pc=0x1234, x=0x5678, b=0xBB, a=0xAA, sp=0x1000))

@tc('r',
    #   Same flag sets as RTI test
    R(sp=0x28FF, H=0, I=0, N=0, Z=0, V=0, C=0, b=0x12, a=0x34, x=0x5678),
    R(sp=0x2900, H=0, I=0, N=0, Z=0, V=0, C=1, b=0x0f, a=0x0e, x=0x0d0c),
    R(sp=0x2901, H=0, I=0, N=0, Z=0, V=1, C=0, b=0x01, a=0x02, x=0x0003),
    R(sp=0x2902, H=0, I=0, N=0, Z=1, V=0, C=0, b=0,    a=0,    x=0),
    R(sp=0x2903, H=0, I=0, N=1, Z=0, V=0, C=0, b=0,    a=0,    x=0),
    R(sp=0x2904, H=0, I=1, N=0, Z=0, V=0, C=0, b=0,    a=0,    x=0),
    R(sp=0x2905, H=1, I=0, N=0, Z=0, V=0, C=0, b=0,    a=0,    x=0),
    R(sp=0x0016, H=0, I=1, N=0, Z=1, V=0, C=1, b=0,    a=0,    x=0),
    R(sp=0x0017, H=1, I=0, N=1, Z=0, V=1, C=0, b=0,    a=0,    x=0),
)
def test_SWI(r):
    swivec  = 0xFFFA        # Assumes 16-bit addr bus; see opimpl.swi()
    swient  = r.sp + 0x20   # SWI entry point
    instaddr= r.sp + 10

    esp = r.sp - 7  # expected stack pointer after SWI
    stackdata = {
        esp+1: r.cc,            esp+2: r.b,             esp+3: r.a,
        esp+4: MB(r.x),        esp+5: LB(r.x),
        esp+6: MB(instaddr+1), esp+7: LB(instaddr+1),
    }
    print('expecting sp={:04X} ({}) cc={:02X} ({})\n{}'
        .format(esp, esp, r.cc, r.cc, sorted(stackdata.items())))

    runop([I['SWI']], memsize=65536, startaddr=instaddr,
        initregs=r, initmem={ swivec: MB(swient), swivec+1: LB(swient) },
        changedregs=r.clone(sp=esp, pc=swient, I=1), changedmem=stackdata)

####################################################################
#   Flag (Condition Code) Changes

@tc('   op,  flag',
    (I.CLC, R(C=0)), (I.SEC, R(C=1)),
    (I.CLV, R(V=0)), (I.SEV, R(V=1)),
    (I.CLI, R(I=0)), (I.SEI, R(I=1)),
)
def test_flag_change(op, flag):
    runop([op], changedregs=flag)

#   pccr = processor condition codes register (PRM A-70, A-72)
PCCRparams = {
    'argnames': 'pccr, flags',
    'argvalues': (
        (0b11000000, R(H=0, I=0, N=0, Z=0, V=0, C=0)),
        (0b11000001, R(H=0, I=0, N=0, Z=0, V=0, C=1)),
        (0b11000010, R(H=0, I=0, N=0, Z=0, V=1, C=0)),
        (0b11000100, R(H=0, I=0, N=0, Z=1, V=0, C=0)),
        (0b11001000, R(H=0, I=0, N=1, Z=0, V=0, C=0)),
        (0b11010000, R(H=0, I=1, N=0, Z=0, V=0, C=0)),
        (0b11100000, R(H=1, I=0, N=0, Z=0, V=0, C=0)),
        (0b11010101, R(H=0, I=1, N=0, Z=1, V=0, C=1)),
        (0b11101010, R(H=1, I=0, N=1, Z=0, V=1, C=0)),
        (0b11111111, R(H=1, I=1, N=1, Z=1, V=1, C=1)),
        ),
    'ids': tmc_tid,
    }

@pytest.mark.parametrize(**PCCRparams)
def test_tap(pccr, flags):
    runop([I.TAP], initregs=R(a=pccr), changedregs=flags)

@pytest.mark.parametrize(**PCCRparams)
def test_tpa(pccr, flags):
    runop([I.TPA], initregs=flags, changedregs=R(a=pccr))

####################################################################
#   Data Movement

#   LDx/STx instructions loading/storing 8-bit values.
#   All loads and stores affect N and Z and clear V.
LDSTtests = (
    '  arg, N, Z ',
    ( 0x00, 0, 1 ),
    ( 0x01, 0, 0 ),
    ( 0x7F, 0, 0 ),
    ( 0x80, 1, 0 ),
    ( 0xEA, 1, 0 ),
    ( 0xFF, 1, 0 ),
    )

#   LDx/STx instructions loading/storing 16-bit values.
#   All loads and stores affect N and Z and clear V.
LDST16tests = (
    '    arg, N, Z ',
    ( 0x0000, 0, 1 ),
    ( 0x0001, 0, 0 ),
    ( 0x00FF, 0, 0 ),
    ( 0x0100, 0, 0 ),
    ( 0x7FFF, 0, 0 ),
    ( 0x8000, 1, 0 ),
    ( 0xEA00, 1, 0 ),
    ( 0xFFFF, 1, 0 ),
    )

#### Loads

@tc(*LDSTtests)
def test_TAB(arg, N, Z):
    runop([I.TAB], initregs=R(a=arg), changedregs=R(b=arg, N=N, Z=Z, V=0))

@tc(*LDSTtests)
def test_TBA(arg, N, Z):
    runop([I.TBA], initregs=R(b=arg), changedregs=R(a=arg, N=N, Z=Z, V=0))

@tc(*LDSTtests)
def test_LDA(arg, N, Z):
    V = 0; C = None     # overflow always cleared; carry unchanged
    runbinary('LDA', not arg, arg, arg, N, Z, V, C)

@tc(*LDST16tests)
@pytest.mark.parametrize('reg', ('x', 'sp'))
def test_LD16(reg, arg, N, Z):
    instr = 'LD' + reg[0].upper()
    changedregs = R(**{ reg: arg}).clone(N=N, Z=Z, V=0)

    runop([I[instr], MB(arg), LB(arg)], changedregs=changedregs)

    addr = v8(arg)
    runop([I[instr + 'z'], addr],
        initmem={ addr: MB(arg), addr+1: LB(arg) },
        changedregs=changedregs)

    addr = v16(arg)
    runop([I[instr + 'm'], MB(addr), LB(addr)],
        initmem={ addr: MB(arg), addr+1: LB(arg) },
        changedregs=changedregs)

    addr = v16(arg); offset = v8(arg)
    runop([I[instr + 'x'], offset],
        initregs    = R(x=addr),
        initmem     = { addr+offset: MB(arg), addr+offset+1: LB(arg) },
        changedregs = changedregs)

@tc('sp', 0x0000, 0x1234, 0xFFFF)
def test_TSX(sp):
    xval = (sp + 1) & 0xFFFF
    #   Not clear if this is the best way to catch flag changes....
    runop([I.TSX], initregs=R(sp=sp, N=0, Z=1), changedregs=R(x=xval))
    runop([I.TSX], initregs=R(sp=sp, N=1, Z=0), changedregs=R(x=xval))

@tc('xval', 0x0000, 0x1234, 0xFFFF)
def test_TXS(xval):
    sp = (xval - 1) & 0xFFFF
    runop([I.TXS], initregs=R(x=xval, N=0, Z=1), changedregs=R(sp=sp))
    runop([I.TXS], initregs=R(x=xval, N=1, Z=0), changedregs=R(sp=sp))

#### Stores

@tc('arg', 0x00, 0x03, 0x88, 0xFF)
#   Different arg values tests at different memory locations.
def test_CLR(arg):
    Z = 1; N = V = C = 0
    rununary('CLR', arg, 0, N, Z, V, C)

@accx('STA~')
@tc(*LDSTtests)
def test_STA(opname, accval, arg, N, Z):
    addr = v8(arg)
    runop([I[opname + 'z'], addr], initregs=accval(arg),
        changedmem={ addr: arg }, changedregs=R(N=N, Z=Z, V=0))

    addr = v16(arg)
    runop([I[opname + 'm'], MB(addr), LB(addr)], initregs=accval(arg),
        changedmem={ addr: arg }, changedregs=R(N=N, Z=Z, V=0))

    addr = v16(arg); offset = v8(arg)
    runop([I[opname + 'x'], offset], initregs=accval(arg, x=addr),
        changedmem={ addr+offset: arg }, changedregs=R(N=N, Z=Z, V=0))

@tc(*LDST16tests)
@pytest.mark.parametrize('reg', ('x', 'sp'))
def test_ST16(reg, arg, N, Z):
    instr = 'ST' + reg[0].upper()
    initregs = R(**{ reg: arg})
    print('initregs', initregs)
    changedregs = R(N=N, Z=Z, V=0)

    addr = v16(arg)
    runop([I[instr + 'm'], MB(addr), LB(addr)], initregs=initregs,
        changedmem={ addr: MB(arg), addr+1: LB(arg) },
        changedregs=changedregs)

    addr = v8(arg)
    runop([I[instr + 'z'], addr], initregs=initregs,
        changedmem={ addr: MB(arg), addr+1: LB(arg) },
        changedregs=changedregs)

    offset = v8(arg)
    addr = (arg + offset) & 0xFFFF
    print('instr={}x arg=${:04X} offset=${:02X} addr=${:04X}'
        .format(instr, arg, offset, addr))
    runop([I[instr + 'x'], offset], memsize=65536,
        #   XXX We should be using an address different from the value we
        #   store (arg), but that probably requires splitting this part
        #   into two tests, which doesn't seem worthwhile given the
        #   commonality in the code under test.
        initregs=initregs.clone(x=arg),
        changedmem={ addr: MB(arg), addr+1: LB(arg) },
        changedregs=changedregs)

def test_STXz_rollover():
    ' XXX This should be confirmed on a real 6800. ' # XXX
    arg = 0x1234
    runop([I.STXz, 0xFF], initregs=R(x=arg),
        changedmem={ 0xFF: MB(arg), 0x100: LB(arg) },
        changedregs=R(N=0, Z=0, V=0))

def test_STXm_rollover():
    runop([I.STXm, 0xFF, 0xFF], memsize=64*1024, initregs=R(x=0x89AB),
        changedmem={ 0xFFFF: 0x89, 0x0000: 0xAB }, changedregs=R(N=1, Z=0, V=0))

####################################################################
#   Flag handling for data movement and logic

def test_isneg():
    assert not isneg(0)
    assert not isneg(0x7F)
    assert     isneg(0x80)
    assert     isneg(0xFF)

def test_isneg16():
    assert not isneg(0x0000, signbit=15)
    assert not isneg(0x7FFF, signbit=15)
    assert     isneg(0x8000, signbit=15)
    assert     isneg(0xFFFF, signbit=15)

def test_iszero():
    assert     iszero(0)
    assert not iszero(1)
    assert not iszero(0xFF)

def test_logicNZV():
    ' Covered by data movement and logic opcode tests. '

####################################################################
#   Logic operations

@tc(' arg,  res, N, Z, V, C',
    (0xFF, 0x00, 0, 1, 0, 1),
    (0x00, 0xFF, 1, 0, 0, 1),
    (0x55, 0xAA, 1, 0, 0, 1),
    (0xAA, 0x55, 0, 0, 0, 1),
)
def test_COM(arg, res, N, Z, V, C):
    rununary('COM', arg, res, N, Z, V, C)


ANDtests = (
    'arg0, arg1,  res, N, Z',
    (0x00, 0x00, 0x00, 0, 1),
    (0x00, 0xFF, 0x00, 0, 1),
    (0xFF, 0x00, 0x00, 0, 1),
    (0xFF, 0xFF, 0xFF, 1, 0),
    (0xAA, 0x3C, 0x28, 0, 0),
    (0xAA, 0xF0, 0xA0, 1, 0),
)

@tc(*ANDtests)
def test_AND(arg0, arg1, res, N, Z):
    V = 0; C = None
    runbinary('AND', arg0, arg1, res, N, Z, V, C)

@tc(*ANDtests)
def test_BIT(arg0, arg1, res, N, Z):
    #   `res` is ignored;
    #   here it merely documents what the result would have been.
    V = 0; C = None
    runbinary('BIT', arg0, arg1, arg0, N, Z, V, C)

@tc('arg0, arg1,  res, N, Z',
    (0x00, 0x00, 0x00, 0, 1),
    (0x00, 0xFF, 0xFF, 1, 0),
    (0xFF, 0x00, 0xFF, 1, 0),
    (0xFF, 0xFF, 0xFF, 1, 0),
    (0x12, 0x01, 0x13, 0, 0),
    (0xAA, 0x55, 0xFF, 1, 0),
    (0xAA, 0x3C, 0xBE, 1, 0),
    (0xAA, 0xF0, 0xFA, 1, 0),
)
def test_ORA(arg0, arg1, res, N, Z):
    V = 0; C = None
    runbinary('ORA', arg0, arg1, res, N, Z, V, C)

@tc('arg0, arg1,  res, N, Z',
    (0x00, 0x00, 0x00, 0, 1),
    (0x00, 0xFF, 0xFF, 1, 0),
    (0xFF, 0x00, 0xFF, 1, 0),
    (0xFF, 0xFF, 0x00, 0, 1),
    (0xAA, 0x55, 0xFF, 1, 0),
    (0xAA, 0xF0, 0x5A, 0, 0),
)
def test_EOR(arg0, arg1, res, N, Z):
    V = 0; C = None
    runbinary('EOR', arg0, arg1, res, N, Z, V, C)

@tc(' arg, N, Z',
    (0x00, 0, 1),
    (0x01, 0, 0),
    (0x7F, 0, 0),
    (0x80, 1, 0),
    (0xFF, 1, 0),
)
def test_TST(arg, N, Z):
    V = C = 0
    rununary('TST', arg, arg, N, Z, V, C)

####################################################################
#   Shifts and Rotates

#   The correct values for the N and Z (and for shifts, C) flags could be
#   calculated automatically by the test. However, we specify them manually
#   (and confirm they're correct in the test using the automated method)
#   because this makes it more clear in the test data that we're getting
#   coverage of all states of those flags.

@tc(' arg,  res, N, Z, C',
    (0x00, 0x00, 0, 1, 0),
    (0x21, 0x42, 0, 0, 0),
    (0x80, 0x00, 0, 1, 1),
    (0x81, 0x02, 0, 0, 1),
    (0xC8, 0x90, 1, 0, 1),
    (0xFF, 0xFE, 1, 0, 1),
    (0x55, 0xAA, 1, 0, 0),
    (0xAA, 0x54, 0, 0, 1),
)
def test_ASL(arg, res, N, Z, C):
    V = N^C
    rununary('ASL', arg, res, N, Z, V, C)

@tc(' arg, inC, C,  res, N, Z',   #  arg, inC, C,  res, N, Z
    (0x00, 0,   0, 0x00, 0, 1),    (0x00, 1,   0, 0x01, 0, 0),
    (0x01, 0,   0, 0x02, 0, 0),    (0x01, 1,   0, 0x03, 0, 0),
    (0x7F, 0,   0, 0xFE, 1, 0),    (0x7F, 1,   0, 0xFF, 1, 0),
    (0x80, 0,   1, 0x00, 0, 1),    (0x80, 1,   1, 0x01, 0, 0),
    (0xFE, 0,   1, 0xFC, 1, 0),    (0xFE, 1,   1, 0xFD, 1, 0),
    (0xFF, 0,   1, 0xFE, 1, 0),    (0xFF, 1,   1, 0xFF, 1, 0),
    (0x55, 0,   0, 0xAA, 1, 0),    (0x55, 1,   0, 0xAB, 1, 0),
    (0xAA, 0,   1, 0x54, 0, 0),    (0xAA, 1,   1, 0x55, 0, 0),
)
def test_ROL(arg, inC, C, res, N, Z):
    assert res & 1 == inC
    V = N^C
    rununary('ROL', arg, res, N, Z, V, C, inflags=R(C=inC))

@tc(' arg,  res, Z, V, C',
    (0x01, 0x00, 1, 1, 1),
    (0x02, 0x01, 0, 0, 0),
    (0xAA, 0x55, 0, 0, 0),
    (0xFF, 0x7F, 0, 1, 1),
)
def test_LSR(arg, res, Z, V, C):
    N = 0; assert V == C
    #   V is meaningless for LSR, but with ASL means "the sign has changed."
    rununary('LSR', arg, res, N, Z, V, C)

@tc(' arg,  res, N, Z, C',
    (0x00, 0x00, 0, 1, 0),
    (0x01, 0x00, 0, 1, 1),
    (0x02, 0x01, 0, 0, 0),
    (0x7F, 0x3F, 0, 0, 1),
    (0x80, 0xC0, 1, 0, 0),
    (0x81, 0xC0, 1, 0, 1),
    (0xFF, 0xFF, 1, 0, 1),
    (0x55, 0x2A, 0, 0, 1),
    (0xAA, 0xD5, 1, 0, 0),
)
def test_ASR(arg, res, N, Z, C):
    assert N == bool(res >> 7)
    V = N^C
    rununary('ASR', arg, res, N, Z, V, C)

@tc('inC,  arg,  res, C, N, Z',   # inC,  arg,  res, C, N, Z
    (  0, 0x00, 0x00, 0, 0, 1),    (  1, 0x00, 0x80, 0, 1, 0),
    (  0, 0x01, 0x00, 1, 0, 1),    (  1, 0x01, 0x80, 1, 1, 0),
    (  0, 0x02, 0x01, 0, 0, 0),    (  1, 0x02, 0x81, 0, 1, 0),
    (  0, 0x03, 0x01, 1, 0, 0),    (  1, 0x03, 0x81, 1, 1, 0),
    (  0, 0x55, 0x2A, 1, 0, 0),    (  1, 0x55, 0xAA, 1, 1, 0),
    (  0, 0xAA, 0x55, 0, 0, 0),    (  1, 0xAA, 0xD5, 0, 1, 0),
    (  0, 0xFE, 0x7F, 0, 0, 0),    (  1, 0xFE, 0xFF, 0, 1, 0),
    (  0, 0xFF, 0x7F, 1, 0, 0),    (  1, 0xFF, 0xFF, 1, 1, 0),
)
def test_ROR(inC, arg, res, N, Z, C):
    assert N == bool(res >> 7)  # shift just to be different from CUT's AND
    V = N^C
    rununary('ROR', arg, res, N, Z, V, C, inflags=R(C=inC))

####################################################################
#   Arithmetic operations

@tc(' arg,  res, N, Z, V, C',
    (0x01, 0xFF, 1, 0, 0, 1),
    (0xFF, 0x01, 0, 0, 0, 1),
    (0x7F, 0x81, 1, 0, 0, 1),
    (0x81, 0x7F, 0, 0, 0, 1),
    (0x00, 0x00, 0, 1, 0, 0),
    (0x80, 0x80, 1, 0, 1, 1),
)
def test_NEG(arg, res, N, Z, V, C):
    rununary('NEG', arg, res, N, Z, V, C)

@tc(' arg,  res, N, Z, V, C',
    (0x00, 0x01, 0, 0, 0, None),
    (0x01, 0x02, 0, 0, 0, None),
    (0x7E, 0x7F, 0, 0, 0, None),
    (0x7F, 0x80, 1, 0, 1, None),
    (0x80, 0x81, 1, 0, 0, None),
    (0xFE, 0xFF, 1, 0, 0, None),
    (0xFF, 0x00, 0, 1, 0, None),
)
def test_INC(arg, res, N, Z, V, C):
    rununary('INC', arg, res, N, Z, V, C)

@tc(' arg,  res, N, Z, V, C',
    (0xFF, 0xFE, 1, 0, 0, None),
    (0x81, 0x80, 1, 0, 0, None),
    (0x80, 0x7F, 0, 0, 1, None),   # only case where V set
    (0x7F, 0x7E, 0, 0, 0, None),
    (0x01, 0x00, 0, 1, 0, None),
)
def test_DEC(arg, res, N, Z, V, C):
    rununary('DEC', arg, res, N, Z, V, C)

@tc('     n,   succ, Z',
    (0x0000, 0x0001, 0),
    (0x00FF, 0x0100, 0),
    (0xFFFE, 0xFFFF, 0),
    (0xFFFF, 0x0000, 1),
)
def test_INX(n, succ, Z):
    runop([I.INX], initregs=R(x=n), changedregs=R(x=succ, Z=Z))

@tc('     n, succ, Z',
    (0x0001, 0x0000, 1),
    (0x0100, 0x00FF, 0),
    (0xFFFF, 0xFFFE, 0),
    (0x0000, 0xFFFF, 0),
)
def test_DEX(n, succ, Z):
    runop([I.DEX], initregs=R(x=n), changedregs=R(x=succ, Z=Z))

@tc('n, succ', (0,1), (0x100,0x101), (0xFFFE,0xFFFF), (0xFFFF,0x0000))
def test_INS(n, succ):
    runop([I.INS], initregs=R(sp=n), changedregs=R(sp=succ))

@tc('n, succ', (1,0), (0x100,0xFF), (0xFFFF,0xFFFE), (0x0000,0xFFFF))
def test_DES(n, succ):
    runop([I.DES], initregs=R(sp=n), changedregs=R(sp=succ))

####################################################################
#   Binary Arithmetic operations

ADDtests = (
    'arg0, arg1,  res, H, N, Z, V, C',
    (0x00, 0x00, 0x00, 0, 0, 1, 0, 0),
    (0x00, 0xFF, 0xFF, 0, 1, 0, 0, 0),
    #   H: half carry determined by bits 3
    (0x0E, 0x01, 0x0F, 0, 0, 0, 0, 0),
    (0x0F, 0x01, 0x10, 1, 0, 0, 0, 0),
    (0x10, 0x01, 0x11, 0, 0, 0, 0, 0),
    #   V: overflow determined by bits 6
    (0x7E, 0x01, 0x7F, 0, 0, 0, 0, 0),
    (0x7F, 0x01, 0x80, 1, 1, 0, 1, 0),
    (0x80, 0x01, 0x81, 0, 1, 0, 0, 0),
    #   C: carry determined by bits 7
    (0xFE, 0x01, 0xFF, 0, 1, 0, 0, 0),
    (0xFF, 0x01, 0x00, 1, 0, 1, 0, 1),
    (0xF0, 0x20, 0x10, 0, 0, 0, 0, 1),  # no half carry
    #   C and V
    (0x40, 0xF0, 0x30, 0, 0, 0, 0, 1),  # 2's comp: subtract from positive
    (0xF0, 0xF0, 0xE0, 0, 1, 0, 0, 1),  # 2's comp: subtract from negative
    (0x80, 0x80, 0x00, 0, 0, 1, 1, 1),
)

@tc(*ADDtests)
def test_ADD_C0(arg0, arg1, res, H, N, Z, V, C):
    runbinary('ADD', arg0, arg1, res, N, Z, V, C, H=H, inflags=R(C=0))

@tc(*ADDtests)
def test_ADD_C1(arg0, arg1, res, H, N, Z, V, C):
    runbinary('ADD', arg0, arg1, res, N, Z, V, C, H=H, inflags=R(C=1))

@tc(*ADDtests)
def test_ADC_C0(arg0, arg1, res, H, N, Z, V, C):
    runbinary('ADC', arg0, arg1, res, N, Z, V, C, H=H, inflags=R(C=0))

@tc(
    'arg0, arg1,  res, H, N, Z, V, C',
    (0x00, 0x00, 0x01, 0, 0, 0, 0, 0),
    (0x40, 0xF0, 0x31, 0, 0, 0, 0, 1),  # 2's comp: subtract from positive
    (0xF0, 0xF0, 0xE1, 0, 1, 0, 0, 1),  # 2's comp: subtract from negative
    #   H: half carry determined by bits 3
    (0x08, 0x08, 0x11, 1, 0, 0, 0, 0),
    (0x08, 0x07, 0x10, 1, 0, 0, 0, 0),
    (0x07, 0x08, 0x10, 1, 0, 0, 0, 0),
    (0x08, 0x06, 0x0F, 0, 0, 0, 0, 0),
    (0x06, 0x08, 0x0F, 0, 0, 0, 0, 0),
    (0x07, 0x07, 0x0F, 0, 0, 0, 0, 0),
    (0x01, 0x0F, 0x11, 1, 0, 0, 0, 0),
    #   V: overflow determined by bits 6
    (0x3F, 0x3F, 0x7F, 1, 0, 0, 0, 0),
    (0x70, 0x0E, 0x7F, 0, 0, 0, 0, 0),
    (0x70, 0x0F, 0x80, 1, 1, 0, 1, 0),
    (0x7F, 0x7F, 0xFF, 1, 1, 0, 1, 0),
    #   C: carry determined by bits 7
    (0xFE, 0x00, 0xFF, 0, 1, 0, 0, 0),
    (0xFE, 0x01, 0x00, 1, 0, 1, 0, 1),
    (0xF0, 0x20, 0x11, 0, 0, 0, 0, 1),  # no half carry
    #   Other edge cases
    (0x00, 0xFF, 0x00, 1, 0, 1, 0, 1),
    (0x00, 0xFE, 0xFF, 0, 1, 0, 0, 0),
    (0x80, 0x7F, 0x00, 1, 0, 1, 0, 1),
    (0x80, 0x80, 0x01, 0, 0, 0, 1, 1),
)
def test_ADC_C1(arg0, arg1, res, H, N, Z, V, C):
    runbinary('ADC', arg0, arg1, res, N, Z, V, C, H=H, inflags=R(C=1))

@pytest.mark.parametrize('inC', (0, 1))
def test_ABA(inC):
    ''' Tests just load/store locations; coverage for the addition
        operation itself is done in `test_ADD_C0()` and `test_ADD_C1`.
    '''
    runop([I.ABA], initregs=R(a=0x7F, b=0x02, C=inC),
        changedregs=R(a=0x81, H=1, N=1, Z=0, V=1, C=0))

SUBtests = (
    'arg0, arg1,  res, N, Z, V, C',     # minuend, subtrahend, difference
    (0x00, 0x00, 0x00, 0, 1, 0, 0),
    #   V: overflow determined by bits 6
    (0x81, 0x01, 0x80, 1, 0, 0, 0),
    (0x81, 0x02, 0x7F, 0, 0, 1, 0),
    (0x7F, 0x01, 0x7E, 0, 0, 0, 0),
    #   C: borrow determined by bits 7
    (0x01, 0x01, 0x00, 0, 1, 0, 0),
    (0x01, 0x02, 0xFF, 1, 0, 0, 1),
    (0xFF, 0x01, 0xFE, 1, 0, 0, 0),
    (0x00, 0xFF, 0x01, 0, 0, 0, 1),
)

@tc(*SUBtests)
def test_SUB_C0(arg0, arg1, res, N, Z, V, C):
    runbinary('SUB', arg0, arg1, res, N, Z, V, C, inflags=R(C=0))

@tc(*SUBtests)
def test_SUB_C1(arg0, arg1, res, N, Z, V, C):
    runbinary('SUB', arg0, arg1, res, N, Z, V, C, inflags=R(C=1))

@tc(*SUBtests)
def test_SBC_C0(arg0, arg1, res, N, Z, V, C):
    runbinary('SBC', arg0, arg1, res, N, Z, V, C, inflags=R(C=0))

@tc(
    'arg0, arg1,  res, N, Z, V, C',     # minuend, subtrahend, difference
    (0x00, 0x00, 0xFF, 1, 0, 0, 1),
    (0x00, 0x01, 0xFE, 1, 0, 0, 1),
    (0x01, 0x00, 0x00, 0, 1, 0, 0),
    #   V: overflow determined by bits 6
    (0x81, 0x00, 0x80, 1, 0, 0, 0),
    (0x81, 0x02, 0x7E, 0, 0, 1, 0),
    (0x7F, 0x01, 0x7D, 0, 0, 0, 0),
    #   C: borrow determined by bits 7
    (0x01, 0x00, 0x00, 0, 1, 0, 0),
    (0x02, 0x01, 0x00, 0, 1, 0, 0),
    (0x01, 0x01, 0xFF, 1, 0, 0, 1),
    (0xFF, 0x00, 0xFE, 1, 0, 0, 0),
    (0x00, 0xFE, 0x01, 0, 0, 0, 1),
    (0x00, 0xFF, 0x00, 0, 1, 0, 1),
)
def test_SBC_C1(arg0, arg1, res, N, Z, V, C):
    ''' These test vectors are substantially (but not completely) similar
        to `SUBtests` but account for the additional borrow flag (C)
        subtraction and differing results.
    '''
    runbinary('SBC', arg0, arg1, res, N, Z, V, C, inflags=R(C=1))

@pytest.mark.parametrize('inC', (0, 1))
def test_SBA(inC):
    ' As with `test_ABA()`. '
    runop([I.SBA], initregs=R(a=0x82, b=0x04, C=inC),
        changedregs=R(a=0x7E, N=0, Z=0, V=1, C=0))

def test_CMP():
    ''' This test just confirms that the accumulator is unchanged;
        `test_SUB()` provides the rest of the coverage.
    '''
    V = 1; N = Z = C = 0
    runbinary('CMP', 0x81, 0x02, 0x81, N, Z, V, C, inflags=R(C=0))
    runbinary('CMP', 0x81, 0x02, 0x81, N, Z, V, C, inflags=R(C=1))

@pytest.mark.parametrize('inC', (0, 1))
def test_CBA(inC):
    ' As with `test_SBA()`. '
    runop([I.CBA], initregs=R(a=0x82, b=0x04, C=inC),
        changedregs=R(a=0x82, N=0, Z=0, V=1, C=0))

@tc(' addr,      x,    arg, Z, N, V',
    #  Flag register value: 4  8  2
    (0x0F1, 0x0000, 0x0000, 1, 0, 0),     # BEQ taken
    (0x0F3, 0x0001, 0x0001, 1, 0, 0),
    (0x0F5, 0x0080, 0x0080, 1, 0, 0),
    (0x0F7, 0x7FFF, 0x7FFF, 1, 0, 0),
    (0x0F9, 0x8000, 0x8000, 1, 0, 0),
    (0x0FB, 0xFFFF, 0xFFFF, 1, 0, 0),

    (0x0FD, 0x0000, 0x0001, 0, 0, 0),     # BNE taken
    (0x0FF, 0x0000, 0x00FF, 0, 0, 0),
    (0x101, 0x0000, 0x0100, 0, 1, 0),

    (0x103, 0x0000, 0x8100, 0, 0, 0),
    (0x105, 0x0000, 0x80FF, 0, 1, 1),
    (0x107, 0x0000, 0x8000, 0, 1, 1),
    (0x109, 0x0000, 0x7FFF, 0, 1, 0),

    (0x10B, 0x0000, 0xFFFF, 0, 0, 0),
    (0x10D, 0x8000, 0x0000, 0, 1, 0),
    (0x10F, 0x8000, 0x00FF, 0, 1, 0),
    (0x121, 0x8000, 0x0100, 0, 0, 1),
)
def test_CPX(addr, x, arg, N, Z, V):
    runop([I.CPX, MB(arg), LB(arg)],
        initregs=R(x=x), changedregs=R(N=N, Z=Z, V=V))

    addr -= 0x40
    runop([I.CPXz, addr],
        initmem     = { addr: MB(arg), addr+1: LB(arg) },
        initregs    = R(x=x),
        changedregs = R(N=N, Z=Z, V=V))

    runop([I.CPXm, MB(addr), LB(addr)],
        initmem     = { addr: MB(arg), addr+1: LB(arg) },
        initregs    = R(x=x),
        changedregs = R(N=N, Z=Z, V=V))

def test_CPXx():
    ' Covers source locations; the compare itself is covered by `test_CPX()`. '
    x = 0x0123; offset = 0x80; addr = x + offset
    runop([I.CPXx, offset],
        initmem     = { addr: 0x01, addr+1: 0x23 },
        initregs    = R(x=x),
        changedregs = R(N=0, Z=1, V=0))
