;   pmon: a machine-language monitor

    ifdef UNIT_TESTING
;   XXX These definitions should really be coming from the .pt file.
pmon_ramlo      equ $80
rdlinebuf       equ $110
rdlinebuf_end   equ $140    ; 48 chars
pmon_ramhi      equ $180
pmon_org        equ $1000
    endif

; ----------------------------------------------------------------------
;   Memory Configuration

;   The memory areas used by the monitor are configured by constants that
;   must be defined before this file included.
;
;   `pmon_ramlo`, `pmon_ramhi` and `rdlinebuf`-`rdlinebuf_end` are the
;   three blocks of RAM storage required by the monitor. They all may be
;   anywhere in memory, but there is a slight code size and performance
;   benefit to having `pmon_ramlo` in the direct page.
;
;   `pmon_ramhi` may be left undefined to place that area immediately after
;   `pmon_ramlo`
;
;   `pmon_org` sets the start of the code.
;
;   XXX define pmon_ramlo_end and pmon_ramhi_end? Test usefulness with
;   usage of these forward definitions.

;   Abort assembly with a clear message if an essential definition is missing.
    set ______,
    pushv , pmon_ramlo, rdlinebuf, rdlinebuf_end, pmon_org
    popv  , ______,     ______,    ______,        ______

; ----------------------------------------------------------------------
;   Standard functions, macros and definitions
;   (Much of this should probably be moved to `stddef`.)

;   ASCII character definitions
BEL         equ $07                 ; bell ('\a')
BS          equ $08                 ; backspace ('\b')
LF          equ $0A                 ; line feed ('\n')
CR          equ $0D                 ; carriage return ('\r')
SPACE       equ ' '
DEL         equ $7F

;   Monitor definitions
PROMPT      equ '^'

    ifndef EXWIDTH
EXWIDTH     equ $10                 ; examine default: 16 bytes/line
    endif

; ----------------------------------------------------------------------
;   Storage for variables that must be in RAM.
;   Monitor variables are prefixed with `M`.

; ----------------------------------------
;   "Low" area aimed at maximum gain from minimum direct page usage.
            org pmon_ramlo

tmp1        ds  1       ; temp storage
tmp2        ds  2       ; temp storage
qhex_out    ds  2       ; last qhex result ($0000 if qhex failed)
cmdqptr     ds  2       ; Current parsing point in command input buffer.
                        ; Update this to consume parsed text, but do not
                        ; ever move it past the terminating $00.
Mpending    ds  2       ; last value input before a command

stat        ds  1       ; status values
stat_pend   equ $80     ;   b7: 0=no pending value, 1=pending value available
stat_begline equ $40    ;   b6: 1=we are at the beginning of a line
                        ;       0=we are in the middle of a line (or don't know)
                        ;   b5-0: unused

pmon_ramlo_end equ *

; ----------------------------------------
;   "High" area that gains little from being in the direct page.
        if defined(pmon_ramhi)
            org pmon_ramhi
        endif

cmdtbl      ds  2       ; pointer to command table (see below)
;   Saved register values (same memory order as interrupt stack frame):
Rcc         ds  1       ; condition codes
Rb          ds  1       ; accumulator B
Ra          ds  1       ; accumulator A
Rx          ds  2       ; index register X
Rpc         ds  2       ; program counter
Rsp         ds  2       ; stack pointer
;   Command data
Mexamcur    ds  2       ; examine command current start addr
Mexamwidth  ds  1       ; examine width: bytes per line to print
Mexamlines  ds  1       ; examine lines: number of lines to print
Mdepcur     ds  2       ; deposit command current start addr
Mcallcur    ds  2       ; call command address to call

pmon_ramhi_end equ *

; ----------------------------------------------------------------------
;   Code

            org pmon_org

; ----------------------------------------------------------------------
;   Command loop

;   Do minimum initialization to avoid truly broken behaviour and
;   then drop into command loop.
init        ldx #cmdtbl_std     ; default command table
            stx cmdtbl
            lda A,#EXWIDTH      ; default examine width
            sta A,Mexamwidth
            lda A,#8            ; default examine lines to print
            sta A,Mexamlines

cmdloop     jsr startline       ; prompt always printed at start of line
            lda A,#PROMPT
            jsr prchar
            jsr rdline
            bcs cmdloop         ; if ^C, ignore line
            stx cmdqptr         ; start parsing at beginning of input line

.parse      ;   Registers may have been destroyed at entry here.
            ldx cmdqptr
            lda A,0,X           ; reached terminator?
            beq cmdloop         ; yes, read another line of commands

            ;   Standard commands will RTS when done; we set up the stack
            ;   so that after we JMP to them they will come back here where
            ;   we will continue parsing the remainder of the command line.
            ;   (Essentially, continuation-passing style.)
            lda A,#LB(.parse)
            psh A
            lda A,#MB(.parse)
            psh A

            ;   Start by attempting to parse a hexword as the pending value.
            jsr qhexword        ; parsed a hexword?
            beq savepending     ; yes, save as pending and carry on parsing

            ;   Consume a char and parse it as a command.
            ;   (Callees may DEX to get the input buf addr of the parsed char.)
            lda A,0,X           ; load char we're checking
            inx                 ; move input pointer to next char
            stx cmdqptr         ;   for later

.search     ldx cmdtbl
.contsearch lda B,0,X           ; load next command char from table
            cmp B,#00           ; end of table?
            beq .unkcmd         ; yes, unknown command
            cba                 ; found command?
            beq .callcmd        ; yes, call it
            inx                 ; skip past command char in table
            inx                 ;   and its address
            inx
            bra .contsearch

.callcmd    ldx 1,X             ; load command address
            jmp ,X              ; call command (TCO)

            ;   No command matched; we have an error
.unkcmd     ldx cmdqptr         ; restore parse point because we had consumed
            dex                 ;   the command
            stx cmdqptr
            ;   fallthrough

;   Parse error: beep, print message, start fresh parser loop.
;
;   On a parse error we stop parsing (ignoring the remainder of the line)
;   and print a message `?nn c` where `c` is the offending character and
;   `nn` is its (zero-based) hex offset in the input buffer.
;
;   prperr_up first removes the top word from the stack, used by commands
;   that have a "continue parsing" continuation loaded and want to abort
;   parsing.
;

prperr_up   pul A               ; remove return address from stack
            pul A

prperr      jsr startline
            jsr errbeep
            lda A,#'?'
            jsr prchar
.tp0        ;   Subtract rdline buffer head address from current parse
            ;   position to get current offset into the parse buffer.
            ;   Since it's an unsigned subtraction, we can ignore the
            ;   MSB. This produces a wrap-around at $100, but it's unlikely
            ;   developers will have buffers that long, much less actual
            ;   command lines that long.
            lda A,cmdqptr+1
            sub A,#LB(rdlinebuf)
.tp1        jsr prhex
            jsr prspace
            ldx cmdqptr
            lda A,0,X
            cmp A,#' '+1
            bcs .hexchar        ; space and below prints as hex
            cmp A,#$7F
            bcc .hexchar        ; DEL and above prints as hex
            jsr prchar
            bra .exit
.hexchar    jsr prhex
.exit       jsr nextline
            jmp cmdloop

;   Consume just-parsed text and save pending value in qhex_out.
;
;   This is sort of a pesudo-command: the stack return is expected to be the
;   parsing continuation (as with a real command) but A/X/cmdqptr are not
;   advanced before entry.
;
savepending stx cmdqptr         ; consume the parsed text
            ldx qhex_out        ; copy parsed value into pending
            stx Mpending
            lda A,stat
            ora A,#$80          ; ensure pending available bit set
            sta A,stat
            rts

;   ♠X,stat ♣A  Copy Mpending to (X), if available.
;
;   If `stat` has bit 7 clear, indicating that the last call to `qhex` read
;   a value, copy that value to the location pointed to by X and clear bit
;   7 of `stat`. Otherwise do nothing.

usepending  tpa                 ; set bit 7 (pending available) in A
            bit A,stat          ; is it set?
            bpl .done           ; no, nothing pending
            lda A,Mpending      ; copy MSB
            sta A,0,X
            lda A,Mpending+1    ; copy LSB
            sta A,1,X
            lda A,stat
            and A,#$7F          ; clear pending available bit to indicate
            sta A,stat          ;   that Mpending has been consumed
.done       rts

;   ♣B Indicate to startline that we have text on the current line.
inline      lda B,stat
            and B,#(~stat_begline) ; clear begining of line bit
            sta B,stat
            rts

;   ♣A Print a newline if we have text on the current line (`inline` state).
startline   lda A,stat
            and A,#stat_begline ; at beginning of line?
            beq nextline        ; no, print a newline
            rts

;   ♣A Print a newline and clear inline state.
nextline    lda A,stat
            ora A,#stat_begline ; set beginning of line state
            sta A,stat
            jsr prnl
            rts

; ----------------------------------------------------------------------
;   Command Table

;   The `cmdtbl` variable points to the current command table used by the
;   parser. Each 3-byte entry is one of:
;   • A command character followed by the address of the routine
;     for that command; the routine should finish with RTS.
;   • A $00 character and $0000 address indicating end of table.
;   • XXX need to define entry for continuation address of table.

;   `init` sets `cmdtbl` to point to `cmdtbl_std`. The user may change this
;   to point to his own command table to add new commands or override
;   existing ones; usually the last entry of the user's table would be a
;   continuation pointer to `cmdtbl_std`.

cmdtbl_std
            db ' '
            dw      rtscmd      ; do nothing
            db ':'
            dw      deposit     ; enter data into memory
            db '?'
            dw      query       ; show representations of pending
            db '^'
            dw      nlcmd       ; print newline
            db 'k'
            dw      call        ; JSR to address ("kall")
            db 'q'
            dw      quitcmd     ; "quit"; exit to monitor's caller
            db 'r'
            dw      regscmd     ; show/set saved registers
            db 'x'
            dw      examine     ; examine memory
            db $C0
            dw      pratcmd     ; print '@'; used for testing
            db $00
            dw      $0000       ; end of table

; ----------------------------------------------------------------------
;   Commands
;
;   When a command routine is called, A will contain the command char and
;   `cmdqptr` will point to the first character after the command. If the
;   command routine does further parsing of arguments, it must increment
;   `cmdqptr` to consume what it has parsed. RTS will continue parsing
;   from `cmdqptr`.

quitcmd     pul B               ; remove parse continuation address so that we
            pul B               ;   return to what called the monitor
            ; fallthrough

rtscmd      rts                 ; do-nothing command

;   This command is used for testing the command parser; it's usually
;   bound an unprintable character such as $C0 (`@` with MSbit set).
pratcmd     jsr inline
            lda A,#'@'
            jmp prchar          ; RTS (TCO)

;   Print a newline (even if not inline).
;   This is useful for separating output, and also used by unit tests.
nlcmd       equ nextline

;   Call ("kall") to an address.
;
;   This leaves the monitor stack and other data in place so that an RTS
;   will continue parsing the command line.
;
;   WARNING: This assumes that the code being called will not change the
;   input buffer or move the stack! The monitor may also break if other
;   locations it depends upon are overwritten.
;
;   XXX Register values are undefined at call time. We should be setting
;   up the saved registers and flags on the stack and "calling" with RTI.

call        ldx #Mcallcur
            bsr usepending
            ldx Mcallcur
            jmp ,X              ; RTS (TCO)

;   deposit byte arguments to memory at Mcur.
;
;   The argument is pairs of ASCII hex digits. Spaces terminate reading of
;   a single-digit byte and are otherwise ignored. The data are terminated
;   by any other character, which will be left to be executed as the next
;   command on the line. The one exception is `:`, which is consumed in
;   order to provide a convenient way of terminating input when the
;   following command is a hex number that would otherwise be interpreted
;   as data to be deposited.
;
deposit     ldx #Mdepcur
            bsr usepending
            ldx Mdepcur
            stx tmp2            ; deposit index
.next       ldx cmdqptr         ; current input pointer
            jsr qhexbyte
            bne .nothex         ; not hexbyte, skip space or end
            stx cmdqptr         ; save next parse position
            lda A,qhex_out+1    ; byte we just read
            ldx tmp2            ; current deposit index
            sta A,,X
            inx
            stx tmp2            ; next deposit index
            bra .next

.nothex     lda A,,X            ; load next character
            cmp A,#':'          ; terminator to consume?
            beq .term           ; yes, we're done
            cmp A,#' '          ; is it a space?
            bne .rts            ; no, we're done
            inx                 ; skip past space
            stx cmdqptr
            bra .next           ; and continue parsing

.term       inx                 ; consume terminator
            stx cmdqptr
.rts        rts

;   "Query" pending, without consuming it. If no pending is available,
;   this uses the most recent value of pending. The value is printed in
;   hex, decimal (XXX not yet implemented), ASCII, etc.
;
query       jsr inline
            lda A,Mpending
            jsr prhex
            lda A,Mpending+1
            tab                 ; saves a reload later
            jsr prhex
            jsr prspace
            lda A,Mpending
            jsr prvischar
            tba                 ; saved Mpending+1
            jsr prvischar
            ;   Space instead of CR at end of output works better when
            ;   we have multiple commands per line.
            jsr prspace
            rts

;   Examine memory.
;
;   Starting at address `Mexamcur', `Mexamlines` of `Mexamwidth` bytes are
;   printed in hexadecimal.
;
;   If a pending value is available, `Mexamcur` is set to that, otherwise
;   it's left unchanged. Arguments after the command change persistent
;   seeings and are any of the following, where `NN` indicates a hexbyte.
;   Whitespace (including EOL) terminates the argument list.
;   - lNN   number of lines to dump
;   - wNN   nubmer of bytes dumped per line

examine     ldx #Mexamcur
            jsr usepending

.nextarg    jsr qwspace         ; end of arguments?
            bcs .print
            lda A,0,X           ; qwspace returned cmdqptr in X
            cmp A,#'l'          ; length opt?
            beq .linearg
            cmp A,#'L'
            beq .linearg
            cmp A,#'w'          ; width opt?
            beq .widtharg
            cmp A,#'W'
            beq .widtharg
            jmp prperr_up       ; bad arg: err and abort parsing line

            ;   XXX obviously this duplicated code could be refactored somehow
.linearg    inx                 ; consume option letter
            stx cmdqptr
            jsr qhexbyte        ; try to parse argument
            bne .nextarg        ; no parse, ignore the option letter
.linearg1   stx cmdqptr         ; consume parsed text
            lda A,qhex_out+1
            sta A,Mexamlines    ; set argument
            bra .nextarg

.widtharg   inx                 ; consume option letter
            stx cmdqptr
            jsr qhexbyte        ; try to parse argument
            bne .nextarg        ; no parse, ignore the option letter
            stx cmdqptr         ; consume parsed text
            lda A,qhex_out+1
            sta A,Mexamwidth    ; set argument
            bra .nextarg

.print      jsr startline
            lda A,Mexamlines    ; lines to print
            sta A,tmp1          ; set remaining lines left to print
            ldx Mexamcur        ; load start location to examine

.nextline   ;   print current line address
            stx tmp2
            lda A,tmp2          ; addr hi
            jsr prhex
            lda A,tmp2+1        ; addr lo
            jsr prhex
            lda A,#':'
            jsr prchar
            ;   print data
            lda B,Mexamwidth    ; bytes per line
.nexthex    jsr prspace
            lda A,,X
            jsr prhex
            inx
            dec B
            bne .nexthex
            jsr prnl
            dec tmp1            ; lines left to print
            bne .nextline
            rts

;   show/set saved registers
;
;   XXX ♣tmp2
;
;   The registers are named with single letters `pabxcs`. With no args, the
;   registers are printed as (space-prefixed) ` Cval` pairs of name character
;   and 2- or 4-character value. Otherwise arguments of a register letter
;   followed immediately by a hexbyte or hexword (depending on register size)
;   set register values. The argument list must be terminated by whitespace or
;   end of input.
;
regscmd     jsr qwspace         ; check args after command
            bcc .nextarg        ; not whitespace, we show instead of set

.show       lda A,#'p'
            lda B,Rpc
            jsr prchval
            lda A,Rpc+1
            jsr prhex

            lda A,#'a'
            lda B,Ra
            jsr prchval

            lda A,#'b'
            lda B,Rb
            jsr prchval

            lda A,#'x'
            lda B,Rx
            jsr prchval
            lda A,Rx+1
            jsr prhex

            lda A,#'c'
            lda B,Rcc
            jsr prchval

            lda A,#'s'
            lda B,Rsp
            jsr prchval
            lda A,Rsp+1
            jsr prhex

            jmp prnl            ; RTS TCO

.nextarg    ldx #Rpc
            lda A,#'p'
            bsr .setword
            ldx #Ra
            lda A,#'a'
            bsr .setbyte
            ldx #Rb
            lda A,#'b'
            bsr .setbyte
            ldx #Rx
            lda A,#'x'
            bsr .setword
            ldx #Rcc
            lda A,#'c'
            bsr .setbyte
            ldx #Rsp
            lda A,#'s'
            bsr .setword
            ldx cmdqptr
            jsr qwspace         ; parsed no valid arg; wspace ending arg list?
            bcc .argerr1        ; no, error
.rts        rts                 ; otherwise command is complete

.argerr     pul B               ; unstack setbyte/setword RTS
            pul B
.argerr1    jmp prperr_up

.setbyte    ;   If next char matches A, parse a hexbyte and write to [X].
            stx tmp2            ; save location
            ldx cmdqptr
            lda B,0,X           ; get next char
            cba                 ; matches the arg?
            bne .rts            ; no, carry on
            inx                 ; consume matched char
            jsr qhexbyte
            bne .argerr         ; no word, die
            stx cmdqptr         ; consume parsed value
            ldx tmp2            ; target location
            lda B,qhex_out+1
            sta B,0,X           ; save parsed LSB
            pul B               ; remove continuation
            pul B
            bra .nextarg        ;    because we directly continue arg loop

.setword    ;   If next char matches A, parse a hexword and write to [X].
            stx tmp2            ; save location
            ldx cmdqptr
            lda B,0,X           ; get next char
            cba                 ; matches the arg?
            bne .rts            ; no, carry on
            inx                 ; consume matched char
            jsr qhexword        ;
            bne .argerr         ; no word, die
            stx cmdqptr         ; consume parsed value
            ldx tmp2            ; target location
            lda B,qhex_out
            sta B,0,X           ; save parsed MSB
            lda B,qhex_out+1
            sta B,1,X           ; save parsed LSB
            pul B               ; remove continuation
            pul B
            bra .nextarg        ;    because we directly continue arg loop

;   ♣A print space, char in A, byte in B as hex
prchval     psh B               ; some platforms's prchar may not preserve this
            psh A
            jsr prspace
            pul A
            jsr prchar
            pul A               ; previous B value
            jmp prhex           ; RTS TCO

; ----------------------------------------------------------------------
;   rd* - read input

;   ♠X ♣A ♡B Read a line of user input into rdlinebuf, echoing each character.
;   On return X will point to the start of the chars read, terminated by $00,
;   and the carry will be clear for CR termination, set for ^C termination.
;
;   The following characters are interpreted specially:
;     - BS, DEL: if not at start of input, echo a BS and delete the
;       previously entered character.
;     - CR: echo a newline and return with C=0.
;     - ^C: beep, echo a newline and return with C=1.
;
;   This uses a fixed input buffer, rdlinebuf, which is overwritten with every
;   call. When the buffer is full rdline will beep instead of accepting input.
;
rdline      ldx #rdlinebuf
.nextchar   jsr rdchar
            cmp A,#CR           ; done?
            bne .continue
            jsr prnl
            clr ,X              ; clears carry
.ret        ldx #rdlinebuf      ; no effect on carry
            rts

.continue   cmp  A,#$03         ; Ctrl-C
            beq  .cancel
            ;   If we're on the last byte of the buffer, we need to save that
            ;   for the termination char. So just reject input at that point.
            cpx #(rdlinebuf_end - 1)
            bne .accept
            jsr errbeep
            bra .nextchar

.accept     cmp  A,#$00         ; ignore NUL
            beq  .nextchar
            cmp  A,#BS
            beq .backspace
            cmp  A,#DEL
            beq .backspace
            sta A,0,X
            inx
.echo       jsr prchar
            bra .nextchar

.backspace  cpx #rdlinebuf
            beq +               ; don't backspace past beginning of buffer
            dex
+           lda A,#BS
            bra .echo

.cancel     ;   We terminate without storing the Ctrl-C char mainly
            ;   because we don't know if we have space for it. We might
            ;   be on the last byte of the buffer already.
            clr ,X
            jsr errbeep         ; beep to indicate cancel
            jsr prnl
            sec                 ; indicate input cancelled
            bra .ret

; ----------------------------------------------------------------------
;   q* - parsing

            include "src/mc68/qhex.a68"

;   ♠X,cmdqptr  ♣A Parse/consume one whitespace char at cmdqptr
;   Return C=1 if whitespace is found, C=0 otherwise.
;
;   This will consume the whitespace character (by incrementing `cmdqptr`)
;   if found, also returning the new `cmdqptr` in X. However, $00 is
;   considered whitespace (because this still terminates command lines and
;   argument lists) but is not consumed for obvious reasons.
;
qwspace     ldx cmdqptr
            lda A,,X
            cmp A,#$00
            beq .noconsume
            cmp A,#'\t'
            beq .consume
            cmp A,#'\n'
            beq .consume
            cmp A,#'\r'
            beq .consume
            cmp A,#' '
            beq .consume
            clc                 ; failure
            rts

.consume    inx
            stx cmdqptr
.noconsume  sec                 ; success
            rts

; ----------------------------------------------------------------------
;   pr* - printing output

;   ♣A Print value in A as hex to the character output port.
;   Falls through to prnyb.
prhex       psh A
            lsr A
            lsr A
            lsr A
            lsr A
            bsr prnyb
            pul A
            ; fallthrough

;   ♣A Print lower nybble of A to the character output port.
prnyb       and A,#$0F
            add A,#'0'
            cmp A,#'9'+1
            bmi .digit
            add A,#'A'-'9'-1
.digit      jmp prchar          ; RTS (TCO)

;   ♣A Print a space.
prspace     lda A,#SPACE
            jsr prchar
            rts

;   ♣A Print any (8-bit) value "visibly" as one character.
;
;   The output is always a character from the printable ASCII range. Bit 7
;   is ignored, characters in the control sticks ($00-$1F) are shifted
;   up into the upper-case ASCII sticks, and DEL is printed as `?` (i.e.,
;   shifted down in the reverse direction from the control chars).
;
;   XXX This should be printing control chars in reverse video.
;
;   This is a more informative alternative to printing just a `.` for any
;   non-printing char. It is slightly more subject to confusion in that it
;   can make non-ASCII look more like ASCII, but it's assumed that the
;   viewer will also have hex output easily available to help distinguish
;   the two.
;
prvischar   and A,#$7F          ; clear bit 7
            cmp A,#DEL
            beq .isctl
            cmp A,#' '
            bcc .notctl
.isctl      ;   Flipping bit 6 of a control character moves it up by $40
            ;   into the upper-case sticks, except for DEL where it's
            ;   moved down by 40 into the numeric/symbol stick.
            eor A,#(1<<6)
.notctl     jsr prchar
            rts
